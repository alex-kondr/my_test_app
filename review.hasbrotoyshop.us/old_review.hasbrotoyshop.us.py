# -*- coding: utf8 -*-from agent import *from models.products import *import yamlimport simplejsondef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://hasbropulse.com/collections/all?page=1&rb_reviews_average_score_titles=fivestar%7Cfourstar%7Cthreestar%7Ctwostar%7Conestar', ignore_errors=1, use="curl"), process_productlist, {})    #url = 'https://www.searchanise.com/getresults?api_key=2Q2G3F8Z6N&q=&sortBy=created&sortOrder=asc&restrictBy%5Breviews_average_score_titles%5D=fivestar%7Cfourstar%7Cthreestar%7Ctwostar%7Conestar&startIndex=0&maxResults=250&items=true&pages=true&categories=true&suggestions=true&queryCorrection=true&suggestionsMaxResults=3&pageStartIndex=0&pagesMaxResults=250&categoryStartIndex=0&categoriesMaxResults=20&facets=true&facetsShowUnavailableOptions=true&ResultsTitleStrings=15&ResultsDescriptionStrings=0&page=1&tab=products&collection=all&output=jsonp'    #session.queue(Request(url), process_productlist, dict(base_url=url, page=1))def process_productlist(data, context, session):    for link in data.xpath('//div[@class="ais-hit--details"]//a'):        url = link.xpath('@href').string()        name = link.xpath('text()').string()        if url and name:#and not session.seen(url):            session.queue(Request(url, ignore_errors=1, use="curl"), process_product, dict(context, url=url, name=name))    # Next page    next = data.xpath('//link[@rel="next"]//@href').string()    if next:        session.queue(Request(next, ignore_errors=1, use="curl"), process_productlist, dict(context))def process_productlistJSON(data, context, session):    jstxt = data.content    jstxt = jstxt.replace('\"','"')    jstxt = jstxt.replace('\"','"')    jstxt = jstxt.replace('\\n','')    jstxt = jstxt.replace('\\','')    prods = yaml.load(jstxt)    cnt = 0    for prod in prods['items']:        cnt += 1        pid = prod['product_code']        name = prod['title']        url = prod['link']        revs = prod['total_reviews']        if revs > 0:            session.queue(Request(url, ignore_errors=1, use="curl"), process_product, dict(context, url=url, name=name, pid=pid))    if cnt == 250:        page = context['page'] + 1        if page > 100: return        url = context['base_url'].replace('page=1','page='+str(page))        session.queue(Request(url, ignore_errors=1, use="curl"), process_productlist, dict(context, page=page))def process_product(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    product.ssid = context.get('pid') or product.name + product.url    product.category = 'Toys'    product.manufacturer = 'Hasbro'    uri = 'https://staticw2.yotpo.com/batch?methods=[{"method":"main_widget","params":{"pid":"%s","page":1,"order_metadata_fields":{}}}]&app_key=IcjbZllYmf1WBGYAGFKLDiMmg4uxbfR8F4VDT2se'    pid = data.xpath('//form[@js-product-id]//@js-product-id').string()    if pid:        product.ssid = pid        uri = uri % pid        session.do(Request(uri), process_review, dict(product=product, page=1, base_url=uri))    if product.reviews:        session.emit(product)def process_review(data, context, session):    product = context['product']    jstxt = data.content    print 'jstxt:', jstxt    if 'result' not in jstxt: return    try:        revs = yaml.load(jstxt)    except:        print 'Error?', jstxt        return    html_data = revs[0]['result']    html_data = html_data.replace('\"','"')    html_data = html_data.replace('\"','"')    html_data = html_data.replace('\\n','')    html_data = html_data.replace('\\','')    html_data= '<html><head></head><body>\n' + html_data + '\n</body></html>'    data = data.parse_fragment(html_data)    cnt = 0    for link in data.xpath('//div[@data-review-id]'):        cnt += 1        review = Review()        review.product = product.name        review.url = product.url        review.ssid = link.xpath('@data-review-id').string()        review.type = 'user'        review.title = link.xpath('descendant::div[contains(@class,"content-title")]//text()').string()        pub_date = link.xpath('descendant::span[contains(@class,"yotpo-review-date")]//text()').string()        if pub_date:            if 'T' in pub_date: pub_date = pub_date.split('T')[0]            review.date = pub_date        else:            review.date = 'unknown'        author = link.xpath('descendant::span[contains(@class,"yotpo-user-name")]//text()').string(multiple=True)        if author:            review.authors.append(Person(name=author, ssid=author))        else:            review.authors.append(Person(name='unknown', ssid='unknown'))        overall = link.xpath('descendant::span[contains(@class,"yotpo-icon-star rating-star ")]')        if overall:            score = len(overall)            review.grades.append(Grade(name='Overall Rating', type='overall', value=score, best=5))        summary = link.xpath('descendant::div[@class="content-review"]//text()').string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            product.reviews.append(review)    if cnt == 5:        page = context['page'] + 1        url = context['base_url'].replace('"page":1', '"page":' + str(page))        print url        if page > 100: return        session.do(Request(url), process_review, dict(context, page=page))