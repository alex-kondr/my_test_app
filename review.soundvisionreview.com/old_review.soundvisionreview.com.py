import stringfrom agent import *from models.products import *import redef process_category(data, context, session):    for categoryline in data.xpath("//ul[@id='menu-category-menu']/li/a[contains(@href,'/category/')]"):        context['category_url'] = categoryline.xpath("@href").string()        context['category_name'] = categoryline.xpath("text()").string()        if context['category_name']:          session.queue(Request(context['category_url']), process_view_category, context)          #session.emit(Product(name = 'product_name', url = category_url, category = category_name))def process_view_category(data, context, session):    for view_categoryline in data.xpath("//h3[@class='entry-title mh-loop-title']"):        context['product_url'] = view_categoryline.xpath("a/@href").string()        context['product_name'] = view_categoryline.xpath("a/text()[string-length(normalize-space(.))>1]").join(" ")        context['excerpt'] = view_categoryline.xpath("following-sibling::div[@class='mh-loop-excerpt'][1]/div/p/text()[string-length(normalize-space(.))>1]").join(" ")        if context['product_url'] and context['product_name'] and context['excerpt']:            session.queue(Request(context['product_url']), process_product, context)            #session.emit(Product(name = context['product_name'], url = context['product_url'], category = context['category_name']))    next = data.xpath("//a[@class='next page-numbers']/@href").string()    if next:        session.queue(Request(next), process_view_category, context)def process_product(data, context, session):     product = Product()    product.url = context['product_url']     product.ssid = context['product_url']    product.name = context['product_name']    product.category = context['category_name']    for imageline in data.xpath("//div[contains(@class,'entry-content')]//img"):        url_image = imageline.xpath("@src").string()        if url_image:            product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.url = context['product_url']     review.ssid = context['product_url']     review.title = context['product_name']    review.type = 'pro'    review.properties.append(ReviewProperty(type='excerpt', value = context['excerpt']))    username = 'SoundVisionTeam'    if username:        review.authors = Person(name = username, ssid = username) 		    pros = data.xpath("//strong[text()[regexp:test(.,'PLUS')]]/following-sibling::text()[string-length(normalize-space(.))>0][1]").string()    if pros:        review.properties.append(ReviewProperty(name='PLUS', type='pros', value=pros))              cons = data.xpath("//strong[text()[regexp:test(.,'MINUS')]]/following-sibling::text()[string-length(normalize-space(.))>0][1]").string()    if cons:        review.properties.append(ReviewProperty(name='MINUS', type='cons', value=cons))              summary = data.xpath("//div[@class='review-desc']/p[span/text()[string-length(normalize-space(.))>20]]//text()[string-length(normalize-space(.))>0]").join(" ")    if summary:        review.properties.append(ReviewProperty(name='SUMMARY', type='summary', value=summary))          grade1 = data.xpath("//span[@class='review-total-box']/text()[string-length(normalize-space(.))>0]").string() 			    if grade1:   			       rating_value = re_search_once('(\d+)', grade1) 			       if rating_value and rating_value != '0': 			            review.grades.append(Grade(name= 'RATING', value = rating_value, worst = 0,  best = 100, type = 'overall'))    grade2 = data.xpath("//span[@class='wp-review-user-rating-total']/text()[string-length(normalize-space(.))>0]").string() 			    if grade2:   			       rating_value2 = re_search_once('(\d+)', grade2) 			       if rating_value2 and rating_value2 != '0': 			            review.grades.append(Grade(name= 'User Rating', value = rating_value2, worst = 0,  best = 100, type = 'overall'))    for gradeline in data.xpath("//ul[@class='review-list']/li/span[1]"):        rating_name = gradeline.xpath("span/text()[string-length(normalize-space(.))>0]").string()        rating_value = re_search_once('(\d+)', gradeline.xpath("span/span/text()[string-length(normalize-space(.))>0]").string())        if rating_value and rating_value != '0' and rating_name:            review.grades.append(Grade(name= rating_name, value = rating_value, worst = 0, best = 100))    product.reviews.append(review)    session.emit(product)def run(context, session):    session.browser.agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0) Gecko/20100101 Firefox/31.0"    session.queue(Request('http://www.soundvisionreview.com'), process_category, {}) 