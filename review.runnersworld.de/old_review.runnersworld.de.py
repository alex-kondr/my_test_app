#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):    session.queue(Request('https://www.runnersworld.de/ausruestung/'), process_category, {})    #session.queue(Request('http://www.runnersworld.de/ernaehrung/elektrolytgetraenke-im-test.314746.htm'), process_product, {'product_url': '111'})def process_category(data, context, session):    for cat in data.xpath('//div[@class="mb-4"]//a'):        category = cat.xpath('@href').string()        url = cat.xpath('@href').string()        if category and url:            category = category.split('.de/')[1][:-1]            session.queue(Request(url), process_productlist, dict(category=category))def process_productlist(data, context, session):    for prod in data.xpath('//a[@class="va-list-item relative flex"]'):        url = prod.xpath('@href').string()        name = prod.xpath('following::node()[contains(@class,"va-headline")][1]//text()').string()        if url and name and 'im Test' in name:            name = name.replace('im Test','')            session.queue(Request(url), process_product, dict(context, url=url, name=name))    next = data.xpath('//div[contains(@class,"va-pagination")]//a[contains(@class,"bg-skin-primary")]/following-sibling::a[1]//@href').string()    if next:        session.queue(Request(next), process_productlist, context)def process_product(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    product.ssid = product.name + product.url    product.category = data.xpath('//meta[@name="article:tag"]//@content').string() or context['category']    if ',' in product.category: product.category = product.category.replace(',','|')    product.manufacturer = data.xpath('//meta[@name="Special"]//@content').string()    review = Review()    review.product = product.name    review.url = product.url    review.ssid = product.ssid + ' review'    review.type = 'pro'    revDate = data.xpath('//meta[@name="date"]//@content').string()    if revDate:        if 'T' in revDate: revDate = revDate.split('T')[0]        review.date = revDate    revAuthor=data.xpath('//a[contains(@class, "va-article-author")]//text()').string(multiple=True)    if revAuthor:        review.authors.append(Person(name=revAuthor, ssid=revAuthor))    conclusion = data.xpath('//node()[contains(descendant::text(), "Fazit")]/following-sibling::p//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    summary = data.xpath('//div[@class="va-article-lead"]//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))    excerpt = data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        if summary: excerpt = ''.join(excerpt.split(summary))        review.properties.append(ReviewProperty(type='excerpt', value=excerpt + '...'))    product.reviews.append(review)    if product.reviews:        session.emit(product)