from agent import *from models.products import *def run(context, session):    session.queue(Request("http://www.pointgphone.com/tests-android/", use="curl",  force_charset="utf-8"), process_revlist, dict())def process_revlist(data, context, session):    revs = data.xpath("//h2[@class='entry-title']/a")    for rev in revs:        title = rev.xpath("text()").string()        url = rev.xpath("@href").string()        if url and title:            session.queue(Request(url, use="curl", force_charset="utf-8"), process_review, dict(url=url, title=title))    next_url = data.xpath("//a[@class='next page-numbers']/@href").string()    if next_url:        session.queue(Request(next_url, use="curl", force_charset="utf-8"), process_revlist, dict())def process_review(data, context, session):    reviews = data.xpath("//h4[(.//span[contains(.,'Points forts')])]")    if len(reviews) >= 1:        process_reviews_procon(data, context, session)        return    product = Product()    product.name = context['title']    product.url = context['url']    product.ssid = context['url'].split("/")[-2].split("-")[-1]    product.category = data.xpath("//div[@class='penci-entry-categories']/span[@class='penci-cat-links']//text()").string() or "Tests et Dossiers"    review = Review()    review.type = 'pro'    review.title = context['title']    review.url = product.url    review.ssid = product.ssid    date = data.xpath("//div[@class='entry-meta penci-entry-meta']//time/@datetime").string()    if date:        review.date = date.split(":")[0].split("T")[0]    author_name = data.xpath("//a[@rel='author']//text()").string()    author_url = data.xpath("//a[@rel='author']/@href").string()    if author_name and author_url:        review.authors.append(Person(name=author_name, profile_url=author_url, ssid=author_name))    fscore = data.xpath("//div[@class='penci-review-score-num']//text()").string()    if fscore:        fscore = float(fscore.replace(",", "."))        if fscore <= 5:            review.grades.append(Grade(type='overall', value=fscore, best=5.0))            grades = data.xpath("//div[@class='penci-review-text']")            for grade in grades:                grade_name = grade.xpath("div[@class='penci-review-point']//text()").string()                grade_val = grade.xpath("div/i[@class='fa fa-star']")                if grade_name != 'Overall' and grade_val:                    review.grades.append(Grade(name=grade_name, value=float(len(grade_val)), best=5.0))        else:            review.grades.append(Grade(type='overall', value=fscore, best=10.0))            grades = data.xpath("//ul[@class='penci-review-number']/li/div[@class='penci-review-text']")            for grade in grades:                grade_name = grade.xpath("div[@class='penci-review-point']//text()").string()                grade_val = grade.xpath("div[@class='penci-review-score']//text()").string().replace(",", ".")                if grade_name != 'Overall':                    review.grades.append(Grade(name=grade_name, value=float(grade_val), best=10.0))    pros = data.xpath("//div[@class='penci-review-good']/ul/li//text()")    for pro in pros:        pro = pro.string().strip()        if pro:            review.add_property(type='pros', value=pro)    cons = data.xpath("//div[@class='penci-review-good penci-review-bad']/ul/li//text()")    for con in cons:        con = con.string().strip()        if con:            review.add_property(type='cons', value=con)    excerpt = data.xpath("//p[not(@class='penci-mega-date')]//text()").string(multiple=True)    next_page = data.xpath("//link[@rel='next']/@href").string()    if next_page:        if excerpt and excerpt.split()[0] != "[review":            excerpt = excerpt.split("Smartphones Tablettes")[0].split("Source :")[0]            review.add_property(type="summary", value=excerpt)        session.do(Request(next_page), process_lastpage, dict(product=product, review=review, url=next_page))        return    conclusion = data.xpath("//*[contains(text(),'verdict') or contains(text(),'Conclusion') or contains(text(),'En conclusion')]//following-sibling::p//text()").string(multiple=True)    if conclusion:        review.add_property(type='conclusion', value=conclusion)    if excerpt and excerpt.split()[0] != "[review":        excerpt = excerpt.split("Smartphones Tablettes")[0].split("Source :")[0]        if conclusion:            excerpt = excerpt.split(conclusion.strip())[0]        review.add_property(type='excerpt', value=excerpt)        product.reviews.append(review)        session.emit(product)def process_lastpage(data, context, session):    product = context["product"]    review = context["review"]    page = context["url"].split("/")[-2]    review.add_property(type="pages", value=dict(url=context["url"], title=product.name+'-'+str(page)))    next_page = data.xpath("//link[@rel='next']/@href").string()    if next_page:        session.do(Request(next_page), process_lastpage, dict(context, url=next_page))        return    pros = data.xpath("//p[contains(.,'Points positifs :')]/following::ul[not (.//a) and (following::p[contains(.,'Points négatifs :')])]//li")    for pro in pros:        pro = pro.xpath(".//text()").string().strip()        if pro:            review.add_property(type='pros', value=pro)    cons = data.xpath("//p[contains(.,'Points négatifs :')]/following::ul[not (.//a)]//li")    for con in cons:        con = con.xpath(".//text()").string().strip()        if con:            review.add_property(type='cons', value=con)    conclusion = data.xpath("//*[contains(text(),'verdict') or contains(text(),'Conclusion') or contains(text(),'En conclusion')]//following-sibling::p//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//*[contains(text(),'verdict') or contains(text(),'Conclusion') or contains(text(),'En conclusion')]//following::p[not(.//a)]//text()").string(multiple=True)    if conclusion:        review.add_property(type="conclusion", value=conclusion)    excerpt = data.xpath("//p[not(@class='penci-mega-date') and not(contains (text(),'Points positifs')) and not(contains (text(),'Points négatifs'))]//text()").string(multiple=True)    if excerpt and excerpt.split()[0] != "[review":        excerpt = excerpt.split("Smartphones Tablettes")[0].split("Source :")[0].replace('Points positifs et points négatifs', '')        if conclusion:            excerpt = excerpt.split(conclusion.strip())[0]        review.add_property(type='excerpt', value=excerpt)        product.reviews.append(review)        session.emit(product)def process_reviews_procon(data, context, session):    revs = data.xpath("//h3[not(@class) and following::h4[(.//span[contains(.,'Points forts')])]]")    for i, rev in enumerate(revs):        product = Product()        product.category = data.xpath("//div[@class='penci-entry-categories']/span[@class='penci-cat-links']//text()").string() or "Tests et Dossiers"        product.url = context['url']        product.ssid = context['url'].split("/")[-2].split("-")[-1] + '-' + str(i+1)        product.name = rev.xpath(".//text()").string(multiple=True)        review = Review()        review.type = 'pro'        review.title = context['title']        review.url = product.url        review.ssid = product.ssid        date = data.xpath("//div[@class='entry-meta penci-entry-meta']//time/@datetime").string()        if date:            review.date = date.split(":")[0].split("T")[0]        author_name = data.xpath("//a[@rel='author']//text()").string()        author_url = data.xpath("//a[@rel='author']/@href").string()        if author_name and author_url:            review.authors.append(Person(name=author_name, profile_url=author_url, ssid=author_name))        pros = rev.xpath("following::ul[following::h4[(.//span[contains(.,'ints forts')])] and not(.//em)][1]//li")        for pro in pros:            pro = pro.xpath(".//text()").string().strip()            if pro:                review.add_property(type='pros', value=pro)        cons = rev.xpath("following::ul[following::div[contains(@style,'text-align:center')] and not(.//em)][2]//li")        for con in cons:            con = con.xpath(".//text()").string().strip()            if con:                review.add_property(type='cons', value=con)        excerpt = ""        rev_info = rev.xpath("following-sibling::*[not(self::ul)][not(self::h2)][not(self::h3)][not(self::div)][not(self::noscript)]")        for info in rev_info:            if info.xpath("self::p/text()").string(multiple=True):                excerpt += info.xpath(".//text()").string(multiple=True) + " "            elif info.xpath("self::h4[(.//text())]"):                break        if excerpt:            review.add_property(type='excerpt', value=excerpt)            product.reviews.append(review)            session.emit(product)