from agent import *from models.products import *debug = Trueimport redef process_productlist(data, context, session):   for prod in data.xpath("//div[@class='cell annuaire medium-order-3']//ul/li/a"):      url = prod.xpath("@href").string()      name = prod.xpath("descendant::text()").string(multiple=True)      category2 = prod.xpath("preceding::h3[1]//text()").string(multiple=True)      category = prod.xpath("preceding::h2[1]//text()").string(multiple=True)      if url and name and category2 and category:         session.queue(Request(url), process_review, dict(url=url, name=name, category='%s|%s'%(category, category2)))def process_review(data, context, session):   product = Product()   product.name = context['name']   product.category = context['category']   product.url = context['url']   product.ssid = re_search_once('article-(\d+)', product.url)   content = data.xpath("//div[@id='contenu']").first()   if content:      review = Review()      review.type = 'pro'      review.title = content.xpath("descendant::h1//text()").string()      review.url = context['url']      review.ssid = re_search_once('article-(\d+)', review.url)      review.date = content.xpath("descendant::div[@class='author-infos-date mt4']/text()").string()      author = content.xpath("descendant::div[@class='author-infos']//a[regexp:test(@href,'auteur')]").first()      if author:         aname = author.xpath("descendant::text()").string(multiple=True)         aurl = author.xpath("@href").string()         if aname and aurl:            review.authors.append(Person(name=aname, profile_url=aurl, ssid=aname))      summary = content.xpath("descendant::div[@id='sommaire']/following-sibling::b[1]//text()").string(multiple=True)      if not(summary):         summary = content.xpath("descendant::div[@class='grid-x text']/div[@class='cell']/strong[1]//text()").string(multiple=True)      if summary:         review.add_property(type='summary', value=summary)      excerpt = content.xpath("descendant::div[@id='sommaire']/following-sibling::node()[not(regexp:test(name(),'h2|b|div'))][count(preceding-sibling::h2)=0]/descendant-or-self::text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("descendant::div[@class='grid-x text']/div[@class='cell']/node()[not(regexp:test(name(),'h1|b|strong|div'))][count(preceding-sibling::h1)=0]/descendant-or-self::text()").string(multiple=True)      if excerpt:         review.add_property(type='excerpt', value=excerpt)      conclusion = content.xpath("descendant::div[@id='sommaire']/following-sibling::node()[preceding-sibling::h2[1][regexp:test(normalize-space(.),'Conclusion|avis de Clubic')] and following-sibling::div[@class='grid-x grid-padding-x mt10']]/descendant-or-self::text()").string(multiple=True)      if not(conclusion):         conclusion = content.xpath("descendant::div[@class='grid-x text']/div[@class='cell']/node()[not(regexp:test(name(),'h1|b|strong|div'))][preceding-sibling::h1[1][regexp:test(normalize-space(.),'Conclusion|avis de Clubic')] and following-sibling::div[@class='grid-x grid-padding-x mt10']]/descendant-or-self::text()").string(multiple=True)      if conclusion:         review.add_property(type='conclusion', value=conclusion)      rate = content.xpath("descendant::figure[@class='score score-tech']/following-sibling::div/span/text()").string()      if rate:         review.grades.append(Grade(name='Rating', type='overall', value=float(rate), best=5.0))      for g in content.xpath("descendant::div[@class='grid-x mb15']/div[1]"):         name = g.xpath("descendant::text()").string(multiple=True)         rate = len(g.xpath("following-sibling::div/span[@class='cl cl-star-active']"))         if g.xpath("following-sibling::div/span[@class='cl cl-star-half-active']"):            rate += 0.5         if name and rate:            review.grades.append(Grade(name=name, value=float(rate), best=5.0))      if review.grades:         product.reviews.append(review)      pros = content.xpath("descendant::div[@class='fs16 txt-green']/div")      if pros:         for pro in pros:            line = pro.xpath("descendant::text()").string(multiple=True)            if line:               review.add_property(type='pros', value=line)      cons = content.xpath("descendant::div[@class='fs16 txt-red']/div")      if cons:         for con in cons:            line = con.xpath("descendant::text()").string(multiple=True)            if line:               review.add_property(type='cons', value=line)   if product.reviews:      session.emit(product)def run(context, session):##   session.sessionbreakers = [SessionBreak(max_requests=5000)]   session.queue(Request('https://www.clubic.com/tests-meilleurs-produits-high-tech/'), process_productlist, {})