from agent import *from models.products import *def run(context, session):    session.queue(Request('https://www.vg-reloaded.com/category/reviews/'), process_revlist, {})def process_revlist(data, context, session):    revs = data.xpath('//h3[contains(@class, "entry-title")]/a')    for rev in revs:        title = rev.xpath('text()').string()        url = rev.xpath('@href').string()        session.queue(Request(url), process_review, dict(title=title, url=url))    next_url = data.xpath('//a[@class="next page-numbers"]/@href').string()    if next_url:        session.queue(Request(next_url), process_revlist, {})def process_review(data, context, session):    product = Product()    product.name = context['title'].split(': ', 1   )[-1]    product.url = context['url']    product.ssid = data.xpath('//article[contains(@class, "type-post")]/@id').string().split('-')[-1]    platform = context['title'].split(' Review')[0].replace('X/S', 'X\\S')    product.category = 'Games|' + platform if platform else 'Games'    review = Review()    review.title = context['title']    review.url = product.url    review.ssid = product.ssid    review.type = "pro"    date = data.xpath('//meta[@property="article:published_time"]/@content').string()    if date:        review.date = date.split('T')[0]    author = data.xpath('//span[contains(@class, "meta-author")]/a').first()    if author:        name = author.xpath('text()').string()        url = author.xpath('@href').string()        if url and name:            ssid = url.strip('/').split('/')[-1]            review.authors.append(Person(name=name, profile_url=url, ssid=ssid))        elif name:            review.authors.append(Person(name=name, ssid=name))    grade = data.xpath('//h1[regexp:test(., "score:", "i")]//text()').string(multiple=True)    if not grade:        grade = data.xpath('//div[contains(@class, "entry-content")]/p[regexp:test(., "score:", "i")]/text()').string()    if grade:        grade = grade.split(':')[-1].strip()        review.grades.append(Grade(name='Score', type="overall", value=float(grade), best=10.0))    summary = data.xpath('//div[contains(@class, "entry-content")]/p[1]/strong//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type="summary", value=summary))    conclusion = data.xpath('//div[contains(@class, "entry-content")]/p[preceding-sibling::p[regexp:test(., "the verdict", "i")]]//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type="conclusion", value=conclusion))    excerpt = data.xpath('//div[contains(@class, "entry-content")]/p[not(regexp:test(., "the verdict", "i"))]//text()').string(multiple=True)    if excerpt:        if conclusion:            excerpt = excerpt.replace(conclusion, '').strip()        if summary:            excerpt = excerpt.replace(summary, '').strip()        product.reviews.append(review)        review.properties.append(ReviewProperty(type="excerpt", value=excerpt))    if product.reviews:        session.emit(product)