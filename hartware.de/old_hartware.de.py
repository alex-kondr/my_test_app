import stringfrom agent import *from models.products import *import redef process_category(data, context, session):    for categoryline in data.xpath("//ul[@class='category-list']/li/a"):        context['category_url'] = categoryline.xpath("@href").string()        context['category_name'] = categoryline.xpath("text()[string-length(normalize-space(.))>1]").string()        if context['category_name']:           session.queue(Request(context['category_url']), process_view_category, context)def process_view_category(data, context, session):    for view_categoryline in data.xpath("//div[@class='post-content']"):        context['product_name'] = view_categoryline.xpath("h2[@class='post-title']/a/text()[string-length(normalize-space(.))>0]").string()        context['product_url'] = view_categoryline.xpath("h2[@class='post-title']/a/@href").string()        context['date'] = view_categoryline.xpath(".//span[@class='date']/text()[string-length(normalize-space(.))>1]").string()        context['excerpt'] = view_categoryline.xpath("div[@class='entry excerpt']//text()[string-length(normalize-space(.))>1]").string()        if context['product_name'] and context['product_url'] and context['date'] and context['excerpt']:            session.queue(Request(context['product_url']), process_product, context)            #session.emit(Product(name = context['product_name'], url = context['product_url'], category = context['category_name']))    next = data.xpath("//a[@class='nextpostslink']/@href").string()    if next:        session.queue(Request(next), process_view_category, context)def process_product(data, context, session):     product = Product()    product.url = context['product_url']     product.ssid = context['product_url']    product.name = context['product_name']    product.category = context['category_name']    review = Review()    review.type = 'pro'    review.ssid = product.ssid    review.url = product.url    review.title = product.name    review.date =  context['date']    review.properties.append(ReviewProperty(type='excerpt', value = context['excerpt']))    for imageline in data.xpath("//div[@class='entry']//img"):        url_image = imageline.xpath("@src").string()        if url_image:            product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    username = data.xpath("//div[@class='post-byline']//a[@rel='author']/text()[string-length(normalize-space(.))>0]").string()    if username:        profile = data.xpath("//div[@class='post-byline']//a[@rel='author']/@href").string()        review.authors = Person(name = username, ssid = username, profile_url = profile) 		    last = data.xpath("//ul[@id='toc_review']/li/ul/li/a[text()[regexp:test(.,'Fazit')]]/@href").string()    if last:        session.do(Request(last), process_last, {'review': review})    product.reviews.append(review)    if product.ssid:       session.emit(product)def process_last(data, context, session):    review = context['review']     summary = data.xpath("//h2[text()[regexp:test(.,'Fazit')]]/following-sibling::p[text()[string-length(normalize-space(.))>70]]//text()[string-length(normalize-space(.))>0]").join("\n")    if summary:        review.properties.append(ReviewProperty(name='Fazit', type='summary', value=summary))          for prosline in data.xpath("//strong[text()[regexp:test(.,'Positiv')]]/following-sibling::text()[string-length(normalize-space(.))>1]"):        pros = prosline.string()        if pros:            review.properties.append(ReviewProperty(name='Positiv', type='pros', value=pros))              for consline in data.xpath("//strong[text()[regexp:test(.,'Negativ')]]/following-sibling::text()[string-length(normalize-space(.))>1]"):        cons = consline.string()        if cons:            review.properties.append(ReviewProperty(name='Negativ', type='cons', value=cons))          def run(context, session):    sb = SessionBreak()    sb.max_requests = 25000    session.sessionbreakers = [ sb ]    session.queue(Request('http://www.hartware.de/review.html'), process_category, {}) 