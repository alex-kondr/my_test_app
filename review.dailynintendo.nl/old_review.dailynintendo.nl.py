#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):   session.sessionbreakers=[SessionBreak(max_requests=10000)]   session.queue(Request('http://www.dailynintendo.nl/category/reviews/'), process_revlist, dict())def process_revlist(data, context, session):   for rev in data.xpath('//div[@class="read-title"]//a'):      url = rev.xpath("@href").string()      title = rev.xpath("descendant::text()").string(multiple=True)      if url and title:         name = re_search_once('[Rr]eview: (.*)', title)         if not(name):            name = title         bad_list2 = ['[REVIEW]','[Review]','WII REVIEW:','3DS Review:',         'Wii U Review:','Wii U','3DS','eShop','Eshop','eshop','Review:','review:']         for item in bad_list2:             if item in name:                 name = name.replace(item, '')         session.queue(Request(url), process_review, dict(url=url, title=title, name=name))   nexturl = data.xpath('//a[@class="next page-numbers"]//@href').string()   if nexturl:      session.queue(Request(nexturl), process_revlist, dict())def process_review(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    product.ssid = product.name + product.url    # Category    category = data.xpath('//li[@class="meta-category"]//a//text()').join('|')    if category:        product.category = category    else:        product.category = 'Videogames'    review = Review()    review.type = 'pro'    review.title = context['title']    review.url = context['url']    review.ssid = product.ssid    datetxt = data.xpath('//meta[@property="article:published_time"]//@content').string()    if datetxt:        if 'T' in datetxt: datetxt = datetxt.split('T')[0]        review.date = datetxt    else:        review.date='unknown'    author = data.xpath('//span[contains(@class,"posts-author")]//a//text()').string()    if author:        review.authors.append(Person(name=author, ssid=author))    summ_list = [    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Conclusie|Verdict)")]/following-sibling::p[not(strong)][not(br)][not(@class)]//text()',    '//p[regexp:test(descendant::text(),"(Conclusie|Verdict)")]/text()'    ]    summary = False    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    excerpt = data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        if summary: excerpt = excerpt.split(summary)[0]        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    p = False    for pro in data.xpath("descendant::span[regexp:test(text(),'Good')]/following-sibling::text()"):        line = pro.xpath("self::text()").string(multiple=True)        if line:            p = True            review.properties.append(ReviewProperty(type='pros', value=line))    if not p:        for pro in data.xpath('//div[contains(@class,"entry-content")]//p[br]'):            pros = pro.xpath('text()').string()            if pros and '+' in pros:                pros = pros.replace('+ ','')                review.properties.append(ReviewProperty(type='pros', value=pros))    c = False    for con in data.xpath(" descendant::span[regexp:test(text(),'Bad')]/following-sibling::text()"):        line = con.xpath("self::text()").string(multiple=True)        if line:            c = True            review.properties.append(ReviewProperty(type='cons', value=line))    if not c:        for con in data.xpath('//div[contains(@class,"entry-content")]//p[br]'):            cons = con.xpath('text()').string()            if cons and '–' in cons:                cons = cons.replace('– ','')                review.properties.append(ReviewProperty(type='cons', value=cons))    g=False    ratetxt = data.xpath("descendant::div[@class='rating-box']/span[1]//text()").string(multiple=True)    if not(ratetxt):        ratetxt = data.xpath('descendant::node()[regexp:test(name(),"h\d")][contains(descendant::text(),"Eindcijfer")]//text()').string(multiple=True)    if not(ratetxt):        ratetxt = data.xpath('descendant::node()[regexp:test(name(),"h\d")][contains(descendant::text(),"Cijfer")]//text()').string(multiple=True)    if ratetxt:        rate = re_search_once("(\d.?\d?)", ratetxt)        if rate:            if '3D' in rate and ':':                rate = ratetxt.split(':')[1]                rate = re_search_once("(\d.?\d?)", rate)            rate = rate.replace(',', '.')            review.grades.append(Grade(type='overall', name='Rating', value=float(rate), best=10.0))            g=True    if not g:        for gradetxt in data.xpath("//p[regexp:test(normalize-space(.),' \d.?\d?$')]//text()").strings():            title = re_search_once('^(.*) \d', gradetxt)            value = re_search_once('(\d.?\d?)$', gradetxt)            if title and value and len(title) < 12:                value = value.replace(',', '.')                review.grades.append(Grade(name=title.strip(), value=float(value), best=10.0))    if review.grades:        product.reviews.append(review)    if product.reviews:        session.emit(product)