from agent import *from models.products import *def strip_namespace(data):    tmp = data.content_file + ".tmp"    out = file(tmp, "w")    for line in file(data.content_file):        line = line.replace('<ns0', '<')        line = line.replace('ns0:', '')        line = line.replace(' xmlns', ' abcde=')        out.write(line + "\n")    out.close()    os.rename(tmp, data.content_file)def run(context, session):    session.browser.use_new_parser = True    session.queue(Request('https://www.moviefone.com/movie-reviews/'), process_revlist, {})def process_revlist(data, context, session):    strip_namespace(data)    revs = data.xpath('//div[@class="mf-movie-review"]')    for rev in revs:        title = rev.xpath('.//h2/a/text()').string()        url = rev.xpath('.//h2/a/@href').string()        grade = rev.xpath('.//span[@class="movie-score"]/text()').string()        if '/main/' not in url:            # No review            session.queue(Request(url), process_review, dict(title=title, url=url, grade=grade))    next_url = data.xpath('//a[@class="pagination-next"]/@href').string()    if next_url:        session.queue(Request(next_url), process_revlist, {})def process_review(data, context, session):    strip_namespace(data)    product = Product()    product.name = context['title'].split('Movie Review')[0].strip(" '‘’")    product.url = data.xpath('//a[@class="movie-info-showtimes"]/@href').string() or context['url']    product.category = 'Movie'    product.ssid = data.xpath('//article[contains(@id, "article-")]/@id').string().split('-')[-1]    review = Review()    review.title = data.xpath('//h1[@class="article-title"]/text()').string()    review.url = context['url']    review.ssid = product.ssid    review.type = 'pro'    review.date = data.xpath('//a[@class="articlehead-date"]/text()').string()    author = data.xpath('//a[@class="article-author-name"]').first()    if author:        author_name = author.xpath('text()').string()        author_ssid = author.xpath('@href').string().split('/')[-2]        review.authors.append(Person(name=author_name, ssid=author_ssid))    grade_overall = context.get('grade')    if grade_overall:        review.grades.append(Grade(type='overall', value=float(grade_overall), best=100.0))    summary = data.xpath('//p[@class="article-tagline"]/text()').string(multiple=True)    if summary:        review.add_property(type="summary", value=summary)    conclusion = ''    conc_lines = data.xpath('//h2[regexp:test(., "final thoughts", "i")]/following-sibling::*')    for line in conc_lines:        if line.xpath('self::div[contains(@class, "asset")] or self::h2'):            break        text = line.xpath('self::p[not(contains(., " stars") and contains(., "out of "))]//text()').string(multiple=True)        if text:            conclusion += text    if not conclusion:        conclusion = data.xpath('//p[strong[contains(., "Bottom line")]]//text()').string()    if conclusion:        review.add_property(type="conclusion", value=conclusion.strip(': '))    excerpt = data.xpath('//div[@class="post-content"]/p[not(preceding-sibling::h2[regexp:test(., "final thoughts", "i")])][not(self::p[strong[contains(., "Bottom line")]])][not(regexp:test(., " stars", "i") and regexp:test(., " out o", "i"))][not(preceding-sibling::p[strong[contains(., "Bottom line")]])]//text()').string(multiple=True)    if excerpt:        review.add_property(type="excerpt", value=excerpt)        product.reviews.append(review)        session.emit(product)