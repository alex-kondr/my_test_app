from agent import *from models.products import *import simplejsonfrom datetime import datetimeXCAT = ['Our Services', 'Sales & Deals', 'Fun Reads']def strip_namespace(data):    tmp = data.content_file + ".tmp"    out = file(tmp, "w")    for line in file(data.content_file):        line = line.replace('<ns0', '<')        line = line.replace('ns0:', '')        line = line.replace(' xmlns', ' abcde=')        out.write(line + "\n")    out.close()    os.rename(tmp, data.content_file)def run(context, session):    session.browser.use_new_parser = True    session.sessionbreakers = [SessionBreak(max_requests=3000)]    session.queue(Request('https://www.worldwidestereo.com/', max_age=0), process_frontpage, dict())def process_frontpage(data, context, session):    strip_namespace(data)    cats1 = data.xpath('//li[@class="menu-drawer__parent"]')    for cat1 in cats1:        name1 = cat1.xpath('details/summary/span[contains(@class, "item-title")]/text()').string()        if name1:            cats2 = cat1.xpath('.//ul[contains(@class, "menu--second-level")]/li/details')            for cat2 in cats2:                name2 = cat2.xpath('summary/span[contains(@class, "item-title")]/text()').string()                cats3 = cat2.xpath('.//li[regexp:test(., "shop by category", "i")]/following-sibling::ul[1]/li/a')                if not cats3:                    cats3 = cat2.xpath('.//div[contains(@class, "submenu__row-linklist")][li[regexp:test(., "by type", "i")]]//a')                if not cats3:                    cat_id = cat2.xpath('.//a[contains(@class, "view-all")]/@href').string().split('/')[-1]                    url = 'https://5949mp.a.searchspring.io/api/search/search.json?&domain=https%3A%2F%2Fwww.worldwidestereo.com%2Fcollections%2F{}&siteId=5949mp&resultsPerPage=500&resultsFormat=native&page=1'.format(cat_id)                    session.queue(Request(url), process_prodlist, dict(cat=name1+'|'+name2))                for cat3 in cats3:                    name3 = cat3.xpath('span/text()').string()                    cat_id = cat3.xpath('@href').string().split('/')[-1]                    url = 'https://5949mp.a.searchspring.io/api/search/search.json?&domain=https%3A%2F%2Fwww.worldwidestereo.com%2Fcollections%2F{}&siteId=5949mp&resultsPerPage=500&resultsFormat=native&page=1'.format(cat_id)                    session.queue(Request(url), process_prodlist, dict(cat=name1+'|'+name2+'|'+name3))def process_prodlist(data, context, session):    prods_json = simplejson.loads(data.content)    prods = prods_json.get('results')    for prod in prods:        name = prod.get('name')        brand = prod.get('brand')        url = 'https://www.worldwidestereo.com' + prod.get('url')        ssid = str(prod['ss_id'])        sku = str(prod.get('sku'))        revs_cnt = prod.get('ratingCount')        if revs_cnt and int(revs_cnt) > 0:            session.queue(Request(url), process_product, dict(context, name=name, url=url, brand=brand, ssid=ssid, sku=sku))    prods_cnt = prods_json.get('pagination', {}).get('totalResults')    if prods_cnt:        offset = context.get('offset', 0) + 500        if offset < prods_cnt:            next_page = context.get("page", 1) + 1            next_url = data.response_url + '&page=' + str(next_page)            session.queue(Request(next_url), process_prodlist, dict(context, page=next_page, offset=offset))def process_product(data, context, session):    strip_namespace(data)    product = Product()    product.name = context["name"]    product.manufacturer = context['brand']    product.category = context['cat']    product.url = context['url']    product.ssid = context["ssid"]    product.sku = context["sku"]    mpn = data.xpath('//span[@class="variant-model"]/text()').string()    if mpn:        mpn = mpn.split()[-1]        product.add_property(type='id.manufacturer', value=mpn)    ean = data.xpath('//span[@class="variant-barcode"]/text()').string()    if ean:        ean = ean.split()[-1]        product.add_property(type='id.ean', value=ean)    revs_url = 'https://cdn-ws.turnto.com/v5/sitedata/Pc3PJ9gWzHTBZetsite/{}/d/review/en_US/0/10000/%7B%7D/true/false/?'.format(product.sku)    session.do(Request(revs_url), process_reviews, dict(context, product=product))    if product.reviews:        session.emit(product)def process_reviews(data, context, session):    revs_json = simplejson.loads(data.content)    product = context['product']    revs = revs_json.get('reviews', [])    for rev in revs:        review = Review()        review.title = rev.get('title')        review.url = product.url        review.type = 'user'        review.ssid = str(rev['id'])        date = rev.get('dateCreatedMillis')        if date:            date = int(date) / 1000            review.date = datetime.utcfromtimestamp(date).strftime("%Y-%m-%d")        author = rev.get('user')        if author:            author_name = author.get('nickName')            if not author_name:                author_name = author.get('firstName', '') + ' ' + author.get('lastName', '')            author_ssid = author.get('id')            if author_name.strip() and author_ssid:                review.authors.append(Person(name=author_name, ssid=str(author_ssid)))            elif author_name.strip():                review.authors.append(Person(name=author_name, ssid=author_name))        is_verified = rev.get('purchaseDateFormatted')        if is_verified:            review.add_property(type='is_verified_buyer', value=True)        is_recommended = rev.get('recommended')        if is_recommended:            review.properties.append(ReviewProperty(value=True, type='is_recommended'))        hlp_yes = rev.get('upVotes')        if hlp_yes:            review.add_property(type='helpful_votes', value=int(hlp_yes))        hlp_no = rev.get('downVotes')        if hlp_no:            review.add_property(type='helpful_votes', value=int(hlp_no))        grade_overall = rev.get('rating')        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        excerpt = rev.get('text')        if excerpt:            excerpt = excerpt.replace('<br />', '').encode("ascii", errors="ignore").strip()            if excerpt:                review.add_property(type='excerpt', value=excerpt)                product.reviews.append(review)