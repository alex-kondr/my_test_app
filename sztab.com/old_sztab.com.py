from agent import *from models.products import *def run(context, session):    session.queue(Request("http://www.sztab.com/recenzje-1.html"), process_revlist, dict())def process_revlist(data, context, session):    revs = data.xpath("//span[@class='al2']")    for rev in revs:        name = rev.xpath("a/text()").string()        url = rev.xpath("a/@href").string()        date = rev.xpath("preceding-sibling::span[@class='al1'][1]/text()").string()        session.queue(Request(url), process_review, dict(url=url, name=name, date=date))    page = context.get('page', 1) + 1    next_url = data.xpath("//div[@id='links']/a[contains(@href, 'recenzje-" + str(page) + ".html')]/@href").string()    if next_url:        session.queue(Request(next_url), process_revlist, dict(page=page))def process_review(data, context, session):    product = context.get("product", Product())    review = context.get("review", Review())    page = context.get("page", 1)    if page == 1:        product.name = context["name"]        product.url = context['url']        product.ssid = context['url'].split('/')[-1].split(".html")[0].split(',')[-1]        product.category = 'Games'        product.manufacturer = data.xpath("//div[@id='game_info']/text()[preceding-sibling::b[contains(., 'Producent')]]").string()        review.type = "pro"        review.title = product.name        review.url = product.url        review.ssid = product.ssid        if not context["date"].startswith('00'):            review.date = context["date"]        author = data.xpath("//div[@id='game_info']/a").first()        if author:            name = author.xpath("text()").string()            url = author.xpath("@href").string()            review.authors.append(Person(name=name, ssid=name, profile_url=url))    next_page = data.xpath("//a[contains(text(), 'nastÄ™pna >>')]/@href").string()    multipage = context.get("multipage", bool(next_page))    summary = data.xpath("//div[@id='game_teaser']/text()").string()    if summary:        review.add_property(type="summary", value=summary)    excerpt = data.xpath("//div[@id='game_description']//text()[parent::div[@id='game_description'] or parent::b[not(contains(., 'Autor:'))] or parent::p[@align='justify']] | //*[self::p or self::div][@align='justify' or @align='JUSTIFY'][not(parent::div[@id='game_description'])]//text()[not(parent::*[contains(local-name(), 'h')])]")    if not review.grades:        grade = data.xpath("//span[@itemprop='rating']/text()[not(contains(., 'bd'))]").string()        if grade and not grade == '%':            grade = int(grade.split('%')[0])            review.grades.append(Grade(name='OCENA REDAKCJI', value=grade, best=100))    overall = data.xpath("//b[regexp:test(., 'ocena:', 'i')]/following-sibling::text()").string()    if not overall:        overall = data.xpath("//p[regexp:test(., 'ocena:', 'i')]/text()").string()    if not overall:        overall = data.xpath("//div[@id='content']/text()[regexp:test(., 'ocena:', 'i')]").string()    if overall:        overall = overall.split(':')[-1].strip().replace('+', '').replace('(', '').replace(')', '').replace(',', '.')        best = float(overall.split('/')[-1].strip())        value = float(overall.split('/')[0].strip())        review.grades.append(Grade(type="overall", value=value, best=best))    if multipage:        if page == 1 and not summary:            summary = ""            for e in excerpt:                e = e.string()                if not e or e.startswith('\n'):                    if summary:                        break                    else:                        continue                else:                    summary += e.strip()            if summary:                review.add_property(type="summary", value=summary)        page_url = context.get("page_url", context["url"])        review.add_property(type='pages', value=dict(url=page_url, title="Page " + str(page)))        if next_page:            session.do(Request(next_page), process_review, dict(context, product=product, review=review, page=page+1, page_url=next_page, multipage=True))        else:            conclusion = excerpt.string(multiple=True)            if conclusion:                review.add_property(type="conclusion", value=conclusion)                product.reviews.append(review)                session.emit(product)        return    if excerpt:        excerpt = excerpt.string(multiple=True)        review.add_property(type="excerpt", value=excerpt)        product.reviews.append(review)        session.emit(product)