# -*- coding: utf8 -*-from agent import *from models.products import *debug = Trueimport time, randomdef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.mako.co.il/Tagit/%D7%A1%D7%A7%D7%99%D7%A8%D7%94', use="curl"), process_first_page, {})def process_first_page(data, context, session):    num_pages = data.xpath('//input[@name="max"]//@value').string()    if num_pages:        for x in xrange(1,int(num_pages)+1):            uri = 'http://www.mako.co.il/Tagit/%D7%A1%D7%A7%D7%99%D7%A8%D7%94?page='+str(x)            session.queue(Request(uri, use="curl"),process_category,dict())def process_category(data, context, session):    for link in data.xpath('//div[@class="line-clamp"]//h5//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name and 'news' not in url:            session.queue(Request(url, use="curl"),process_product,dict(context,url=url,name=name))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    # Category    category = data.xpath('//div[@class="breadcrumbs"]//ul/li[position()>1]//a//text()|//ul[@class="tags"]//li//a//text()').join('|')    if category:        product.category=category    else:        product.category='unknown'    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]//@content').string()    if pub_date:        review.date=pub_date[:-14]    else:        review.date='unknown'    # Author    author=data.xpath('//span[@itemprop="author"]//@content').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Summary    summ_list = [    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(סיכום|השורה התחתונה:)")]/following-sibling::p//text()',    '//p[regexp:test(descendant::text(),"(סיכום|השורה התחתונה:)")]//text()[string-length(normalize-space(.))>10]',    '//p[regexp:test(descendant::text(),"(סיכום|השורה התחתונה)")]/following-sibling::p//text()']    summary = False    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    # Excerpt    exce_list = [    '//div[@class="article"]//p[not(descendant::script)]//text()',    '//meta[@property="og:description"]//@content']    for item in exce_list:        excerpt=data.xpath(item).string(multiple=True)        if excerpt:            if summary: excerpt = ''.join(excerpt.split(summary))            review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:135]+'...'))            break    product.reviews.append(review)    if product.reviews:        session.emit(product)    time.sleep(random.randint(2,6))