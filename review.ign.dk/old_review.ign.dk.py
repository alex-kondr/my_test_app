#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://dk.ign.com/article/review', use="curl"), process_productlist, {})def process_productlist(data, context, session):    for link in data.xpath('//div[@class="m"]//node()[regexp:test(name(),"h\d")]//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name:#and not session.seen(url):            bad_list2 = ['- Anmeldelse','– Anmeldelse','Anmeldelse –','','']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name))    # Next page    next=data.xpath('//link[@rel="next"]//@href').string()    if next:        session.queue(Request(next, use="curl"), process_productlist, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    # Category    category = data.xpath('//div[@class="objectcard-object-platforms"]//a//text()').join('|')    if category:        product.category='Games|' + category    else:        product.category='Games'    review=Review()    review.product=product.name    review.url=product.url    review.ssid=product.ssid + ' review'    review.type='pro'    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]//@content').string()    if pub_date:        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//span[@class="reviewer hcard"]//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    overall=data.xpath('//span[@class="score"]//span//text()').string()    if overall:        review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=10))    # Conclusion    conclusion = data.xpath('//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Dommen)")]/following-sibling::div[text()][1]//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    # Excerpt    excerpt=data.xpath('//node()[@id="id_deck"]//text()').string(multiple=True) or data.xpath('//div[@class="articleBody"]//p//text()').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:135]+'...'))    # Pros    for pro in data.xpath('//li[@class="pros-item"]'):        pros = pro.xpath('descendant::text()').string()        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for con in data.xpath('//li[@class="cons-item"]'):        cons  = con.xpath('descendant::text()').string()        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    product.reviews.append(review)    if product.reviews:        session.emit(product)