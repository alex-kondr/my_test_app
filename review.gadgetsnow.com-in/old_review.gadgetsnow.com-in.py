from agent import *from models.products import *import simplejsonimport redef run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=3000)]    session.queue(Request("https://www.gadgetsnow.com/reviews", use="curl", force_charset='utf-8'), process_revlist, dict())def process_revlist(data, context, session):    revs = data.xpath('//h1[contains(., "Reviews")]/following-sibling::div/div/div')    for rev in revs:        url = rev.xpath("a/@href").string()        grade_overall = rev.xpath('.//span[contains(., "Rating")]/span/text()').string()        if url and 'https://' in url:            # https://www.gadgetsnow.com/reviews/37?frmapp=yes â€” the 4th review doesn't have a link            session.queue(Request(url, use="curl", force_charset='utf-8', max_age=0), process_review, dict(url=url, grade_overall=grade_overall))    next_url = data.xpath('//a[contains(., "NEXT")]/@href').string()    if next_url:        session.queue(Request(next_url, use="curl", force_charset='utf-8', max_age=0), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.url = context["url"]    product.category = "Tech"    product.ssid = context['url'].split('/')[-1].split('.')[0]    title = data.xpath('//li/span[@itemprop="name"]/text()').string()    if not title:        title = data.xpath('//meta[@property="og:title"]/@content').string()    product.name = title.split(" review: ")[0].split(" Review: ")[0].split("Review: ")[-1].split(' review')[0].split(' Review')[0]    info = data.xpath("//script[contains(text(), 'window.App=')]/text()").string()    if info:        info = info.replace('undefined', 'null')        info = simplejson.loads(info.split("window.App=")[-1])        article_data = info.get("state", {}).get("articleShow")        if article_data:            # https://www.gadgetsnow.com/slideshows/samsungs-most-affordable-5g-smartphone-7-point-quick-review-of-samsung-galaxy-m13-5g/photolist/93041183.cms            article_data = article_data.get("list", [{}])[0].get("articleData", {}).get("data")            name = article_data.get('primaryGadget')            if name:                product.name = ' '.join(name.split('-'))            product.manufacturer = article_data.get("gadgetsBrand")    review = Review()    review.title = title    review.url = context["url"]    review.type = "pro"    review.ssid = product.ssid    date = data.xpath('//meta[@itemprop="dateModified"]/@content').string()    if not date:        date = data.xpath('//meta[@itemprop="datePublished"]/@content').string()    if not date:        date = data.xpath('//span[@id="dvalue"]/text()').string()    if date:        review.date = date.split('T')[0].split('|')[0]    author = data.xpath('//div[@id="{}"]//a'.format(product.ssid)).first()    if author:        author_name = author.xpath('text()').string()        author_url = author.xpath('@href').string()        if author_name and author_url:            author_ssid = author_url.split('-')[-1].split('.')[0]            review.authors.append(Person(name=author_name, ssid=author_ssid, profile_url=author_url))        elif author_name:            review.authors.append(Person(name=author_name, ssid=author_name))    grade_overall = context.get("grade_overall")    if grade_overall:        review.grades.append(Grade(type="overall", value=float(grade_overall), best=5.0))    pros = data.xpath('//h4[contains(., "Top Features")]/following-sibling::div//p/text()').strings()    if not pros:        pros = data.xpath('//h4[contains(., "Pros")]/following-sibling::ul/li/text()').strings()    for pro in pros:        review.add_property(type="pros", value=pro.strip())    cons = data.xpath('//h4[contains(., "Cons")]/following-sibling::ul/li/text()').strings()    for con in cons:        review.add_property(type="cons", value=con.strip())    conclusion = data.xpath('//div[h3[regexp:test(., "verdict", "i") or regexp:test(., "final thoughts", "i") or regexp:test(., "what we think", "i")]]//span/text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//div[h3[contains(., "Who should buy it?")]]/following-sibling::p[1]//text()[not(contains(., "-- "))]').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//p[contains(., "Verdict")]/following-sibling::p//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//span[b[contains(., "Verdict")]]/following-sibling::span/text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//span[strong[contains(., "Conclusion")]]/following-sibling::span/text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//div[strong[contains(., "Verdict")]]/following-sibling::span/text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//div[strong[regexp:test(., "should you buy it?", "i")]]/following-sibling::span//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//span[regexp:test(., "verdict", "i")]/following-sibling::span/text()').string(multiple=True)    if conclusion:        review.add_property(type="conclusion", value=conclusion)    excerpt = data.xpath('//div[@data-articlebody]//span[not(preceding::div[span[text()="Twitter" or text()="Linkedin" or text()="Facebook"]]/following-sibling::h5[regexp:test(., "top comment", "i")])][not(ancestor::div[div/i[contains(., "Close")]])][not(preceding::span/b[regexp:test(., "verdict", "i")])][not(preceding::h3[regexp:test(., "verdict", "i") or regexp:test(., "verdict", "i") or regexp:test(., "final thoughts", "i")])][not(preceding::h3[regexp:test(., "who should buy it?", "i") or regexp:test(., "what we think", "i")])][not(preceding::span[strong[regexp:test(., "conclusion", "i")]])][not(preceding::p[regexp:test(., "verdict", "i")])][not(preceding::div[strong[regexp:test(., "verdict", "i") or regexp:test(., "should you buy it?", "i")]])][not(text()="Critic" or text()="Facebook" or text()="Twitter" or text()="Linkedin" or text()="Verdict")]/text()[not(contains(., "Click Here For"))][not(preceding::span[regexp:test(., "verdict", "i")])]').string(multiple=True)    if not excerpt:        excerpt = data.xpath('//div[contains(@id, "content")]//p/span[not(preceding::h3[contains(., "Verdict")])][not(preceding::h3[contains(., "Who should buy it?")])][not(text()="Critic")]/text()[not(contains(., "-- ") or contains(., "Click Here For"))]').string(multiple=True)    if excerpt:        review.add_property(type="excerpt", value=excerpt)        product.reviews.append(review)        session.emit(product)