from agent import *from models.products import *def run(context, session):    url = 'https://www.coolgadget.de/schutzhuelle-fuer-apple-ipad-air-3-huelle-hybrid-outdoor-back-case-cover-schwarz.html'    session.queue(Request(url), process_product, dict(url=url))def process_product(data, context, session):    product = Product()    product.name = data.xpath('//h1[@itemprop="name"]/text()').string()    product.url = context['url']    product.category = 'Apple|iPad ZubehÃ¶r|iPad Air (3. Generation 2019)'    product.manufacturer = 'Apple'    product.ssid = data.xpath('//input[@id="ArticleId"]/@value').string()    product.sku = data.xpath('//span[@itemprop="sku"]/text()').string()    ean = data.xpath('//meta[contains(@itemprop, "gtin")]/@content').string()    if ean:        product.properties.append(ProductProperty(type='id.ean', value=ean))    mpn = data.xpath('//meta[@itemprop="mpn"]/@content').string()    if mpn:        product.properties.append(ProductProperty(type='id.manufacturer', value=mpn))    revs_cnt = data.xpath('//meta[@itemprop="ratingCount"]/@content').string()    if revs_cnt and int(revs_cnt) > 0:        revs_url = data.xpath('//a[@id="artd-rating"]/@href').string()        session.queue(Request(revs_url), process_reviews, dict(product=product, revs_url=revs_url))def process_reviews(data, context, session):    product = context['product']    revs = data.xpath('//div[@data-review-id]')    for rev in revs:        review = Review()        review.title = rev.xpath('.//h4[@data-id="AR.ItemTitle"]/text()').string()        review.ssid = rev.xpath('@data-review-id').string()        review.type = 'user'        review.url = product.url        date = rev.xpath('.//div[@data-id="AR.ItemAuthor"]/text()').string(multiple=True)        if date:            review.date = date.split(' am ')[-1].split()[0]        author = rev.xpath('.//div[@data-id="AR.ItemAuthor"]/text()').string(multiple=True)        if author:            author = author.split(' verfasst am')[0].split('von ', 1)[-1]            review.authors.append(Person(name=author, ssid=author))        is_verified = rev.xpath('.//span[@data-id="AR.VerifiedOrder"]')        if is_verified:            review.add_property(type='is_verified_buyer', value=True)        hlp = rev.xpath('.//small[@data-id="AR.ItemStatusText"]/text()').string()        if hlp:            hlp_yes = hlp.split(' von ')[0].strip()            review.add_property(type='helpful_votes', value=int(hlp_yes))            hlp_total = hlp.split(' von ')[-1].split()[0].strip()            review.add_property(type='not_helpful_votes', value=int(hlp_total) - int(hlp_yes))        grade_overall = data.xpath('.//div[@data-id="AR.ItemShortRating"]/text()').string()        if grade_overall:            review.grades.append(Grade(type="overall", value=grade_overall, best=5.0))        excerpt = rev.xpath('div[@data-id="AR.ItemComment"]/text()').string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type="excerpt", value=excerpt))            product.reviews.append(review)    if product.reviews:        session.emit(product)