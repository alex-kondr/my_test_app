#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *debug = Truedef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://www.mobiflip.de/thema/testberichte/'), process_productlist, {})def process_productlist(data, context, session):    for link in data.xpath('//li[@class="infinite-post"]//node()[regexp:test(name(),"h\d")]//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name and 'mobiflip.de' in url:#and not session.seen(url):            bad_list = [' im Test: ',' im Langzeittest ',' Testbericht: ',            ' im Test –',' Test: ']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            bad_list2 = ['Der neue','im Test','Flaggschiff-Jahr 2018:','Neues Video-Equipment:',            ' Testbericht','Test','Mein Fazit zu','„','“']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url),process_product,dict(context,url=url,name=name))    # Next page    next=data.xpath('//a[@class="inf-more-but"]//@href').string()    if next:        session.queue(Request(next), process_productlist, dict(context))def process_product(data, context, session):    product=Product()    product.url=context['url']    product.category=data.xpath('//a[@rel="category tag"]//text()').join('|') or 'unknown'    product.name=context['name']    # Ssid    ssid = data.xpath('//article[contains(@class,"post-")]//@class').string()    if ssid:        product.ssid = ssid.split('post-')[1].split(' ')[0]    else:        product.ssid = product.name + product.url    review=Review()    review.product=product.name    review.url=product.url    review.ssid=product.ssid + ' review'    review.type='pro'    # Title    title = data.xpath('//meta[@property="og:title"]//@content').string()    if title:        review.title = title    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]//@content').string()    if pub_date:        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//a[@rel="author"]//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    overall=data.xpath('//span[@class="rating"]//text()').string()    if overall:        review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=5))    # Conclusion    conclusion = data.xpath('//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Fazit|fazit)")]/following-sibling::p//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    # Excerpt    exce_list = [    '//meta[@property="og:description"]//@content',    '//div[contains(@class,"entry-content")]//p[not(@class)]//text()']    for item in exce_list:        excerpt=data.xpath(item).string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:111]+'...'))            break    product.reviews.append(review)    if product.reviews:        session.emit(product)