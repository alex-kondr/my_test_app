#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):    session.queue(Request('http://www.robotreviews.com/reviews'), process_revlist, dict())def process_revlist(data, context, session):    prods = data.xpath("//h3/a")    for prod in prods:        name = prod.xpath(".//text()").string()        url = prod.xpath("@href").string()        #session.queue(Request(url), process_review, dict(name=name, url=url))        session.queue(Request(url), process_post, dict(name=name, url=url))    nexturl = data.xpath("//li[@class='pager-next']/a/@href").string()    if nexturl:        session.queue(Request(nexturl), process_revlist, dict())def process_review(data, context, session):    return    product = Product()    product.name = data.xpath("//h3[@class='title']//text()").string()    product.ssid = context['url'].split('/')[-1].replace('.php', '')    product.category = context['cat']    product.url = context['url']    man_sku = data.xpath("//div[@class='sku-brand-wrap col-lg-7 col-sm-7']/h4//text()")    product.manufacturer = man_sku[0].string()    product.sku = man_sku[1].string().replace('SKU:', '')    reviews_url = 'https://www.shopperapproved.com/product/21959/' + product.sku + '.js'    session.do(Request(reviews_url, use='curl'), process_reviews_page, dict(product=product))    if product.reviews:        session.emit(product)def process_reviews_page(data, context, session):    htmlstr = ' '.join(data.content)    print(htmlstr)    print('check1')    #if not 'var tempreviews = ' in htmlstr:        #return # No reviews    print('check2')    revs_str = htmlstr.split('var tempreviews = ')[1].split(";")[0]    revs = simplejson.loads(revs_str)    for rev in revs:        print('check3')        review = Review()        review.title = rev['heading']        review.date = rev['date']        review.ssid = rev['id']        excerpt = rev['comments']        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))        author = rev['name']        review.authors.append(Person(name=author, ssid=author))        grade = rev['rating']        review.grades.append(Grade(type='overall', value=float(grade), best=5.0))def process_post(data, context, session):    review = Review()    review.title = data.xpath('//h2[@class="title"]/text()').string()    review.ssid = review.title    review.type = "pro"    review.url = context['url']    revDate = data.xpath('/descendant::span[@class="submitted"][1]/text()').string(multiple=True).split(",",1)[-1].rsplit("-")[0]    if revDate:        review.date = revDate    author = data.xpath('/descendant::span[@class="submitted"][1]/text()').string(multiple=True) or ""    author = re_search_once(r"Submitted by (.*?) on", author)    if author:        review.authors.append(Person(name=author, ssid=author))    concl = data.xpath('/descendant::text()[regexp:test(normalize-space(.),"Overall.")][1]/following::text()[string-length(normalize-space(.))>150][1]').string(multiple=True)    if concl:        review.properties.append(ReviewProperty(type="conclusion", value=concl))    excerpt = data.xpath('/descendant::div[@id="content"][descendant::h2][1]/descendant::text()[string-length(normalize-space(.))>150 and not(regexp:test(., "^Hello"))][1]').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type="excerpt", value=excerpt))    pName = review.title.split(" Review")[0]    pr = Product(name=pName, ssid=review.ssid, url=review.url)    pr.category = 'Robots'    pr.reviews.append(review)    session.emit(pr)