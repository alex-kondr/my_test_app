from agent import *from models.products import *import redebug = True     CATEGORIES = []def run(context, session):    session.browser.agent = 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)'##   session.queue(Request('http://www.nexgam.de/datenbank.html'), process_categories, {})   session.queue(Request('http://www.nexgam.de/ajax.php?list=Reviews&pcsg_rf=ajax_tags_search&project=nexgam&sheet=1&tags=[%22Reviews%22]'), process_productlist, {})def process_categories(data, context, session):   for cat in data.xpath("//div[@class='tag-category consoles']//input"):      category = cat.xpath("@value").string()      if category:         CATEGORIES.append(category)def process_productlist(data, context, session):   cnt = 0   for rev in data.xpath("//h2//a"):      name = rev.xpath("descendant::text()").string(multiple=True)      url = rev.xpath("@href").string()      if url and name:         fname = re_search_once('^([^\"]*)\"', name)         if not(fname):            fname = name         fixurl = url.replace('%5C', '').replace('%22','').replace('www.nexgam.de//','www.nexgam.de/')         fixurl = fixurl.replace('u00fc', 'ü').replace('u00e9', 'é')         cnt += 1         session.queue(Request(fixurl), process_product, dict(name=fname, url=fixurl))   if context.get('url', None):      page = int(get_url_parameter(context['url'], 'sheet'))   else:      page = 1   if cnt:      nexturl = "http://www.nexgam.de/ajax.php?list=Reviews&pcsg_rf=ajax_tags_search&project=nexgam&sheet=%s"%(page+1)      nexturl = nexturl + '&tags=[%22Reviews%22]'      session.queue(Request(nexturl), process_productlist, dict(url=nexturl))def process_product(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.category = data.xpath("//img[regexp:test(@src, 'consoles')]/@alt").join('|') or 'unknown'   product.ssid = re_search_once('id:(\d+)', data.xpath("//script[regexp:test(text(),'id:\d+')]/text()").string())   content = data.xpath("//div[@class='content-inner-container']").first()   if content:      review = Review()      review.title = product.name      review.url = product.url      review.type = 'pro'      review.ssid = product.ssid      review.date = content.xpath("descendant::time/@datetime").string()      author = content.xpath("descendant::div[@class='user-comment']/img/@alt").string()      if author:         review.authors.append(Person(name=author, ssid=author))      score = data.xpath("//span[@itemprop='value']/text()").string(multiple=True)      if score:         fscore = re_search_once('(\d+\.?\d?)', score)         if fscore:            product.reviews.append(review)            review.grades.append(Grade(name='Wertung', type='overall', value=float(score), best=10.0, worst=0))      summary = content.xpath("p[preceding-sibling::section[1][@itemprop='description']]//text()").string(multiple=True)      if not(summary):         summary = content.xpath("node()[preceding-sibling::section[1][@itemprop='description']]/descendant-or-self::text()").string(multiple=True)      if summary:         review.properties.append(ReviewProperty(type='summary', value=summary))      excerpt = content.xpath("p[preceding-sibling::section[1][@itemprop='articleBody']]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("node()[preceding-sibling::section[1][@itemprop='articleBody']]/descendant-or-self::text()").string(multiple=True)      if excerpt:         review.properties.append(ReviewProperty(type='excerpt', value=excerpt))      conclusion = content.xpath("descendant::div[@class='user-comment']/p//text()").string(multiple=True)      if not(conclusion):         conclusion = content.xpath("descendant::div[@class='user-comment']/node()/descendant-or-self::text()").string(multiple=True)      if conclusion:         review.properties.append(ReviewProperty(type='conclusion', value=conclusion))         for pro in data.xpath("//div[regexp:test(@class,'pos-neg-box$')]//ul[@class='positiv']/li"):         text = pro.xpath("descendant::text()").string(multiple=True)         if text:            review.properties.append(ReviewProperty(type='pros', name='Positiv', value=text))      for con in data.xpath("//div[regexp:test(@class,'pos-neg-box$')]//ul[@class='negativ']/li"):         text = con.xpath("descendant::text()").string(multiple=True)         if text:            review.properties.append(ReviewProperty(type='cons', name='Negativ', value=text))   if product.reviews:      session.emit(product)