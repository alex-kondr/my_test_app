#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import randomimport agentdef request(url, formdata):    r = agent.Request(url, data=formdata, method='POST')    r.add_header("Content-Type", "application/x-www-form-urlencoded")    return rRequestNext = requestdef run(context, session):   session.sessionbreakers = [SessionBreak(max_requests=10000)]   session.queue(Request('http://hintaseuranta.fi/', force_charset='utf-8'), process_frontpage, dict())def process_frontpage(data, context, session):   for cat in data.xpath("//div[@id='footer']//ul[@class='unstyled']/li/a[regexp:test(@href,'hintaseuranta.fi')]"):      category1 = cat.xpath("preceding::strong[1]//text()").string(multiple=True)      category2 = cat.xpath("descendant::text()").string(multiple=True)      url = cat.xpath("@href").string()      if url and category1 and category2:         session.queue(Request(url, force_charset='utf-8'), process_category, dict(context, url=url, category='%s|%s'%(category1, category2), page=0))def process_category(data, context, session):    for cat in data.xpath("//div[regexp:test(@class,'category-list')]//ul[@class='unstyled']/li/a[regexp:test(@href,'hintaseuranta.fi')]|//div[regexp:test(@class,'category-list')]//a"):        category1 = cat.xpath("preceding::h4[1]//text()").string(multiple=True)        category2 = cat.xpath("descendant::text()").string(multiple=True)        url = cat.xpath("@href").string()        if url and category1 and category2:            session.queue(Request(url, force_charset='utf-8'), process_category, dict(context, url=url, category='%s|%s|%s'%(context['category'], category1, category2)))    if not(data.xpath("//div[regexp:test(@class,'category-list')]//ul[@class='unstyled']/li/a[regexp:test(@href,'hintaseuranta.fi')]")):        process_productlist(data, context, session)def process_productlist(data, context, session):    for prod in data.xpath("//div[@class='item-data']/h4"):        url = prod.xpath("descendant::a/@href").string()        name = prod.xpath("descendant::a/text()").string(multiple=True)        rated = prod.xpath("following-sibling::div[@class='item-data-rating']//a//@href").string(multiple=True)        if url and name and rated:            session.queue(Request(url, force_charset='utf-8'), process_product, dict(context, url=url, name=name))    next = data.xpath('//div[@id="data-values"]//@data-values').string(multiple=True)    if next:        page = context['page'] + 1        url = 'https://hintaseuranta.fi/facet/listmore?abc='+str(random.randint(1,999999)+random.randint(1,9999999))        formdata = {}        formdata['vals'] = next        formdata['skip'] = str(page*30)        formdata['sort'] = '"popularity desc"'        formdata['view'] = ''        formdata = urllib.urlencode(formdata)        print data.response_url, 'Page:', page        session.queue(RequestNext(url, formdata), process_productlist, dict(context, page=page))def process_product(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.ssid = re_search_once('\/(\d+)$', product.url)   product.category = context['category']   cnt = 0   for rev in data.xpath('//table[@id="productReviews"]//tr'):      cnt = cnt + 1      review = Review()      review.type = 'user'      review.url = product.url      ssid = rev.xpath('descendant::span[@id]//@id').string()      if ssid:         review.ssid = ssid      date = rev.xpath('td[2]/text()[string-length(normalize-space(.))>1]').string()      if date:         review.date = date[1:-1]      author = rev.xpath('td[2]/strong//text()').string(multiple=True)      if author:         review.authors.append(Person(name=author, ssid=author))      summary = rev.xpath('td[2]//p//text()').string(multiple=True)      if summary:         review.add_property(type='excerpt', value=summary)      gradetxt = rev.xpath('descendant::i[@class]//@class').string()      if gradetxt and 'pos-x-m' in gradetxt:         grade = gradetxt.split('pos-x-m')[1]         if grade:            grade = (130 - int(grade)) / 26.            review.grades.append(Grade(type='overall', value=grade, best=5.0))      if summary:         product.reviews.append(review)   if product.reviews:      session.emit(product)