from agent import *from models.products import *XCAT = ["Hem", "Varumärken", "REA"]def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=4000)]    session.queue(Request("https://dermastore.se/"), process_frontpage, dict())def process_frontpage(data, context, session):    cats = data.xpath("//div[@id='menu']/ul/li")    for cat in cats:        name = cat.xpath("a/text()").string()        url = cat.xpath("a/@href").string()        if name in XCAT:            continue        subcats = cat.xpath("div/ul/li/a")        if not subcats:            session.queue(Request(url), process_brandlist, dict(cat=name, prods_url=url))        for subcat in subcats:            subcat_name = subcat.xpath("text()").string()            url = subcat.xpath("@href").string()            session.queue(Request(url), process_brandlist, dict(cat=name+'|'+subcat_name, prods_url=url))def process_brandlist(data, context, session):    brands = data.xpath("//ul[@class='filter_grouper']/li[div[text()='Varumärke']]//ul/li")    for brand in brands:        name = brand.xpath("text()").string()        id = brand.xpath("@id").string()        url = context["prods_url"] + "?forcefiltersupdate=true&checkedfilters%5B%5D=" + id        session.queue(Request(url), process_prodlist, dict(context, brand=name))def process_prodlist(data, context, session):    prods = data.xpath("//div[@class='list-item'][descendant::span[@data-original-title][not(contains(@data-original-title, ' 0 recensioner'))]]")    for prod in prods:        product = Product()        product.name = prod.xpath(".//h3[@class='wname']/a/@title").string()        product.url = prod.xpath(".//h3[@class='wname']/a/@href").string()        product.ssid = prod.xpath(".//a[contains(@onclick, 'addToWishList')]/@onclick").string().split("'")[-2]        product.sku = product.ssid        product.category = context["cat"]        product.manufacturer = context["brand"]        revs_url = "https://dermastore.se/index.php?route=product/product/review&product_id=" + product.ssid + "&page=1"        session.queue(Request(revs_url), process_reviews, dict(product=product))    next_page = data.xpath("//a[text()='>']/@href").string()    if next_page:        session.queue(Request(next_page), process_prodlist, dict(context))def process_reviews(data, context, session):    product = context["product"]    revs = data.xpath("//tbody/tr")    for rev in revs:        review = Review()        review.type = "user"        review.date = rev.xpath("td/i/text()").string()        review.url = product.url        overall = int(rev.xpath("td/span[contains(@class, 'rating')]/@class").string().split(' ')[-1][-1])        if overall:            review.grades.append(Grade(type="overall", value=overall, best=5))        author = rev.xpath("td[@class='user']/text()").string()        if author:            review.authors.append(Person(name=author, ssid=author))        excerpt = rev.xpath("td[@class='text']//text()").string(multiple=True)        if excerpt:            review.add_property(type="excerpt", value=excerpt)            review.ssid = review.digest()            product.reviews.append(review)    next_page = data.xpath("//a[text()='>']/@href").string()    if next_page:        session.do(Request(next_page), process_reviews, dict(product=product))    elif product.reviews:        session.emit(product)