#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import time, datetimedebug = Truedef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://www.digitalcameraworld.com/reviews'), process_productlist, dict())def process_productlist(data, context, session):    last_date = ''    for link in data.xpath('//div[contains(@class,"listingResult small result")]'):        url=link.xpath('descendant::a[article]//@href').string()        name=link.xpath('descendant::node()[@class="article-name"]//text()').string()        ldate=link.xpath('descendant::time//@datetime').string()        if url and name and ldate:# and not session.seen(url):            last_date = ldate            bad_list2 = ['review','','','','']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url), process_product, dict(context, url=url, name=name))    # Next page    if last_date:        print last_date        if '.' in last_date: last_date = last_date.split('.')[0]        last_date = last_date.replace('T',' ').replace('Z','').replace(':','-')        last_date = last_date[:-1] + str(abs(int(last_date[-1:])-1))        print last_date        unix_date = datetime.datetime.strptime(last_date, "%Y-%m-%d  %H-%M-%S")        unix_date = str(time.mktime(unix_date.timetuple()))[:-2]        next = 'https://www.digitalcameraworld.com/more/reviews/latest/' + unix_date        session.queue(Request(next), process_productlist, dict(context))def process_product(data, context, session):    product=Product()    product.url=context['url']    product.name=context['name']    # Category    if '"groups":["' in data.content:        category = data.content.split('"groups":["')[1].split('"]')[0]        product.category = category.replace('","','|').replace('_',' ')    else:        product.category = 'unknown'    # Ssid    ssid = data.xpath('//article[@data-id]/@data-id').string()    if ssid:        product.ssid = ssid    else:        product.ssid = product.name + product.url    review=Review()    review.product=product.name    review.url=product.url    review.ssid=product.ssid + ' review'    review.type='pro'    # Title    title = data.xpath('//meta[@property="og:title"]//@content').string()    if title:        review.title = title    # Publish date    pub_date=data.xpath('//meta[@name="pub_date"]/@content').string()    if pub_date:        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        review.date=pub_date    # Author    author=data.xpath('//a[@rel="author"]//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='digitalcameraworld', ssid='digitalcameraworld'))    # Grades    over_list = [    '//meta[@itemprop="ratingValue"]//@content']    for item in over_list:        overall=data.xpath(item).string()        if overall:            review.grades.append(Grade(name='Overall Rating', type='overall', value=float(overall), best=5))            break    # Conclusion    conc_list = [    '//node()[regexp:test(descendant::text(),"(Verdict)")]/following-sibling::p[text()][1]//text()',    '//p[regexp:test(descendant::node()//text(),"(Verdict)")]/following-sibling::p[1]//text()']    for item in conc_list:        conclusion = data.xpath(item).string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))            break    # Excerpt    exce_list = [    '//meta[@property="og:description"]//@content',    '//div[contains(@id,"article-body"]//p//text()']    for item in exce_list:        excerpt=data.xpath(item).string(multiple=True)        if excerpt:            excerpt = excerpt.replace('Â»','')            review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:111]+'...'))            break    # Pros    for p in data.xpath('//node()[regexp:test(@class,"(icon-plus_circle)")]/following-sibling::ul//li'):        pros=p.xpath('descendant::text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for c in data.xpath('//node()[regexp:test(@class,"(icon-minus_circle)")]/following-sibling::ul//li'):        cons=c.xpath('descendant::text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    product.reviews.append(review)    if product.reviews:        session.emit(product)