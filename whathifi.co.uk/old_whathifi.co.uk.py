#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import yamldef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=30000)]    session.queue(Request('https://www.whathifi.com/products/archive', max_age=0), process_firstpage, dict())    #url = 'https://www.whathifi.com/hisense/65xt910/review'    #session.queue(Request(url), process_review, {'url': url, 'name': 'name', 'cat' : 'cat'})def process_firstpage(data, context, session):    for rev in data.xpath('//ul[@class="smaller indented basic-list"]//li//a'):        name = rev.xpath("descendant::text()[string-length(normalize-space(.))>1]").string(multiple=True)        url = rev.xpath("@href").string(multiple=True)        if url and name:           session.queue(Request(url, max_age=0), process_productlist, dict())def process_productlist(data, context, session):    for rev in data.xpath('//div[@class="archive-list"]//li[@class="day-article"]//a'):        name = rev.xpath("descendant::text()[string-length(normalize-space(.))>1]").string()        url = rev.xpath("@href").string()        if url and name:           session.queue(Request(url), process_review, dict(url=url, name=name))def process_review(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    product.ssid = data.xpath('//article[@data-id]//@data-id').string() or context['name'] + context['url']    # Category    if '"groups":[' in data.content:        category = data.content.split('"groups":[')[1].split('],"primary')[0].replace('"','').replace(',','|')        if len(category) > 2:            product.category = category        else:            product.category = 'unknown'    else:        product.category = 'unknown'    review = Review()    review.type = 'pro'    review.title = product.name    review.url = product.url    review.ssid = product.ssid    revDate = data.xpath('//meta[@property="article:published_time"]//@content').string()    if revDate:        if 'T' in revDate: revDate=revDate.split('T')[0]        review.date = revDate    revAuthor=data.xpath('//a[@rel="author"]//text()').string(multiple=True)    if revAuthor:        review.authors.append(Person(name=revAuthor, ssid=revAuthor))    excerpt = data.xpath('//div[@class="header-sub-container"]//h2//text()').string(multiple=True)    if excerpt:       review.properties.append(ReviewProperty(type="excerpt", value = excerpt))    for pros in data.xpath('//node()[contains(@class,"icon-plus_circle")]/following-sibling::ul//li'):        text = pros.xpath("(.)//text()[string-length(normalize-space(.))>1]").string(multiple=True)        if text:           review.properties.append(ReviewProperty(type='pros', value=text))    for cons in data.xpath('//node()[contains(@class,"icon-minus_circle")]/following-sibling::ul//li'):        text = cons.xpath("(.)//text()[string-length(normalize-space(.))>1]").string(multiple=True)        if text:           review.properties.append(ReviewProperty(type='cons', value=text))    overall = data.xpath('//meta[@itemprop="ratingValue"]//@content').string()    if not overall and '"ratingValue": "' in data.content:        overall = data.content.split('"ratingValue": "')[1].split('",')[0]    if overall:        review.grades.append(Grade(type = 'overall', value = overall, worst = 0,  best = 5))    summary = data.xpath('//div[contains(@class,"verdict")]//p//text()').string(multiple=True)    if summary:       review.properties.append(ReviewProperty(type='summary', value=summary))    conclusion = data.xpath('//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Verdict|verdict|txt3)")]/following-sibling::p//text()').string(multiple=True)    if conclusion:       review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    #rurl = context['url'].replace('/review','/user-reviews')    #session.do(Request(rurl), process_prereviews, dict(product=product, offset=0))    if (summary or conclusion or excerpt) and overall:        product.reviews.append(review)        session.emit(product)def process_prereviews(data, context, session):    if 'productid":"' in data.content:        code = data.content.split('productid":"')[1].split('",')[0]        revurl = "http://api.bazaarvoice.com/data/batch.json?passkey=u43g3h05lb1kd5c31johqwth2&apiversion=5.5&displaycode=15805-en_gb&filter_reviews.q0=contentlocale:eq:en_GB&filter.q0=productid:eq:" + code + "&resource.q0=reviews&sort.q0=relevancy:a1&limit.q0=10"        session.do(Request(revurl), process_reviews, dict(context, revurl=revurl))def process_reviews(data, context, session):    product = context['product']    offset = context.get('offset', 10)    jstxt = data.content    revs = yaml.load(jstxt)    cnt = 0    for rev in revs['BatchedResults']['q0']['Results']:        cnt += 1        review = Review()        review.title = rev['Title']        review.ssid = rev['Id']        review.url = product.url        review.type = 'user'        if rev.get('IsSyndicated'):            print 'SYNDICATED!'            continue        datetxt = rev['SubmissionTime']        if datetxt:            review.date = re_search_once('(\d{4}-\d{2}-\d{2})', datetxt)        author = rev['UserNickname']        if not(author): author = 'Anonymous'        if author:            authorssid = rev['AuthorId']            review.authors.append(Person(name=author, ssid=authorssid))        excerpt = rev['ReviewText']        if excerpt:            product.reviews.append(review)            review.properties.append(ReviewProperty(type='excerpt', value=excerpt))        procons = rev['TagDimensions']        if procons.has_key('Pro'):            pros = procons['Pro']['Values']            for pro in pros:                review.properties.append(ReviewProperty(type='pros', value=pro))        if procons.has_key('Con'):           cons = procons['Con']['Values']           for con in cons:               review.properties.append(ReviewProperty(type='cons', value=con))        score = rev['Rating']        if score:            review.grades.append(Grade(name='Rating', type='overall', value=score, best=5))        if context.get('getSubgrades'):            for g in rev.get('SecondaryRatings', []):                review.grades.append(Grade(name=g, type='overall', value=int(rev['SecondaryRatings'][g]['Value']), best=5))    if cnt == 10:        revurl = context['revurl'] + '&offset.q0=%s'%(offset+10)        session.do(Request(revurl), process_reviews, dict(context, offset=offset+10))