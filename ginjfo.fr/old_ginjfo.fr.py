import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     session.queue(Request('http://www.ginjfo.com/dossiers'), process_frontpage, {})def process_frontpage(data, context, session):    for p in data.xpath("//div[@class='post-listing']/h2/a"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//div[@class='pagination']/span[@id='tie-next-page']/a/@href").string()    if next:        session.queue(Request(next), process_frontpage, {})def process_product(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    category = data.xpath("//div[@id='crumbs']/span[a][position()>3]//text()[string-length(normalize-space(.))>0]").join("|")    if not category:        return False    product.category = Category(name = category)    shortlink = data.xpath("//link[@rel='shortlink']/@href").string()    if shortlink:        product.ssid = get_url_parameter(shortlink,'p')    review = Review()    review.title = context['name']    review.ssid = product.ssid    review.url = product.url    review.type = 'pro'    review.date = data.xpath("//div[@class='post-inner']/p[@class='post-meta']//span[@class='tie-date']/text()[string-length(normalize-space(.))>0]").string()    user_data = data.xpath("//div[@class='post-inner']/p[@class='post-meta']//a[@href[regexp:test(., '\/author\/')]]").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/author\/([^\/]+)', user.profile_url)        review.authors.append(user)    excerpt = data.xpath("//div[@class='entry']/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    summary = data.xpath("//div[@class='review-short-summary']/p/text()[string-length(normalize-space(.))>0]").string()    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Résumé"))    grade = data.xpath("//span[@class='rating points']//text()[regexp:test(., '\d')]").string()    if grade:        review.grades.append(Grade(name="Note finales", value = grade, worst = 0, best = 100, type = 'overall'))    has_grades = False    for g in data.xpath("//div[@class[regexp:test(., 'review-box review-bottom')]]//div[@class='review-item']"):        g_name = g.xpath("h5/text()[string-length(normalize-space(.))>0]").string()        g_value = g.xpath("span[@class='stars-large']/span/@style").string()        if g_name and g_value:            g_value = re_search_once('(\d+)', g_value)            if g_value:                review.grades.append(Grade(name = g_name, value = g_value, worst = 0, best = 100))                has_grades = True    if grade or has_grades:        product.reviews.append(review)        session.emit(product)    else:        last_url = data.xpath("//div[@class='page-link']/a[last()]/@href").string()        if last_url:            session.queue(Request(last_url), process_last_page, dict(product=product, review=review))def process_last_page(data, context, session):    review = context['review']    product = context['product']    for g in data.xpath("//td[img/@src[regexp:test(., 'notation-ginjfo')]]"):        g_name = g.xpath("preceding-sibling::td[1]//text()[string-length(normalize-space(.))>0]").string()        g_value = g.xpath("img/@alt").string()        if g_name and g_value:            g_value = re_search_once('(.+)\/', g_value)            if g_value:                g_value = g_value.replace(',', '.')                review.grades.append(Grade(name = g_name, value = g_value, worst = 0, best = 5))    product.reviews.append(review)    session.emit(product)