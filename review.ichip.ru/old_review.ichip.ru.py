#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *debug = Trueseen_urls = []def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    #session.browser.use_new_parser = True    session.queue(Request('http://ichip.ru/obzory'), process_productlist, {})def process_productlist(data, context, session):    cnt = 0    for link in data.xpath('//div[@class="title"]//a'):        url=link.xpath('@href').string()        name=link.xpath('descendant::text()').string(multiple=True)        if url and name:# and not session.seen(url):            bad_list2 = ['Тест и обзор ','Обзор ','Тест ','ноутбука','смартфона',            'Отзыв пользователя:','видеокарты','планшета','экшн-камеры','камеры',            '4К-проекторов:','жесткого диска','беспроводной гарнитуры','Первый взгляд на',            '«','»','игры','портативного','телевизора','сервиса','увлажнителя воздуха',            'видеорегистратора','навигатора','компактной','беспроводных наушников','Тестируем',            'и тест','умных часов','чайника', 'тест']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            #bad_list = [': ']            #for item in bad_list:            #    if item in name:            #        namex = name.split(item)[0]            #        if len(namex) == 0:            #            name = name.split(item)[1]            #        else:            #            name = namex            #        break            if url not in seen_urls:                session.queue(Request(url), process_product, dict(context, url=url, name=name))                cnt += 1                seen_urls.append(url)    # Next page    next = data.xpath('//div[@data-page]//@data-page').string()    if next and cnt >= 10:        next = int(next) + 1        next = 'http://ichip.ru/obzory?page=' + str(next)        session.do(Request(next), process_productlist, dict(context))def process_product(data, context, session):    try:        product=Product()        product.url=context['url']        product.name=context['name']        # Category        category = data.xpath('//li[@class="breadcrumbs__item"]//text()|//span[@class="announce-tag"]//text()').join('|')        if category:            product.category = category        else:            product.category = 'unknown'        # Ssid        ssid = data.xpath('//label[@data-entity-id]//@data-entity-id').string()        if ssid:            product.ssid = ssid        else:            product.ssid = product.name + product.url        review=Review()        review.product=product.name        review.url=product.url        review.ssid=product.ssid + ' review'        review.type='pro'        # Title        title = data.xpath('//meta[@property="og:title"]//@content').string()        if title:            review.title = title        # Publish date        pub_date=data.xpath('//meta[@itemprop="datePublished"]//@content').string()        if pub_date:            if 'T' in pub_date: pub_date=pub_date.split('T')[0]            review.date=pub_date        else:            review.date='unknown'        # Author        author=data.xpath('//meta[@property="article:author"]//@content').string()        if author:            review.authors.append(Person(name=author, ssid=author))        else:            review.authors.append(Person(name='unknown', ssid='unknown'))        # Grades        over_list = [        '//div[contains(@class, "editor_rating")]//div[@class="number"]/text()']        for item in over_list:            overall=data.xpath(item).string()            if overall:                review.grades.append(Grade(name='Overall Rating', type='overall', value=float(overall), best=100))        for g in data.xpath('//ul[@class="ul-line"]//li'):            value=g.xpath('text()').string()            if value and ':' in value:                name = value.split(':')[0]                if '(' in name: name = name.split('(')[0]                value = value.split(':')[1]                try:                    review.grades.append(Grade(name=name, value=float(value), best=100))                except:                    print 'ERROR bad rating:', name, value        # Conclusion        conc_list = [        '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Итоги теста|Итоги|тоит ли купить|Вывод)")]/following-sibling::p[1]//text()']        for item in conc_list:            conclusion = data.xpath(item).string(multiple=True)            if conclusion:                review.properties.append(ReviewProperty(type='conclusion', value=conclusion))                break        # Excerpt        exce_list = [        '//meta[@property="og:description"]//@content',        '//div[@class="article-content__container"]//p//text()']        for item in exce_list:            excerpt=data.xpath(item).string(multiple=True)            if excerpt:                excerpt = excerpt.replace('»','')                review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:135]+'...'))                break        # Pros        for p in data.xpath('//div[contains(@class,"list-benefits")]//li'):            pros=p.xpath('descendant::text()').string(multiple=True)            if pros:                review.properties.append(ReviewProperty(type='pros',value=pros))        # Cons        for c in data.xpath('//div[contains(@class,"list-limitations")]//li'):            cons=c.xpath('descendant::text()').string(multiple=True)            if cons:                review.properties.append(ReviewProperty(type='cons',value=cons))        product.reviews.append(review)        if product.reviews:            session.emit(product)    except:        print 'Error Not well formed.'