import stringfrom agent import *from models.products import *import redef process_view_category(data, context, session):    for view_categoryline in data.xpath("//ul[@class='list']//h3/a[contains(@href,'test')]"):        context['product_url'] = view_categoryline.xpath("@href").string()        context['product_name'] = view_categoryline.xpath(".//text()[string-length(normalize-space(.))>1]").string()        if context['product_url'] and context['product_name']:            context['product_name'] = context['product_name'].replace('[Test]','')            session.queue(Request(context['product_url']), process_product, context)            #session.emit(Product(name = context['product_name'], url = context['product_url'], category = context['category_name']))    next = data.xpath("//a[@class='loadmore' and contains(text(),'Næste side')]/@href").string()    if next:        session.queue(Request(next), process_view_category, context)def process_category2(data, context, session):    for categoryline in data.xpath("//ul[@class='years']/li/a"):        context['category_url'] = categoryline.xpath("@href").string()        context['category_name'] = categoryline.xpath("text()").string()        if context['category_name']:          session.queue(Request(context['category_url']), process_view_category2, context)def process_view_category2(data, context, session):    for view_categoryline in data.xpath("//ul[@data-type='articles']/li//h3/a[contains(@href,'test')]"):        context['product_url'] = view_categoryline.xpath("@href").string()        context['product_name'] = view_categoryline.xpath(".//text()[string-length(normalize-space(.))>1]").string()        if context['product_url'] and context['product_name']:            context['product_name'] = context['product_name'].replace('[Test]','')            session.queue(Request(context['product_url']), process_product, context)            #session.emit(Product(name = context['product_name'], url = context['product_url'], category = context['category_name']))def process_product(data, context, session):     product = Product()    product.url = context['product_url']     product.ssid = re_search_once('test.(\d+)', context['product_url'])    product.name = context['product_name']    product.category = data.xpath("//h1/following-sibling::a[contains(@href,'/kategorier/')]/text()[string-length(normalize-space(.))>1]").join(", ")    if not product.category:       product.category = 'Unknown'    for imageline in data.xpath("//meta[@property='og:image']"):        url_image = imageline.xpath("@content").string()        if url_image:            product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.url = context['product_url']     review.ssid = product.ssid    review.title = context['product_name']    review.type = 'pro'    review.date = data.xpath("//time[@pubdate='pubdate']/@datetime").string()     username = data.xpath("//a[@rel='author']/text()[string-length(normalize-space(.))>0]").string()    if username:        profile = data.xpath("//a[@rel='author']/@href").string()        review.authors = Person(name = username, ssid = username, profile_url = profile) 		    excerpt = data.xpath("//strong[text()[regexp:test(.,'ud af 6 stjerner')]]/following-sibling::text()[string-length(normalize-space(.))>100]").string()    if not excerpt:      excerpt = data.xpath("//strong[text()[regexp:test(.,'ud af 6 stjerner')]]/following-sibling::div//text()[string-length(normalize-space(.))>100]").string()    if not excerpt:      excerpt = data.xpath("//strong[text()[regexp:test(.,'ud af 6 stjerner')]]/following-sibling::p//text()[string-length(normalize-space(.))>100]").string()    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value = excerpt))    grade1 = data.xpath("//text()[regexp:test(.,'ud af 6 stjerner')]").string() 			    if grade1:   			       rating_value = re_search_once('(\d+) ud af 6 stjerner', grade1) 			       if rating_value and rating_value != '0': 			            review.grades.append(Grade(name= 'Rating', value = rating_value, worst = 0,  best = 6, type = 'overall'))    product.reviews.append(review)    if product.ssid and grade1 and excerpt:      session.emit(product)def run(context, session):    session.queue(Request('https://connery.dk/kategorier/mobil.75.html'), process_view_category, {})     session.queue(Request('https://connery.dk/kategorier/andet-gear.77.html'), process_view_category, {})     session.queue(Request('https://connery.dk/kategorier/gaming.82.html'), process_view_category, {})     session.queue(Request('https://connery.dk/kategorier/lyd.78.html'), process_view_category, {})     session.queue(Request('https://connery.dk/kategorier/gear.11.html'), process_view_category, {})     session.queue(Request('https://connery.dk/samsung-galaxy-s5-test.124102.html'), process_product, {'product_name': 'Samsung Galaxy S5', 'product_url': 'https://connery.dk/samsung-galaxy-s5-test.124102.html'})     session.queue(Request('http://connery.dk/huawei-ascend-p7-test.124155.html'), process_product, {'product_name': 'Huawei Ascend P7', 'product_url': 'http://connery.dk/huawei-ascend-p7-test.124155.html'})     session.queue(Request('http://connery.dk/huawei-ascend-p6-test.122873.html'), process_product, {'product_name': 'Huawei Ascend P6', 'product_url': 'http://connery.dk/huawei-ascend-p6-test.122873.html'})     session.queue(Request('http://connery.dk/samsung-galaxy-s4-test.122479.html'), process_product, {'product_name': 'Samsung Galaxy S4', 'product_url': 'http://connery.dk/samsung-galaxy-s4-test.122479.html'})     session.queue(Request('http://connery.dk/htc-one-test.122420.html'), process_product, {'product_name': 'HTC One', 'product_url': 'http://connery.dk/htc-one-test.122420.html'})     session.queue(Request('http://connery.dk/logitech-t650-gadget-test.122501.html'), process_product, {'product_name': 'Logitech T650', 'product_url': 'http://connery.dk/logitech-t650-gadget-test.122501.html'})     session.queue(Request('http://connery.dk/sony-xperia-z-tablet-test.122183.html'), process_product, {'product_name': 'Sony Xperia Z Tablet', 'product_url': 'http://connery.dk/sony-xperia-z-tablet-test.122183.html'})     session.queue(Request('http://connery.dk/samsung-galaxy-tab-2-0-test.105321.html'), process_product, {'product_name': 'Samsung Galaxy Tab 2.0', 'product_url': 'http://connery.dk/samsung-galaxy-tab-2-0-test.105321.html'})     session.queue(Request('http://connery.dk/sennheiser-g4me-series-test.123429.html'), process_product, {'product_name': 'Sennheiser G4ME Series', 'product_url': 'http://connery.dk/sennheiser-g4me-series-test.123429.html'})     session.queue(Request('http://connery.dk/sonos-simpelthen-smart-test.122821.html'), process_product, {'product_name': 'Sonos, simpelthen smart', 'product_url': 'http://connery.dk/sonos-simpelthen-smart-test.122821.html'})     session.queue(Request('http://connery.dk/podspeakers-er-loese-paa-traaden-test.122744.html'), process_product, {'product_name': 'Podspeakers er løse på tråden', 'product_url': 'http://connery.dk/podspeakers-er-loese-paa-traaden-test.122744.html'})     session.queue(Request('http://connery.dk/creative-airwave-test.122689.html'), process_product, {'product_name': 'Creative Airwave', 'product_url': 'http://connery.dk/creative-airwave-test.122689.html'})     session.queue(Request('http://connery.dk/steelseries-flux-gaming-headset-test.121419.html'), process_product, {'product_name': 'Steelseries Flux Gaming Headset', 'product_url': 'http://connery.dk/steelseries-flux-gaming-headset-test.121419.html'})     session.queue(Request('http://connery.dk/tivoli-audio-radio-silenz-test.82031.html'), process_product, {'product_name': 'Tivoli Audio Radio Silenz', 'product_url': 'http://connery.dk/tivoli-audio-radio-silenz-test.82031.html'})     session.queue(Request('http://connery.dk/asus-rog30-test.122822.html'), process_product, {'product_name': 'ASUS ROG30', 'product_url': 'http://connery.dk/asus-rog30-test.122822.html'})     session.queue(Request('http://connery.dk/go-pro-hd-2-test.73381.html'), process_product, {'product_name': 'Go Pro HD 2', 'product_url': 'http://connery.dk/go-pro-hd-2-test.73381.html'})     session.queue(Request('http://connery.dk/steelseries-apex-keyboard-til-den-kraevende-gamer-test.122656.html'), process_product, {'product_name': 'Steelseries Apex ', 'product_url': 'http://connery.dk/steelseries-apex-keyboard-til-den-kraevende-gamer-test.122656.html'})     session.queue(Request('https://connery.dk/arkiv/mobil.75.html'), process_category2, {})     session.queue(Request('https://connery.dk/arkiv/andet-gear.77.html'), process_category2, {})     session.queue(Request('https://connery.dk/arkiv/gaming.82.html'), process_category2, {})     session.queue(Request('https://connery.dk/arkiv/lyd.78.html'), process_category2, {})     session.queue(Request('https://connery.dk/arkiv/gear.11.html'), process_category2, {}) 