from agent import *from models.products import *def process_all_page(data, context, session):    max_page = '100'    page = int(max_page) + 1    for i in range(1, page):        i_str = str(i)        page_url = 'https://www.gizmodo.com.au/reviews/page/' + i_str        session.queue(Request(page_url), process_view_category, context)        #session.emit(Product(name = max_page, url = page_url))def process_view_category(data, context, session):    for view_categoryline in data.xpath("//div[@class='entry-title']"):        context['product_url'] = view_categoryline.xpath("h2/a/@href").string()        context['product_name'] = view_categoryline.xpath("h2/a/text()[string-length(normalize-space(.))>0]").string()        context['c'] = view_categoryline.xpath("preceding-sibling::div[1]//span[@class='category-name']/text()[string-length(normalize-space(.))>0]").string()        context['username'] = view_categoryline.xpath("following-sibling::div[1]//span[contains(@class,'author-name')]/text()[string-length(normalize-space(.))>0]").string()        if context['product_url'] and context['product_name'] and context['c'] and context['username']:            session.queue(Request(context['product_url']), process_product, context)            #session.emit(Product(name = context['product_name'], url = context['product_url'], category = context['date']))    next = data.xpath("//link[@rel='next']/@href").string()    if next:        session.queue(Request(next), process_view_category, context)def process_product(data, context, session):     product = Product()    product.url = context['product_url']     product.ssid = context['product_url']     product.name = context['product_name']    product.category = context['c']    for imageline in data.xpath("//meta[@property='og:image']"):        url_image = imageline.xpath("@content").string()        if url_image:            product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.url = context['product_url']     review.ssid = context['product_url']     review.title = context['product_name']    review.type = 'pro'    review.authors = Person(name = context['username'], ssid = context['username'])     excerpt = data.xpath("//meta[@property='og:description']/@content").string()    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value = excerpt))    review.date = data.xpath("//span[@class='date-time']/text()[string-length(normalize-space(.))>1]").string()		    pros = data.xpath("//h3[text()[regexp:test(.,'LIKE')] and not (text()[regexp:test(.,'NO LIKE|T LIKE')])]/following-sibling::p[1]/text()[string-length(normalize-space(.))>1]").string()    if pros:        review.properties.append(ReviewProperty(name='LIKE', type='pros', value=pros))              cons = data.xpath("//h3[text()[regexp:test(.,'NO LIKE|T LIKE')]]/following-sibling::p[1]/text()[string-length(normalize-space(.))>1]").string()    if cons:        review.properties.append(ReviewProperty(name='NO LIKE', type='cons', value=cons))              product.reviews.append(review)    review_url = re_search_once('review(.+)', context['product_url'])    if (pros or cons) or review_url:      session.emit(product)def run(context, session):   #session.queue(Request('http://www.gizmodo.com.au/tags/review/'), process_view_category, {})   session.queue(Request('https://www.gizmodo.com.au/reviews/'), process_view_category, {})   #session.queue(Request('https://www.gizmodo.com.au/reviews/'), process_all_page, {})