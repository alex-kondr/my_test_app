#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import randomdef run(context, session):   session.sessionbreakers = [SessionBreak(max_requests=10000)]   fdata = {}   fdata['action'] = 'ajaxload'   fdata['page'] = '0'   fdata['filters'] = [{'label':'Reviews','value':9,'tax':'story_types'}]   fdata['perpage'] = '20'   fdata['offset'] = '0'   fdata['_ajaxnonce'] = '24001bcf43'   r = Request('https://www.pcworld.com/wp-admin/admin-ajax.php', method='POST', data=fdata)   r.add_header('Accept', '*/*')   r.add_header('x-requested-with', 'XMLHttpRequest')   session.queue(r, process_reviewlist, dict(fdata=fdata))def process_reviewlist(data, context, session):   cnt = 0   page = context.get('page', 0)   for rev in data.xpath("//h3/a"):      cnt += 1      title = rev.xpath("descendant::text()").string()      url = rev.xpath("@href").string()      if url and title:         fixurl = "/".join(url.split('/')[0:-1])         session.queue(Request(fixurl), process_review, dict(context, url=fixurl, title=title))   if cnt == 20:      fdata = context['fdata']      fdata['page'] = '%s'%(page + 1)      arg = str(random.randint(0,1000000)+random.randint(0,1000000))      r = Request('https://www.pcworld.com/wp-admin/admin-ajax.php?abc='+arg, method='POST', data=fdata)      r.add_header('Accept', '*/*')      r.add_header('x-requested-with', 'XMLHttpRequest')      session.queue(r, process_reviewlist, dict(context, page=page+1))def process_review(data, context, session):   product = Product()   product.name = data.xpath("//h3[@class='product-widget__title']/text()").string() or data.xpath("//h1/text()").string()   product.url = data.xpath("//link[@rel='canonical']/@href").string()   product.ssid = re_search_once('article\/(\d+)', product.url)   category = data.xpath("//div[@class='single-breadcrumb']/a//text()").string(multiple=True)   if category:      product.category = category.split(' / ')      if len(product.category) > 1:         product.category = product.category[1]      else:         product.category = data.xpath("//a[@class='tag-button']/text()").string() or 'unknown'   else:      product.category = data.xpath("//a[@class='tag-button']/text()").string() or 'unknown'   review = Review()   review.type = 'pro'   review.title = context['title']   review.url = context['url']   review.ssid = product.ssid + '-review'   revDate = data.xpath("//time/@datetime").string()   if revDate:      if 'T' in revDate: revDate = revDate.split('T')[0]      review.date = revDate   author = data.xpath("//span[@class='author vcard']/a").first()   if author:      name = author.xpath("descendant::text()").string()      url = author.xpath("@href").string()      if url and name:         review.authors.append(Person(name=name, ssid=name, profile_url=url))   summary = data.xpath("//p[@class='verdict']//text()").string(multiple=True)   if summary:      review.properties.append(ReviewProperty(type='summary',value=summary))   excerpt = data.xpath("//div[@class='subheadline']//text()").string(multiple=True)   if excerpt:      review.properties.append(ReviewProperty(type="excerpt", value=excerpt))   for pro in data.xpath("//ul[@class='pros review-list']/li"):      line = pro.xpath("descendant::text()").string(multiple=True)      if line:         review.properties.append(ReviewProperty(type="pros", value=line))   for con in data.xpath("//ul[@class='cons review-list']/li"):      line = con.xpath("descendant::text()").string(multiple=True)      if line:         review.properties.append(ReviewProperty(type="cons", value=line))   conclusion = data.xpath("//h2[regexp:test(text(),'(Conclusion|Bottom line|Should you buy)','i')]/following-sibling::p//text()").string(multiple=True)   if not(conclusion): conclusion = data.xpath("//div[@class='legacy_content']/p[last()]//text()").string(multiple=True)   if conclusion:      review.properties.append(ReviewProperty(type="conclusion", value=conclusion))   value = re_search_once('(\d\.?\d?)', data.xpath("//div[@class='starRating']/@style").string())   print value, conclusion   if value:      review.grades.append(Grade(name='Rating', type='overall', value=float(value), best=5.0))      product.reviews.append(review)   if product.reviews:      session.emit(product)