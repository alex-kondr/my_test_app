import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     sb = SessionBreak()    sb.max_requests = 7000    session.sessionbreakers = [ sb ]    session.browser.use_new_parser = True    session.queue(Request('https://www.eurogamer.de/archive/review'), process_frontpage, {})def process_frontpage(data, context, session):    for p in data.xpath("//div[@class='compact-archive']/div[@class='compact-archive-item']//h2/a"):        context['name'] = p.xpath("text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//a[@rel='next']/@href").string()    if next:        session.queue(Request(next), process_frontpage, {})def process_product(data, context, session):    product = Product()    product.name = data.xpath("//span[@class='hreview']/span[@class='item']//text()[string-length(normalize-space(.))>0]").string()    if not product.name:        product.name = re_search_once('(.+) review', context['name'])    if not product.name:        product.name = context['name'].replace(' review', '')    product.url = context['url']    product.category = Category(name = "Games")    product.ssid = re_search_once('\/articles\/([^\/]+)', context['url'])    review = Review()    review.title = context['name']    review.ssid = product.ssid    review.url = context['url']    review.type = 'pro'    review.date = data.xpath("//div[@class='metadata']//div[@class='date']//span/text()[string-length(normalize-space(.))>0]").string()    user_data = data.xpath("//div[@class='author-bio']//p[@class='name']/a").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/authors\/([^\/]+)', user.profile_url)        review.authors.append(user)    ex_data = data.xpath("//div[@class='body']//p[.//text()[string-length(normalize-space(.))>100]]").first()    if ex_data:        excerpt = ex_data.xpath(".//text()[string-length(normalize-space(.))>0]").string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    grade = data.xpath("//p[@class='score']/big/text()[regexp:test(., '\d')]").string()    if grade:        best = data.xpath("//p[@class='score']/text()[regexp:test(., '\d')]").string()        if best:            review.grades.append(Grade(name="Score", value = grade, worst = 0, best = re_search_once('(\d+)', best), type = 'overall'))    product.reviews.append(review)    session.emit(product)