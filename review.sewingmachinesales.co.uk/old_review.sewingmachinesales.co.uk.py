from agent import *from models.products import *import redef process_category(data, context, session):    for view in data.xpath("//div[@data-role='product-owlCarousel']/div/div/h4"):         url = view.xpath("(.)/a/@href").string()          cat = view.xpath("(.)/a//text()[string-length(normalize-space(.))>1]").join("")        if url and cat:           session.queue(Request(url), process_view_category, {'cat' : cat})def process_view_category(data, context, session):  if data.xpath("//ol[@class='product-items widget-product-grid' or @class='products list items product-items']/li[.//text()[regexp:test(.,'Review')]]//a[@class='product-item-link']"):    for view_categoryline in data.xpath("//ol[@class='product-items widget-product-grid' or @class='products list items product-items']/li[.//text()[regexp:test(.,'Review')]]//a[@class='product-item-link']"):        context['product_url'] = view_categoryline.xpath("@href").string()        context['product_name'] = view_categoryline.xpath("text()[string-length(normalize-space(.))>1]").string()        if context['product_url'] and context['product_name']:            session.queue(Request(context['product_url']), process_product, context)            #session.emit(Product(name = context['product_name'], url = context['product_url'], category = '2'))    next = data.xpath("//li[@class='item pages-item-next']/a/@href").string()    if next:        session.queue(Request(next), process_view_category, context)  else:    c1 = context['category_name']    for categoryline in data.xpath("//div[@class='category-cms']//li[@class='item']//h2/a"):        context['category_url'] = categoryline.xpath("@href").string()        c2 = categoryline.xpath("text()[string-length(normalize-space(.))>1]").string()        if c2:          context['category_name'] = c1 + '|' + c2          session.queue(Request(context['category_url']), process_view_category, context)          #session.emit(Product(name = 'product_name', url = category_url, category = category_name)) def process_product(data, context, session):     product = Product()    product.url = context['product_url']     product.ssid = context['product_url']    product.name = context['product_name']    product.category = context['cat']    url_image = data.xpath("//meta[@property='og:image']/@content").string()    if url_image:        product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    product.sku = data.xpath("//div[@itemprop='sku']//text()[string-length(normalize-space(.))>1]").string()    if product.sku:        product.properties.append(ProductProperty(type='id.manufacturer' , value = product.sku))    review_url1 = data.xpath("//form[@data-role='product-review-form']/@action").string()    if review_url1:      review_url1 = review_url1.replace('/post/id/','/listAjax/id/')      product.ssid = re_search_once('id/(\d+)', review_url1)      session.do(Request(review_url1), process_review, {'product': product, 'review_url': product.url, 'review_title': product.name,  'product_ssid': product.ssid})      session.emit(product)def process_review(data, context, session):    product = context['product']    for r in data.xpath("//ol[@class='items review-items']/li[@itemprop='review']"):      review = Review()      review.url = context['review_url']       review.title = context['review_title']      review.type = 'user'      review.date = r.xpath(".//time[@itemprop='datePublished']/@datetime").string()      username = r.xpath(".//strong[@itemprop='author']/text()[string-length(normalize-space(.))>1]").string()      if username and review.date:          review.authors = Person(name = username, ssid = username)          review.ssid = context['product_ssid'] + '|' + username + '|' + review.date      grade1 = r.xpath(".//div[@class='rating-result']/@title").string()      if grade1:          rating_value = re_search_once('(\d+)', grade1)        if rating_value and rating_value != '0':            rating_value1 = str(float(rating_value)/20)            review.grades.append(Grade(name= 'Rating', value = rating_value1, worst = 0,  best = 5, type = 'overall'))      summary = r.xpath(".//div[@class='review-content']//text()[string-length(normalize-space(.))>1]").join(" ")      if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))                         if username and review.date and summary:        product.reviews.append(review)def run(context, session):    session.browser.use_new_parser = "True"    session.queue(Request('https://www.sewingmachinesales.co.uk/embroidery-machine/'), process_view_category, {'cat' : 'Machines for Embroidery'})    #session.queue(Request('https://www.sewingmachinesales.co.uk/'), process_category, {})    #session.queue(Request('http://www.sewingmachinesales.co.uk/horn-sewing-machine-cabinets/'), process_view_category, {'category_name': '1'})