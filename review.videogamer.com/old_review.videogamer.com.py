import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     session.sessionbreakers = [SessionBreak(max_requests=5000)]    session.queue(Request('https://www.videogamer.com/reviews', use='curl'), process_frontpage, {})def process_frontpage(data, context, session):    for p in data.xpath("//ul[@class[regexp:test(., 'content-list')]]/li//h2/a"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url'], use='curl'), process_product, context)    next = data.xpath("//link[@rel='next']/@href").string()    if next:        session.queue(Request(next, use='curl'), process_frontpage, {})def process_product(data, context, session):    product = Product()    product.name = re_search_once('(.+)[Rr]eview', context['name'])    if not product.name:        product.name = context['name'].replace('review', '').replace('Review', '')    product.name = product.name.strip()    product.url = context['url']    product.category = Category(name = "Video games")    product.ssid = re_search_once('\/([^\/]+)\/*$', product.url)    review = Review()    review.title = context['name']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    review.date = data.xpath("//span[@class='publish-date']/text()[string-length(normalize-space(.))>0]").string()    user = data.xpath("//p[@class[regexp:test(., 'article-head__details__author')]]//strong//text()[string-length(normalize-space(.))>0]").string()    if user:        review.authors.append(Person(name = user, ssid = user))    summary = data.xpath("//div[@class[regexp:test(., 'review-box__quote')]]/text()[string-length(normalize-space(.))>0]").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Verdict"))    for pros in data.xpath("//ul[@class[regexp:test(., 'review-box__breakdown')]]/li[.//svg[@class[regexp:test(., 'icon-circle-check')]]]/text()[string-length(normalize-space(.))>0]"):        p_value = pros.string()        if p_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "Pros"))    for cons in data.xpath("//ul[@class[regexp:test(., 'review-box__breakdown')]]/li[.//svg[@class[regexp:test(., 'icon-circle-cross')]]]/text()[string-length(normalize-space(.))>0]"):        c_value = cons.string()        if c_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "Cons"))    grade = data.xpath("//span[@class='review-score__value']/text()[regexp:test(., '\d')]").string()    if grade:        review.grades.append(Grade(name="Score", value = grade, worst = 0, best = 10, type = 'overall'))    excerpt = None    ex_data = data.xpath("//div[@class='article-body']//p[.//text()[string-length(normalize-space(.))>100]][1]").first()    if ex_data:        excerpt = ex_data.xpath(".//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    product.reviews.append(review)    session.emit(product)