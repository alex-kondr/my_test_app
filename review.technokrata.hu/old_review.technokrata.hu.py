from agent import *from models.products import *import redef run(context, session):    session.queue(Request('https://www.technokrata.hu/', use="curl"), process_frontpage, dict())def process_frontpage(data, context, session):    cats = data.xpath("//ul[@id='menu-fejlec-1']/li[contains(@class, 'menu-item-205120')]/ul/li/a")    for cat in cats:        name = "Tesztek|" + cat.xpath("text()").string()        url = cat.xpath("@href").string()        session.queue(Request(url, use="curl"), process_revlist, dict(cat=name))def process_revlist(data, context, session):    revs = data.xpath("//div[contains(@class, 'mvp-feat2-main ') or contains(@class, 'mvp-feat2-sub ')] | //ul[contains(@class, 'mvp-main-blog-story')]/li/div")    for rev in revs:        name = rev.xpath(".//h2/text()").string()        url = rev.xpath("a/@href").string()        session.queue(Request(url, use="curl"), process_review, dict(context, name=name, url=url))    next_url = data.xpath("//link[@rel='next']/@href").string()    if next_url:        session.queue(Request(next_url, use="curl"), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.name = context["name"].split("Teszt: ")[-1].split(" – ")[0]    product.url = context["url"]    product.ssid = product.url.split('/')[-2]    product.category = context["cat"]    review = Review()    review.type = "pro"    review.title = context["name"]    review.ssid = product.ssid    review.date = data.xpath("//time[@class='post-date updated']/@datetime").string()    review.url = product.url    pros = data.xpath("//tr[@class='pro']/td[normalize-space()][not(text()=' - ')]/text()")    for pro in pros:        pro = re_search_once('^ ?- (.*)', pro.string()) or pro        if pro:            pro = pro.strip()            review.add_property(type="pros", value=pro)    if not pros:        pros = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/p[strong[regexp:test(., 'pozitív:', 'i')]]/text()").string()        if pros:            pros = pros.split(',')            for pro in pros:                pro = re_search_once('^ ?- (.*)', pro) or pro                if pro:                    pro = pro.strip()                    review.add_property(type="pros", value=pro)    cons = data.xpath("//tr[@class='kontra']/td[normalize-space()][not(text()=' - ')]/text()")    for con in cons:        con = re_search_once('^ ?- (.*)', con.string()) or con        if con:            con = con.strip()            review.add_property(type="cons", value=con)    if not cons:        cons = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/p[strong[regexp:test(., 'negatív:', 'i')]]/text()").string()        if cons:            cons = cons.split(',')            for con in cons:                con = re_search_once('^ ?- (.*)', con) or con                if con:                    con = con.strip()                    review.add_property(type="cons", value=con)    summary = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/*[1][self::h1]//text()").string(multiple=True)    if not summary:        summary = data.xpath("//span[contains(@class, 'mvp-post-excerpt left')][normalize-space()]/text()").string()    if summary:        review.add_property(type="summary", value=summary)    conclusion = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/p[b[regexp:test(., 'Ítélet|Végítélet|Konklúzió|Verdictum|Összegzés|Összefoglalva', 'i')]]//text()[not(parent::b)]").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/p[strong[regexp:test(., 'Ítélet|Végítélet|Konklúzió|Verdictum|Összegzés|Összefoglalva', 'i')]]/following-sibling::p//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/p/strong[regexp:test(., 'Ítélet|Végítélet|Konklúzió|Verdictum|Összegzés|Összefoglalva', 'i')]/following-sibling::text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/*[contains(local-name(), 'h') or self::p][regexp:test(., 'Ítélet|Végítélet|Konklúzió|Verdictum|Összegzés|Összefoglalva', 'i')]/following-sibling::p//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/p[regexp:test(., 'Ítélet(:|\?)|Végítélet(:|\?)|Konklúzió(:|\?)|Verdictum(:|\?)|Összegzés(:|\?)|Összefoglalva(:|\?)', 'i')]/text()").string(multiple=True)        if conclusion:            conclusion = re.sub(r'^(Ítélet(:|\?)|Végítélet(:|\?)|Konklúzió(:|\?)|Verdictum(:|\?)|Összegzés(:|\?)|Összefoglalva(:|\?))', '', conclusion)    if not conclusion:        conclusion = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/h2[regexp:test(., '\?$')]/following-sibling::p//text()").string(multiple=True)    if conclusion:        conclusion = conclusion.strip()        review.add_property(type="conclusion", value=conclusion)    excerpt = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/p[b[regexp:test(., 'Ítélet|Végítélet|Konklúzió|Verdictum|Összegzés|Összefoglalva', 'i')]]/preceding-sibling::*[self::p or self::blockquote][not(a[em[strong]] or a[strong[em]])]//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/p[strong[regexp:test(., 'Ítélet|Végítélet|Konklúzió|Verdictum|Összegzés|Összefoglalva', 'i')]]/preceding-sibling::*[self::p or self::blockquote][not(a[em[strong]] or a[strong[em]])]//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/*[contains(local-name(), 'h') or self::p][regexp:test(., 'Ítélet|Végítélet|Konklúzió|Verdictum|Összegzés|Összefoglalva', 'i')]/preceding-sibling::*[self::p or self::blockquote][not(a[em[strong]] or a[strong[em]])]//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/p[regexp:test(., 'Ítélet(:|\?)|Végítélet(:|\?)|Konklúzió(:|\?)|Verdictum(:|\?)|Összegzés(:|\?)|Összefoglalva(:|\?)', 'i')]/preceding-sibling::*[self::p or self::blockquote][not(a[em[strong]] or a[strong[em]])]//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/h2[regexp:test(., '\?$')]/preceding-sibling::*[self::p or self::blockquote][not(a[em[strong]] or a[strong[em]])]//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@class='theiaPostSlider_preloadedSlide']/*[self::p or self::blockquote][not(a[em[strong]] or a[strong[em]])]//text()").string(multiple=True)    if excerpt:        if conclusion:            excerpt = excerpt.split(conclusion.strip())[0]        review.add_property(type="excerpt", value=excerpt)        product.reviews.append(review)        session.emit(product)