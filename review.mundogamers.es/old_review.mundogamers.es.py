from agent import *from models.products import *from Ft.Xml import ReaderExceptionimport redebug = Truedef process_revlist(data, context, session):   for rev in data.xpath("//div[@id='results']//a[@class='titulo']"):      url = rev.xpath("@href").string()      name = rev.xpath("following-sibling::h2/span/text()").string(multiple=True)      title = rev.xpath("following-sibling::h2//text()").string(multiple=True)      categories = rev.xpath("following-sibling::p/a/text()").strings()      date = rev.xpath("following-sibling::span[@class='fecha']/text()").string(multiple=True)      author = rev.xpath("following-sibling::span[@class='autor']/a/text()").string(multiple=True)      if url and name:         fdate = re_search_once('(\d+\/\d+\/\d+)', date)         session.queue(Request(url), process_review, dict(context, url=url, name=name, title=title, category=categories, date=fdate, author=author))   nexturl = data.xpath("//div[@class='pagination']//li[@class='selected']/ancestor::ul[1]/following-sibling::a[1]/@href").string()   if nexturl:      session.queue(Request(nexturl), process_revlist, dict(context))def process_review(data, context, session):   try:      posts = data.xpath("/")   except ReaderException:      return      product = Product()   product.name = '%s (%s)'%(context['name'], context['category'][0])   product.url = data.xpath("//li[regexp:test(normalize-space(.),'Ficha')]//a/@href").string()   product.ssid = re_search_once("(\d+)\.html$", product.url)   product.category = '|'.join(context['category'])   content = data.xpath("//div[@id='results']/div[@class='texto_detalle news']").first()   if content:      review = Review()      review.type = 'pro'      review.title = '%s (%s)'%(context['title'], context['category'][0])      review.url = context['url']      review.ssid = re_search_once("-([^-]*\d+)\.html$", review.url)      review.date = context['date']      author = context['author']      if author:         review.authors.append(Person(name=author, ssid=author))      excerpt = content.xpath("descendant::p[normalize-space(text())]//text()").string(multiple=True)      if not excerpt:         excerpt = content.xpath("descendant::p[normalize-space(span/text())]//text()").string(multiple=True)      if excerpt:         review.properties.append(ReviewProperty(type='excerpt', value=excerpt))      value = content.xpath("descendant::div[@class='valoration']/div[@class='box']/text()").string()      if value and float(value):         product.reviews.append(review)         review.grades.append(Grade(type='overall', name='Valoration', value=float(value), best=10.0))   if product.reviews and review.properties:      session.emit(product)def run(context, session):   session.browser.agent = "Mozilla/6.0"   session.queue(Request('http://www.mundogamers.com/analisis-juegos.html'), process_revlist, {})