from agent import *from models.products import *def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=6000)]    session.queue(Request("https://moviesgamesandtech.com/category/reviews/", use="curl"), process_revlist, dict())def process_revlist(data, context, session):    prods = data.xpath("//div[@class='td_block_inner tdb-block-inner td-fix-index']//div[@class='td-module-meta-info']")    for prod in prods:        url = prod.xpath("h3/a/@href").string()        context["title"] = prod.xpath("h3/a/text()").string()        context["cat"] = prod.xpath("a/text()").string()        context["date"] = prod.xpath(".//span[@class='td-post-date']/text()").string()        context["author_name"] = prod.xpath(".//span[@class='td-post-author-name']/a/text()").string()        context["author_url"] = prod.xpath(".//span[@class='td-post-author-name']/a/@href").string()        session.queue(Request(url, use="curl"), process_product, dict(context, url=url))    next_url = data.xpath("//link[@rel='next']/@href").string()    if next_url:        session.queue(Request(next_url, use="curl"), process_revlist, dict(context))def process_product(data, context, session):    product = Product()    product.ssid = context['url'].split('/')[-2]    product.url = context['url']    product.category = context['cat']    cats = data.xpath("//div[@class='tdb-block-inner td-fix-index']/span/a")    category = ""    for cat in cats:        if not category:            category = cat.xpath("text()").string()        else:            category = category + "|" + cat.xpath("text()").string()    if category:        product.category = category    product.category = product.category.replace("Gaming", "Games")    prod_name = context['title']    if "Review of the " in prod_name:        prod_name = prod_name.split('Review of the ')[1]    if ": " in prod_name:        prod_name = prod_name.split(': ')[1]    product.name = prod_name    review = Review()    review.title = context['title']    review.ssid = product.ssid    review.type = 'pro'    review.url = context['url']    review.date = context['date']    author_ssid = context['author_url'].split('/')[-2]    review.authors.append(Person(name=context['author_name'], url=context['author_url'], ssid=author_ssid))    conclusion = data.xpath("//div[@class='tdb-block-inner td-fix-index']/*[descendant::text()[parent::*[self::strong or self::*[contains(local-name(), 'h')]]][regexp:test(., 'conclusion|verdict|final thoughts', 'i')]]/following-sibling::p//text()").string(multiple=True)    if conclusion:        review.add_property(type='conclusion', value=conclusion)    excerpt = data.xpath("//div[@class='tdb-block-inner td-fix-index']/p//text()").string(multiple=True)    if excerpt:        if conclusion:            excerpt = excerpt.replace(conclusion, '')        excerpt = excerpt.strip()        review.add_property(type='excerpt', value=excerpt)    overall = data.xpath("//div[@class='td-review-final-score']/text()").string()    if overall:        review.grades.append(Grade(type='overall', value=float(overall), best=10.0))    pros_cons = data.xpath("//div[@class='td-review-summary-content']")    for pro_con in pros_cons:        text = pro_con.xpath(".//text()")        for t in text:            t = t.string().strip()            if t.startswith("+"):                pro = t.replace('+', '').strip()                review.add_property(type='pros', value=pro)            elif t.startswith("-"):                con = t.replace('-', '').strip()                review.add_property(type='cons', value=con)            elif t.startswith('('):                t = t.split('(')[-1].split('. ')[0].split(', ')[0].split("also available")[0].split("Also available")[0].split("Reviewed on the ")[-1].split("Reviewed on ")[-1]                tags = [tag.string().lower() for tag in data.xpath("//a[@class='tdb-entry-category' or @class='tdb-entry-crumb']/text()")]                if "gaming" in tags:                    product.category = "Games" '|' + t.strip()            elif t:                review.add_property(type='summary', value=t)    if excerpt:        product.reviews.append(review)        session.emit(product)