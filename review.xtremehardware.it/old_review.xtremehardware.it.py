#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import timedef run(context, session):   session.sessionbreakers = [SessionBreak(max_requests=20000)]   session.queue(Request('http://www.xtremehardware.com/recensioni/', use="curl"), process_category, dict(url='http://www.xtremehardware.com/recensioni/'))   session.queue(Request('http://www.xtremehardware.com/networking/', use="curl"), process_category, dict(url='http://www.xtremehardware.com/networking/'))   session.queue(Request('http://www.xtremehardware.com/storage/', use="curl"), process_category, dict(url='http://www.xtremehardware.com/storage/'))   session.queue(Request('http://www.xtremehardware.com/cooling/', use="curl"), process_category, dict(url='http://www.xtremehardware.com/cooling/'))   session.queue(Request('http://www.xtremehardware.com/gaming/', use="curl"), process_category, dict(url='http://www.xtremehardware.com/gaming/'))   session.queue(Request('http://www.xtremehardware.com/mobile-review/', use="curl"), process_category, dict(url='http://www.xtremehardware.com/mobile-review/'))   session.queue(Request('http://www.xtremehardware.com/fotografia/', use="curl"), process_category, dict(url='http://www.xtremehardware.com/fotografia/'))def process_check(data, context, session):    script = data.xpath('//script[contains(@src,"antibot/check.php")]//@src').string()    if script:        print script        session.do(Request(script, use="curl"), process_antibot, dict(context))def process_antibot(data, context, session):    time.sleep(7)    print data.content    session.do(Request(context['url'], use="curl"), process_category, dict(context))def process_category(data, context, session):    #process_check(data, dict(url=context['url']), session)    for link in data.xpath('//node()[@class="article-title"]//a'):        url = link.xpath('@href').string()        name = link.xpath('descendant::text()').string()        if url and name:            session.queue(Request(url, use="curl"), process_product, dict(context, url=url,name=name))    next = data.xpath('//a[@title="Avanti"]//@href').string()    if next:        session.queue(Request(next, use="curl"), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    if '-' in product.url:        product.ssid = context['url'].split('-')[-1][:-1]    else:        product.ssid=product.name + product.url    # Category    category = data.xpath('//div[@class="tags"]//a//text()').join('|')    if category:        product.category=category    else:        product.category='unknown'    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.ssid=product.ssid + 'review'    review.type='pro'    # Publish date    pub_date=data.xpath('//meta[@itemprop="dateModified"]//@content').string()    if pub_date:        if 'T' in pub_date: pub_date = pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//meta[@name="author"]//@content').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Excerpt    exce_list = [    '//p[contains(@style,"text-align: justify;")][string-length(normalize-space(.))>100]//text()',    '//div[@style="text-align: justify;"][string-length(normalize-space(.))>100]//text()',    '//body[descendant::a[contains(@href,"tags")]]//p[string-length(normalize-space(.))>100]//text()[string-length(normalize-space(.))>100]',    '//body[descendant::h1[@class="item-title" ]]/text()[string-length(normalize-space(.))>100]']    excerpt = False    for item in exce_list:        excerpt=data.xpath(item).string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:1111]))            break    # Pages    lasturl = False    for page in data.xpath('//select//option'):        title = page.xpath('descendant::text()').string()        url = page.xpath('@value').string()        if title and url:            url = 'http://www.xtremehardware.com' + url            review.properties.append(ReviewProperty(type='pages',value=dict(url=url, title=title)))            if 'onclus' in title: lasturl = url    if lasturl:        session.do(Request(lasturl, use="curl"), process_summary, dict(review=review, excerpt=excerpt))    product.reviews.append(review)    if product.reviews:        session.emit(product)def process_summary(data, context, session):    review = context['review']    # Grades    for g in data.xpath('//table[descendant::img[contains(@src,"stelle.gif")]]//tr'):        name =g.xpath('td[1]//text()').string()        value=g.xpath('td[2]//img//@alt').string()        if value and name:            value = value.replace('stelle','')            value = value.replace('stella','')            value = value.replace('- copia 2','')            value = value.replace('- copia','')            value = value.replace('copia 2','')            value = value.replace('copia','')            value = value.replace('- Copia 2','')            value = value.replace('Copia 2','')            value = value.replace('.gif','')            value = value.replace('-','')            value = value.replace(',','.')            if 'omplessivo' in name:                review.grades.append(Grade(name=name, type='overall', value=value, best=5))            else:                review.grades.append(Grade(name=name, value=value, best=5))    # Summary    summ_list = [    '//p[contains(@style,"text-align: justify;")][string-length(normalize-space(.))>100]//text()',    '//p[string-length(normalize-space(.))>100]//text()',    '//div[@style="text-align: justify;"][string-length(normalize-space(.))>100]//text()',    '//body[descendant::img[contains(@src,"Awards")]]//div[string-length(normalize-space(.))>100]//text()[string-length(normalize-space(.))>100]']    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary and summary != context['excerpt']:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    # Pros    for p in data.xpath('//node()[contains(descendant::text(),"Pro:")]/following::ul[1]//li'):        pros=p.xpath('descendant::text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for c in data.xpath('//node()[contains(descendant::text(),"Contro:")]/following::ul[1]//li'):        cons=c.xpath('descendant::text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    # Award    award = data.xpath('//img[contains(@src,"Awards")][contains(@src,".png")]//@src').string()    if award:       review.properties.append(ReviewProperty(type='awards', value=dict(image_src=award)))