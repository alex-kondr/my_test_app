# -*- coding: utf8 -*-from agent import *from models.products import *def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.ka.se/10-spelnyheter-for-hela-familjen'), process_product1, dict(url='http://www.ka.se/10-spelnyheter-for-hela-familjen'))    session.queue(Request('http://www.ka.se/sa-bra-ar-arets-spelnyheter'), process_product2, dict(url='http://www.ka.se/sa-bra-ar-arets-spelnyheter'))    session.queue(Request('http://www.ka.se/atta-spelnyheter-att-lira-i-jul'), process_product3, dict(url='http://www.ka.se/atta-spelnyheter-att-lira-i-jul'))def process_product1(data, context, session):    for link in data.xpath('//div[@class="ContentBody"]/p'):        product=Product()        # Name        name = link.xpath('u//text()').string()        if name:            product.name=name        product.url=context['url']        product.ssid=product.name + product.url        product.category='Board Games'        product.manufacturer=''        review=Review()        review.product=product.name        review.url=product.url        review.type='pro'        review.ssid=product.ssid        # Publish date        review.date='unknown'        # Author        review.authors.append(Person(name='ka.se', ssid='ka.se'))        # Grades        overall=link.xpath('strong[contains(text(), "Betyg")]/following-sibling::text()[1]').string()        if overall:            review.grades.append(Grade(name='Overall Rating', type='overall', value=float(overall), best=5))        # Summary        summary=link.xpath('strong[contains(text(), "Går ut på")]/following-sibling::text()[1]').string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))        # Conclusion        conclusion = link.xpath('strong[contains(text(), "Övrigt")]/following-sibling::text()[1]').string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))        # Pros        pros=link.xpath('strong[contains(text(), "Plus")]/following-sibling::text()[1]').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))        # Cons        cons=link.xpath('strong[contains(text(), "Minus")]/following-sibling::text()[1]').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))        if summary and name:            product.reviews.append(review)        if product.reviews:            session.emit(product)def process_product2(data, context, session):    for link in data.xpath('//div[@class="ContentBody"]/h2'):        product=Product()        # Name        name = link.xpath('descendant::text()').string()        if name:            product.name=name        product.url=context['url']        product.ssid=product.name + product.url        product.category='Board Games'        product.manufacturer=''        review=Review()        review.product=product.name        review.url=product.url        review.type='pro'        review.ssid=product.ssid        # Publish date        review.date='unknown'        # Author        review.authors.append(Person(name='ka.se', ssid='ka.se'))        # Grades        overall=link.xpath('following-sibling::p[contains(img//@src,"betyg")][1]//img//@src').string()        if overall:            score = overall.split('betyg')[1].replace('.jpg','')            if '_' in score: score=score[:-2]            review.grades.append(Grade(name='Overall Rating', type='overall', value=float(score), best=5))        # Summary        summary=link.xpath('following-sibling::p[contains(strong//text(),"Går ut på")][1]/text()').string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))        # Conclusion        conclusion = link.xpath('following-sibling::p[contains(strong//text(),"Övrigt")][1]/text()').string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))        # Pros        pros=link.xpath('following-sibling::p[contains(strong//text(),"Plus")][1]/text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))        # Cons        cons=link.xpath('following-sibling::p[contains(strong//text(),"Minus")][1]/text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))        if summary and name:            product.reviews.append(review)        if product.reviews:            session.emit(product)def process_product3(data, context, session):    for link in data.xpath('//div[@class="ContentBody"]/h2'):        product=Product()        # Name        name = link.xpath('text()').string()        if name:            product.name=name        product.url=context['url']        product.ssid=product.name + product.url        product.category='Board Games'        product.manufacturer=''        review=Review()        review.product=product.name        review.url=product.url        review.type='pro'        review.ssid=product.ssid        # Publish date        review.date='unknown'        # Author        review.authors.append(Person(name='ka.se', ssid='ka.se'))        # Grades        overall=link.xpath('following-sibling::p[1]/strong[contains(text(), "Betyg")]/following-sibling::text()[1]').string()        if overall:            review.grades.append(Grade(name='Overall Rating', type='overall', value=float(overall), best=5))        # Summary        summary=link.xpath('following-sibling::p[1]/strong[contains(text(), "Går ut på")]/following-sibling::text()[1]').string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))        # Conclusion        conclusion = link.xpath('following-sibling::p[1]/strong[contains(text(), "Övrigt")]/following-sibling::text()[1]').string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))        # Pros        pros=link.xpath('following-sibling::p[1]/strong[contains(text(), "Plus")]/following-sibling::text()[1]').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))        # Cons        cons=link.xpath('following-sibling::p[1]/strong[contains(text(), "Minus")]/following-sibling::text()[1]').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))        if summary and name:            product.reviews.append(review)        if product.reviews:            session.emit(product)