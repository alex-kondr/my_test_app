from agent import *from models.products import *def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=10000)]    session.queue(Request('https://cairosales.com/ar/', use='curl'), process_frontpage, dict())def process_frontpage(data, context, session):    cats = data.xpath("//div[@class='ets_mm_block mm_block_type_category']/h4/a")    for cat in cats:        name = cat.xpath('.//text()').string()        url = cat.xpath('@href').string()        session.queue(Request(url, use='curl'), process_category, dict(cat=name))def process_category(data, context, session):    prods = data.xpath("//a[@class='product_img_link']")    for prod in prods:        url = prod.xpath("@href").string()        session.queue(Request(url, use='curl'), process_product, dict(context, url=url))    next_url = data.xpath("//a[@rel='next']/@href").string()    if next_url:        session.queue(Request(next_url, use='curl'), process_category, dict(context))def process_product(data, context, session):    is_category = data.xpath("//div[@class='sortPagiBar clearfix']")    if is_category:        return  # Some products redirect to category    product = Product()    product.name = data.xpath("//head[1]/title/text()").string()    product.sku = data.xpath("//meta[@itemprop='sku']/@content").string()    product.ssid = product.sku    product.url = context['url']    product.category = context['cat']    manufacturer = data.xpath("//meta[@property='product:brand']/@content").string()    if manufacturer:        product.manufacturer = manufacturer.strip("-") or None    product.add_property(type='id.manufacturer', value=product.sku)    revs = data.xpath("//div[@class='review-line-comment']")    for rev in revs:        review = Review()        review.title = rev.xpath("p[1]//text()").string(multiple=True)        review.type = 'user'        review.url = context['url']        review.date = rev.xpath(".//ancestor::body[1]/text()[not(self::strong)]").string()        author_name = rev.xpath("ancestor::body[1]/preceding-sibling::body[1]//div[@class='review-line-name text-muted']/strong//text()").string(multiple=True)        if author_name:            review.authors.append(Person(name=author_name, ssid=author_name))        grade_overall = rev.xpath("ancestor::body[1]//div[@class='left text-size-07']/span//text()").string()        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        excerpt = rev.xpath("p[2]//text()").string(multiple=True)        if excerpt:            excerpt = excerpt.strip(".")            if excerpt:                review.add_property(type='excerpt', value=excerpt)                if author_name:                    review.ssid = review.digest()                else:                    review.ssid = review.digest(excerpt)        eng_review = False        for eng_letter in ['e', 'y', 'u', 'i', 'o', 'a']:            if excerpt and eng_letter in excerpt:                eng_review = True                break            if review.title and eng_letter in review.title:                eng_review = True                break        if not eng_review and excerpt:            product.reviews.append(review)    if product.reviews:        session.emit(product)