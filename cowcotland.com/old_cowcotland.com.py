import stringfrom agent import *from models.products import *import redebug = Truedef process_frontpage(data, context, session):    for cat in data.xpath("//div[@id='leftcol']//a[img/@src[regexp:test(., 'images/content_menu')]]"):        context['category'] = cat.xpath("img/@alt[string-length(normalize-space(.))>0]").string()        cat_url = cat.xpath("@href").string()        if context['category'] and cat_url:            session.queue(Request(cat_url), process_category, context)def process_category(data, context, session):    for p in data.xpath("//div[@id='leftcol']/div[@class='text']/div[@class='live_news2']/div[@class='live_infos']"):        context['name'] = p.xpath(".//span[@class='title']/a//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath(".//span[@class='title']/a/@href").string()        context['excerpt'] = p.xpath("text()[string-length(normalize-space(.))>0]").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//div[@class='pg']/span[@class='courante']/following-sibling::a[regexp:test(., '\d')][1]/@href").string()    if next:        session.queue(Request(next), process_category, context)def process_product(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    product.category = Category(name = re_search_once('(.+).\(', context['category']))    product.ssid = re_search_once('\/(\d+)\/', product.url)    review = Review()    review.ssid = product.ssid    review.url = product.url    review.type = 'pro'    date = data.xpath("//div[@id='article_infos']//text()[regexp:test(., '\d\d\d\d')]").string()    if date:        review.date = date.replace('PubliÃ© le ', '')    excerpt = data.xpath("//div[@class='artcontent']/text()[string-length(normalize-space(.))>100][regexp:test(., '^\s*[A-Z]')]").string()    if not excerpt:        excerpt = context['excerpt']    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    user_data = data.xpath("//div[@id='article_infos']//a[last()]").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('membre(\d+)', user.profile_url)        if user.ssid:            review.authors.append(user)    summary_url = None    for page in data.xpath("//select[@name='selpage']/option"):        title = page.xpath(".//text()[string-length(normalize-space(.))>0]").string()        url = page.xpath("@value").string()        if title and url:            url = "http://www.cowcotland.com" + url            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pages'), value = {'url': url, 'title': title}))            summary_url = url    if summary_url:        context['review'] = review        context['product'] = product        session.queue(Request(summary_url), process_summary_page, context)    else:        if review.date:            product.reviews.append(review)            session.emit(product)def process_summary_page(data, context, session):    review = context['review']    product = context['product']    summary = data.xpath("//div[@class='artcontent']//text()[string-length(normalize-space(.))>100][regexp:test(., '^[^ ]')]").string()    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Conclusion"))    for pros in data.xpath("//i[regexp:test(., 'Pour')]/ancestor::tr[1]/following-sibling::tr[1]/td[1]//p"):        p_value = pros.xpath(".//text()[string-length(normalize-space(.))>0]").string(multiple=True)        if p_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "Pour"))    for cons in data.xpath("//i[regexp:test(., 'Contre')]/ancestor::tr[1]/following-sibling::tr[1]/td[2]//p"):        c_value = cons.xpath(".//text()[string-length(normalize-space(.))>0]").string(multiple=True)        if c_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "Contre"))    product.reviews.append(review)    session.emit(product)def run(context, session):     sb = SessionBreak()    sb.max_requests = 7000    session.sessionbreakers = [ sb ]    session.queue(Request('http://www.cowcotland.com/articles/'), process_frontpage, {})