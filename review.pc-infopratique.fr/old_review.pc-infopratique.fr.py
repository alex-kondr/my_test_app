from agent import *from models.products import *import redef getSentences(txt):    txt = txt.replace('\n','')    txt = re.sub(r"([^A-Z][.!?]) *([A-Z])", r"\1\n\2", txt)    return txt.split('\n')def getAtLeastNChars(txt, n=300):    txt = getSentences(txt)    par = ''    for i in reversed(txt):        par = i + " " + par        if len(par) >= n:            return par    return pardef process_page(data, context, session):    for u in data.xpath('//font[@color="#000000" and @style="FONT-SIZE: 11px; FONT-FAMILY: verdana,helvetica"]/b/a[regexp:test(text(),"Test")]'):        url = u.xpath('@href').string()        rName = u.xpath('text()').string()        session.queue(Request(url), process_post, dict(context, rUrl=url,rName=rName))    if data.xpath('//a[img[contains(@src,"images/bout_suivant.gif")]]'):        pUrl = data.xpath('//a[img[contains(@src,"images/bout_suivant.gif")]]/@href').string()        session.queue(Request(pUrl), process_page, dict(context))                    def process_post(data, context, session):    rTitle = context['rName']#data.xpath('//div[@class="post"]/h2//text()').string()    date = data.xpath('//font[@color="#666666" and @style="FONT-SIZE: 10px; FONT-FAMILY: arial,helvetica" and contains(text(),"Dossier publi")]/font[2]/text()').string()    author = data.xpath('//font[@color="#666666" and @style="FONT-SIZE: 10px; FONT-FAMILY: arial,helvetica" and contains(text(),"Dossier publi")]/font[1]/text()').string()       pName = rTitle.replace("Test","")    pCategory = "Computers"    excerpt = data.xpath('/descendant::p[string-length(normalize-space(.))>150][1]//text()').string(multiple=True)    review = Review()    review.title = rTitle    review.ssid = review.title    review.date = date    review.type = "pro" #site's authors...    if author:        review.authors.append(Person(name=author,ssid=author))#    review.properties.append(ReviewProperty(type="conclusion", value=concl))    if excerpt: review.properties.append(ReviewProperty(type="excerpt", value=excerpt))    review.url = context['rUrl']#    review.grades.append(Grade(value=grade, best = 11, worst=0,name = 'Grade'))    pr = Product(name=pName, ssid=review.ssid, url=review.url)    pr.reviews.append(review)#    pr.manufacturer = "unknown"    pr.category = pCategory     #url-props    urls = []    urls.append(context['rUrl'])    for u in data.xpath('//font[@color="#000000" and contains(text()," la page :")]/following-sibling::font[1]/a'):        urls.append(u.xpath('@href').string())#    getUrls(data, dict(context,pr=pr), session,urls)    durls=[]    i=1    for u in urls:        durls.append({"url":u,"title":rTitle+" - page "+str(i)})        i=i+1    review.properties.append(ReviewProperty(type="pages", value=durls))    if len(urls)>1:        session.do(Request(urls[-2]), process_getConcl, dict(context,review=review))    else:        process_getConcl(data, dict(context,review=review), session)    session.emit(pr) def process_getConcl(data, context, session):    concl = data.xpath('/descendant::p[string-length(normalize-space(.))>250][1]//text()').string(multiple=True)    if concl and len(concl)>15:        context['review'].properties.append(ReviewProperty(type="conclusion", value=concl))    pros = data.xpath('//font[@size="1"]/strong[text()="On aime"]/following::td[1]//text()').strings()    cons = data.xpath('//font[@size="1"]/strong[text()="On n’aime pas"]/following::td[1]//text()').strings()       cons = [f.strip().strip('+-: ') for f in cons if f.strip()]    pros = [f.strip().strip('+-: ') for f in pros if f.strip()]    cons = [f.strip().strip('+-: ') for f in cons if f.strip()]    pros = [f.strip().strip('+-: ') for f in pros if f.strip()]        if pros:        context['review'].properties.append(ReviewProperty(name="On aime", type="pros", value=pros))    if cons :        context['review'].properties.append(ReviewProperty(name="On n’aime pas", type="cons", value=cons))    for award in data.xpath("descendant::img[regexp:test(@src,'award')]"):        src = award.xpath("@src").string()        if src:           context['review'].properties.append(ReviewProperty(type='awards', value=dict(image_src=src)))def run(context, session):   session.queue(Request('http://www.pc-infopratique.com/dossier-debutr-0.html'), process_page, {})