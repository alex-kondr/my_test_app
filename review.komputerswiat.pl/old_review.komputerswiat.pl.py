#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import time, randomdebug = Truedef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://www.komputerswiat.pl/recenzje/sprzet?ajax=1&page=0', use="curl"), process_productlist, dict(page=0))def process_productlist(data, context, session):    cnt = 0    for link in data.xpath('//div[contains(@class,"listItem")]'):        url=link.xpath('descendant::a//@href').string()        name=link.xpath('descendant::h2//text()').string()        if url and name:# and not session.seen(url):            cnt += 1            bad_list = ['. Test',' fit, ',' - ',' – ',', ','. ']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            bad_list2 = ['Test','notebooka','','','']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name))    # Next page    if cnt > 0:        page = context['page'] + 1        next = 'https://www.komputerswiat.pl/recenzje/sprzet?ajax=1&page=' + str(page)        session.queue(Request(next, use="curl"), process_productlist, dict(context, page=page))    time.sleep(random.randint(20,40))def process_product(data, context, session):    product=Product()    product.url=context['url']    product.name=context['name']    # Category    category = data.xpath('//span[@class="relatedTopic"]//a//text()').join('|')    if category:        product.category = category    else:        product.category = 'unknown'    # Ssid    ssid = data.xpath('//meta[@name="DC.Identifier"]//@content').string()    if ssid:        product.ssid = ssid    else:        product.ssid = product.name + product.url    review=Review()    review.product=product.name    review.url=product.url    review.ssid=product.ssid + ' review'    review.type='pro'    # Title    title = data.xpath('//meta[@property="og:title"]//@content').string()    if title:        review.title = title    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]/@content').string()    if pub_date:        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        if '+' in pub_date: pub_date=pub_date.split('+')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    author='Komputer Świat' or data.xpath('//div[@class="articleDetail mainContent"]//span[@property="name"]//text()').string()    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    over_list = [    '//div[contains(@class, "editor_rating")]//div[@class="number"]/text()']    for item in over_list:        overall=data.xpath(item).string()        if overall:            review.grades.append(Grade(name='Overall Rating', type='overall', value=float(overall), best=100))    # Conclusion    conc_list = [    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Podsumowanie|podsumowanie)")]/following-sibling::p[1]//text()']    for item in conc_list:        conclusion = data.xpath(item).string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))            break    # Excerpt    exce_list = [    '//meta[@property="og:description"]//@content',    '//div[@class="detailContentWrapper"]//p//text()']    for item in exce_list:        excerpt=data.xpath(item).string(multiple=True)        if excerpt:            excerpt = excerpt.replace('»','')            review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:111]+'...'))            break    product.reviews.append(review)    if product.reviews:        session.emit(product)    time.sleep(random.randint(30,60))