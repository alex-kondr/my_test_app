#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import simplejsondef run(context, session):    session.queue(Request('https://api.mobil.se/api/v1/article/?orderBy=published&htmlText=1&query=visibility_status:P%20AND%20published:[*%20NOW]%20AND%20NOT%20hidefromfp_time:[*%20NOW]%20AND%20(tag:produkttester%20OR%20tag:%22j%C3%83%C2%A4mf%C3%83%C2%B6rande%20tester%22)&fields=*,-bodytext,-ai_*,-bodytextHTML&limit=9999&page=2&site_id=2'), process_getCount, dict())def process_getCount(data, context, session):    if '"totalCount":' in data.content:        json_data = simplejson.loads(data.content)        pages = (json_data['totalCount']/280)        for x in xrange(1, pages + 2):            url = 'https://api.mobil.se/api/v1/article/?orderBy=published&htmlText=1&query=visibility_status:P%20AND%20published:[*%20NOW]%20AND%20NOT%20hidefromfp_time:[*%20NOW]%20AND%20(tag:produkttester%20OR%20tag:%22j%C3%83%C2%A4mf%C3%83%C2%B6rande%20tester%22)&fields=*,-bodytext,-ai_*,-bodytextHTML&limit=280&page='+str(x)+'&site_id=2'        #url = url % prodCount            session.queue(Request(url), process_revlist, dict())def process_revlist(data, context, session):    print data.content    json_data = simplejson.loads(data.content)    prods = json_data['result']    for prod in prods:        title = prod['title']        url = 'https://www.mobil.se' + prod['published_url']        pid = str(prod['id'])        revDate = str(prod['created'])        revAuthor = str(prod['created_by']).replace(',','')        category = str(prod['tags']).replace(', ','|')        if url and title and pid and revDate and revAuthor and category:            session.queue(Request(url), process_review, dict(url=url, title=title, category=category, pid=pid, revAuthor=revAuthor, revDate=revDate))def process_review(data, context, session):    product = Product()    product.name = context['title']    product.url = context['url']    product.category = context['category']    product.ssid = context['pid'] or data.xpath("//div[regexp:test(@class,'pane-node-nid')]/text()").string()    rating = ''    jstxt = data.xpath("//script[regexp:test(text(),'itemReviewed')]/text()").string()    if jstxt:        fdata = simplejson.loads(jstxt)        name = fdata['itemReviewed']['name']        if name:            product.name = name        rating = fdata['reviewRating']['ratingValue']        best = fdata['reviewRating']['bestRating']    else:        print context['url']        return    review = Review()    review.title = context['title']    review.url = product.url    review.ssid = product.ssid + ' review'    review.type = 'pro'    review.date = context['revDate']    author = context['revAuthor']    if author:        review.authors.append(Person(name=name, ssid=name))    summary = data.xpath('//node()[@class="subtitle"]//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))    excerpt = data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if summary == excerpt:        excerpt = data.xpath('//div[contains(@class,"bodytext")]//p[text()][1]//text()').string()    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    prcns = []    for pro in data.xpath('//div[@class="pros"]'):        line = pro.xpath("descendant::text()[string-length(normalize-space(.))>1]").string(multiple=True)        if line and line not in prcns:            review.properties.append(ReviewProperty(type='pros', value=line))            prcns.append(line)    for con in data.xpath('//div[@class="cons"]'):        line = con.xpath("descendant::text()[string-length(normalize-space(.))>1]").string(multiple=True)        if line and line not in prcns:            review.properties.append(ReviewProperty(type='cons', value=line))            prcns.append(line)    rates = []    for g in data.xpath('//div[@class="score"][1]//dl//dt'):        title = g.xpath('text()').string()        valuetxt = g.xpath('following-sibling::dd[2]//text()').string()        if title and valuetxt and title not in rates and title != 'Totalbetyg':            value = re_search_once('(\d)\/', valuetxt)            if value:                review.grades.append(Grade(name=title, value=float(value), best=10))                rates.append(title)    if rating:        product.reviews.append(review)        review.grades.append(Grade(name='Totalbetyg', type='overall', value=float(rating), best=float(best)))    awarddict = {'toppbetyg':'https://www.mobil.se/sites/mobil.se/themes/mobil/css/img/mobil_toppbetyg.png', 'rekommenderar':'https://www.mobil.se/sites/mobil.se/themes/mobil/css/img/mobil_rekommenderar.png'}    award = data.xpath("//div[regexp:test(@class,'factbox grades')]//dt[not(normalize-space(.))]/@class").string()    if award:        review.properties.append(ReviewProperty(type='awards', value=dict(imagesrc=awarddict[award], name=award)))    if product.reviews:        session.emit(product)