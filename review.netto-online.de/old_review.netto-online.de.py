from agent import *from models.products import *import simplejsondef run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=10000)]    session.queue(Request("https://www.netto-online.de/", force_charset="utf-8"), process_frontpage, dict())def process_frontpage(data, context, session):    cats = data.xpath("//a[contains(@class,'level-0') and not(regexp:test(normalize-space(.), 'Angebote|Sale|Rezepte|Reisen & mehr', 'i'))]")    for cat in cats:        name = cat.xpath(".//span//text()").string()        url = cat.xpath("@href").string()        session.queue(Request(url, force_charset="utf-8"), process_productlist, dict(cat=name))def process_productlist(data, context, session):    all_productlist = data.xpath("//div[@class='teaser__box']//a[contains(.,'Alle')]/@href").string()    if all_productlist:        session.do(Request(all_productlist, force_charset="utf-8"), process_productlist, dict())        return    prods = data.xpath("//li[contains(@class,'product-list__item')]")    for prod in prods:        revs = prod.xpath(".//div[@class='product__rating']//span[@class='point full']").string()        name = prod.xpath(".//div[contains(@class,'product__title__inner')]//text()").string(multiple=True)        url = prod.xpath(".//a[contains(@class,'product') and not(contains(@class,'btn-primary'))]/@href").string()        sku = prod.xpath(".//a[contains(@class,'product') and not(contains(@class,'btn-primary'))]/@data-sku").string()        if revs:            session.queue(Request(url), process_product, dict(context, url=url, name=name, sku=sku))    next_url = data.xpath("//ul[@class='pagination']//a[contains(@class,'next-page')]/@href").string()    if next_url:        session.queue(Request(next_url, force_charset="utf-8"), process_productlist, dict(context))def process_product(data, context, session):    json_body = data.xpath("//script[contains(., 'baseData')]//text()").string().split("(", 1)[-1].replace(");", "")    if not json_body:        return    resp = simplejson.loads(json_body.strip())    product = Product()    product.name = context['name']    product.url = context['url']    product.category = resp['ecommerce']['detail']['products'][0]['dimension14'].split("Sortiment/")[-1].replace("/", "|")    product.ssid = context['sku']    product.sku = product.ssid    product.manufacturer = data.xpath("//div[@itemscope='brand']//span[@itemprop='name']//text()").string(multiple=True)    ekomi = data.xpath("//div[contains(@class,'rating-box__ekomi')]//a[@class='rating-box__ekomi__link']")    if not ekomi:        return    revs = data.xpath("//div[contains(@class,'rating-comment-box__info')]")    for rev in revs:        review = Review()        review.title = product.name        review.url = product.url        review.type = 'user'        review.date = rev.xpath("following::span[@itemprop='datePublished'][1]/@content").string()        grade_overall = rev.xpath(".//span[@itemprop='ratingValue']/text()").string()        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        author_name = rev.xpath(".//span[@itemprop='author']//text()").string(multiple=True).strip()        if author_name:            review.authors.append(Person(name=author_name, ssid=author_name))        excerpt = rev.xpath("following::p[@class='rating-comment-box__comment'][1]//text()").string(multiple=True)        if excerpt:            review.add_property(type='excerpt', value=excerpt)            review.ssid = review.digest() if author_name else review.digest(excerpt)            product.reviews.append(review)    if product.reviews:        session.emit(product)