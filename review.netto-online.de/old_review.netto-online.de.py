from agent import *from models.products import *import reXCAT = ['Neuheiten', 'Angebote', 'Reisen & mehr', 'Sale', 'Bestseller', 'Rezepte']OPTIONS = "--compressed -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0' -H 'Accept-Language: uk-UA,uk;q=0.8,en-US;q=0.5,en;q=0.3'"def strip_namespace(data):    tmp = data.content_file + ".tmp"    out = file(tmp, "w")    for line in file(data.content_file):        line = line.replace('<ns0', '<')        line = line.replace('ns0:', '')        line = line.replace(' xmlns', ' abcde=')        out.write(line + "\n")    out.close()    os.rename(tmp, data.content_file)def remove_emoji(string):    emoji_pattern = re.compile("["                               u"\U0001F600-\U0001F64F"  # emoticons                               u"\U0001F300-\U0001F5FF"  # symbols & pictographs                               u"\U0001F680-\U0001F6FF"  # transport & map symbols                               u"\U0001F1E0-\U0001F1FF"  # flags (iOS)                               u"\U00002500-\U00002BEF"  # chinese char                               u"\U00002702-\U000027B0"                               u"\U00002702-\U000027B0"                               u"\U000024C2-\U0001F251"                               u"\U0001f926-\U0001f937"                               u"\U00010000-\U0010ffff"                               u"\u2640-\u2642"                               u"\u2600-\u2B55"                               u"\u200d"                               u"\u23cf"                               u"\u23e9"                               u"\u231a"                               u"\ufe0f"  # dingbats                               u"\u3030"                               "]+", flags=re.UNICODE)    return emoji_pattern.sub(r'', string)def run(context, session):    session.browser.use_new_parser = True    session.sessionbreakers = [SessionBreak(max_requests=7000)]    session.queue(Request("https://www.netto-online.de/", use='curl', options=OPTIONS, force_charset="utf-8"), process_frontpage, dict())def process_frontpage(data, context, session):    strip_namespace(data)    cats = data.xpath('//li[contains(@class, "main-navigation__list")]')    for cat in cats:        name = cat.xpath('div/a//text()').string(multiple=True)        if name not in XCAT:            sub_cats = cat.xpath('.//div[contains(@class, "sub__categories")]')            for sub_cat in sub_cats:                sub_name = sub_cat.xpath('a//text()').string(multiple=True)                if sub_name not in XCAT:                    sub_cats1 = sub_cat.xpath('.//li[contains(@class, "inner-list")]/a')                    if sub_cats1:                        for sub_cat1 in sub_cats1:                            sub_name1 = sub_cat1.xpath('text()').string()                            if sub_name1 not in XCAT and 'Alle ' not in sub_name1:                                url = sub_cat1.xpath("@href").string()                                session.queue(Request(url, use='curl', options=OPTIONS, force_charset="utf-8"), process_prodlist, dict(cat=name + '|' + sub_name + '|' + sub_name1))                    else:                        url = cat.xpath('a/@href').string()                        session.queue(Request(url, use='curl', options=OPTIONS, force_charset="utf-8"), process_prodlist, dict(cat=name + '|' + sub_name))def process_prodlist(data, context, session):    strip_namespace(data)    prods = data.xpath('//a[contains(@class, "product__content")]')    for prod in prods:        name = prod.xpath('.//div[contains(@class, "product__title")]/text()').string()        url = prod.xpath('@href').string()        rating = prod.xpath('.//div[@class="product__rating"]')        if rating:            session.queue(Request(url, use='curl', options=OPTIONS, force_charset="utf-8"), process_product, dict(context, name=name, url=url))    next_url = data.xpath('//a[@title="NÃ¤chste Seite"]/@href').string()    if next_url:        session.queue(Request(next_url, use='curl', options=OPTIONS, force_charset="utf-8"), process_prodlist, dict(context))def process_product(data, context, session):    strip_namespace(data)    product = Product()    product.name = context['name']    product.url = context['url']    product.ssid = product.url.split('-')[-1]    product.sku = product.ssid    product.category = context['cat']    product.manufacturer = data.xpath("//div[@itemscope='brand']//span[@itemprop='name']//text()").string(multiple=True)    ean = data.xpath('//span[@class="artikel-ean"]/text()').string()    if ean:        ean = ean.split()[-1]        if ean.isdigit() and len(ean) > 10:            product.add_property(type='id.ean', value=ean)    revs = data.xpath('//section[contains(@class,"rating-comment-box")]')    for rev in revs:        review = Review()        review.type = 'user'        review.url = product.url        review.date = rev.xpath('.//span[@itemprop="datePublished"]/@content').string()        author_name = rev.xpath('.//strong[@itemprop="name"]/text()').string()        if author_name:            review.authors.append(Person(name=author_name, ssid=author_name))        grade_overall = rev.xpath('.//div[contains(@class, "rating rating")]/@class').string()        if grade_overall:            grade_overall = grade_overall.split('rating-')[-1].split('-')[0]            if grade_overall.isdigit() and float(grade_overall) > 0:                review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        hlp_yes = rev.xpath('.//span[contains(@class, "rate pro")]/text()').string()        if hlp_yes and int(hlp_yes) > 0:            review.add_property(type='helpful_votes', value=int(hlp_yes))        hlp_no = rev.xpath('.//span[contains(@class, "rate contra")]/text()').string()        if hlp_no and int(hlp_no) > 0:            review.add_property(type='not_helpful_votes', value=int(hlp_no))        excerpt = rev.xpath('.//p[@itemprop="reviewBody"]//text()').string(multiple=True)        if excerpt:            excerpt = remove_emoji(excerpt).strip(' +-.*"')            if len(excerpt) > 2:                review.add_property(type='excerpt', value=excerpt)                review.ssid = review.digest() if author_name else review.digest(excerpt)                product.reviews.append(review)    if product.reviews:        session.emit(product)# no next page