from agent import *from models.products import *import simplejsonimport reXCAT = ["Mouse", "Review", "MT MAG", "True Wireless", "iOS", "Devolver Digital", "CTR", "DLC", "Chile", "Críticas", "Opiniones", 'Reseña']XWORD = ['Reseña |', 'Review |', '']def run(context, session):    options = "--compressed -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:122.0) Gecko/20100101 Firefox/122.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' -H 'Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3' -H 'Accept-Encoding: gzip, deflate, br' -H 'Referer: https://www.latercera.com/etiqueta/review/' -H 'Connection: keep-alive' -H 'Cookie: RT=\"z=1&dm=latercera.com&si=fnt6709njfo&ss=lsg09oxk&sl=0&tt=0\"; _gcl_au=1.1.411228316.1707565263; _ga_FDQ7VD1EY9=GS1.1.1707565263.1.0.1707565321.2.0.0; _ga=GA1.1.1546733935.1707565264; _ga_88D5F7VXXD=GS1.1.1707565263.1.0.1707565263.60.0.0; _ga_VR5DQXJ0Q9=GS1.1.1707565263.1.0.1707565321.2.0.0; __gads=ID=a7ec57c12c7814ef:T=1707565263:RT=1707565263:S=ALNI_MZ0sKIEI-CczJF5LCKKilxF1PzUDQ; __gpi=UID=00000d551480622a:T=1707565263:RT=1707565263:S=ALNI_MbJ3mTHfzsUTvxtBtA8vatukXuo8w; __eoi=ID=e97c8b811f6b12be:T=1707565264:RT=1707565264:S=AA-AfjZGiJzhVe19jj2VSKnU97a_; _pubcid=a084c734-12e5-4675-8f0b-e37d63efe1e9; _cb=BqfO86BFfevjBNmBSp; _chartbeat2=.1707565266166.1707565266166.1.DEMLo-fcZymCm2B7cDj9JjUD81y2U.1; _cb_svref=external; _omappvp=X2QVM37tfKz0xgsJyQDwMbJWpeCknWiawvIqSBLh7DyeHv5BgfMOtnO3UpobojnoCvCCx35KtPL6qTC8CTqw0HSHaRvpSvhy; _omappvs=1707565266488; FCNEC=%5B%5B%22AKsRol88yfuFiCIqDvZyrnLpU2pbPOscktM753PbRvYZmWD3FiXW0r18TlvWPaUdqItDsnmjXa2ZkQXbLzhUFM4q9LimTrnE_4WN3K2tBkWxw_Qc96vZKmA82W7pGl4F1tsH91S4lu_4kg2XYHAfVkmYvGAxL97MXg%3D%3D%22%5D%5D; _fbp=fb.1.1707565267172.2067771460; TawkConnectionTime=0; twk_idm_key=mHf4Uzjkxdr6n1mt7xDhz; _chartbeat5=875|3071|%2Fetiqueta%2Freview%2F|https%3A%2F%2Fwww.latercera.com%2Fetiqueta%2Freview%2Fpage%2F2|Cu4-HZDjFgqMC-TfX3CQdWvcox2N6||c|Dc7Mi20158lCWcoElCSwSY2Cv4sD9|latercera.com|; AKA_A2=A' -H 'Upgrade-Insecure-Requests: 1' -H 'Sec-Fetch-Dest: document' -H 'Sec-Fetch-Mode: navigate' -H 'Sec-Fetch-Site: same-origin' -H 'Sec-Fetch-User: ?1' -H 'TE: trailers'"    session.queue(Request("https://www.latercera.com/etiqueta/review/", use="curl", options=options, max_age=0), process_revlist, dict())def process_revlist(data, context, session):    print('Starting...')    revs = data.xpath('//div[@class="headline | width_full hl"]//a')    print(data.content)    p = 1    for rev in revs:        url = rev.xpath("@href").string()        if url:            print("_____"*200)            print('Prod ', p)            print(url)            print('_____'*200)            p += 1            #session.queue(Request(url, use="curl", force_charset="utf-8"), process_review, dict(context, url=url))    next_url = data.xpath("//a[contains(text(),'Siguiente')]/@href").string()    if next_url:        print('*****'*200)        print(next_url)        session.queue(Request(next_url, use="curl"), process_revlist, dict(context))    print('Ending.')def process_review(data, context, session):    if not data.xpath("//div[@class='single-content']"):        return    product = Product()    title = data.xpath("//meta[@property='og:title']/@content").string()    for word in XWORD:        if word in title:            prod_name = title.split(word)[-1].split(':')[0].split(',')[0].strip()            if prod_name:                product.name = title.split('Review |')[-1].strip()            break    ssid = context["url"].split("/")[-2]    print(ssid)    if '-' not in ssid:        ssid = context['url'].split('/')[-3]    product.ssid = ssid    product.url = context["url"]    info = data.xpath("//script[contains(text(), 'window.Fusion')]/text()").string()    info = info.split("Fusion.globalContent=")[-1].split(";Fusion.globalContentConfig")[0]    info = simplejson.loads(info)    tags = info["taxonomy"]["tags"]    for tag in tags:        tag = tag["text"]        if tag.title() not in title.title() and ':' not in tag and not any(t.isdigit() for t in tag) and tag not in XCAT and (not len(tag.split()) > 1 or (len(tag.split()) > 1 and not any(True for tt in tag.split() if tt.title() in title.title()))):            product.category = tag.title()            break    if not product.category or product.category == "Review":        product.category = "Reviews"    review = Review()    review.type = "pro"    review.title = title    review.url = context["url"]    review.ssid = product.ssid    review.date = info.get('created_date')    if review.date:        review.date = review.date.split('T')[0]    author = data.xpath("//div[@class='byline | isText width_full']/div[@class='name']/a").first()    if author:        url = author.xpath("@href").string()        name = author.xpath("descendant::text()").string(multiple=True)        if name:            review.authors.append(Person(name=name, ssid=name, profile_url=url))    grade = info.get('subheadlines', {}).get('basic')    if grade:        grade_overall = grade.count('⭐')        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))    excerpt = ""    review_body = info["content_elements"]    for item in review_body:        if item["type"] == "text":            excerpt += re.sub("<[^>]*>", '', item["content"])    if excerpt:        review.add_property(type="excerpt", value=excerpt)    summary = info["description"]["basic"]    if summary:        review.add_property(type="summary", value=summary)    if excerpt:        product.reviews.append(review)        session.emit(product)