#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://www.golfdigest.com/play/equipment/hot-list'), process_first_page, {})    url = 'https://www.golfdigest.com/gallery/hot-list-golf-balls'    session.queue(Request(url), process_products, dict(context, url=url))def process_first_page(data, context, session):    for link in data.xpath('//div[@class="m-Card__a-Headline"]//a'):        url=link.xpath('@href').string()        category=link.xpath('descendant::text()').string(multiple=True)        if url and category:            category = 'Golf Clubs | ' + category            session.queue(Request(url), process_category, dict(category=category))def process_category(data, context, session):    for link in data.xpath('//div[@class="o-LandingReviewList__m-Card m-Card"]'):        url=link.xpath('a//@href').string()        name=link.xpath('descendant::node()[regexp:test(name(),"h\d")]//text()').string(multiple=True)        if url and name:            session.queue(Request(url), process_product, dict(context, url=url, name=name))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    product.category=context['category']    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid    # Publish date    if "origPubDate = '" in data.content:        pub_date=data.content.split("origPubDate = '")[1].split("'.")[0]        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    review.authors.append(Person(name='golfdigest.com', ssid='golfdigest.com'))    # Grades    for g in data.xpath('//li[@class="product-rating"]'):        name =g.xpath('h6//text()').string()        value=g.xpath('descendant::span[@itemprop="ratingValue"]//text()').string()        if value and name:            review.grades.append(Grade(name=name, value=value, best=5))    # Summary    summary=data.xpath('//div[@class="o-GolfClubReviewContent__m-TextWrap__a-Description"]//text()[string-length(normalize-space(.))>30]').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary',value=summary))    product.reviews.append(review)    if product.reviews:        session.emit(product)def process_products(data, context, session):    c=0    for link in data.xpath('//div[contains(@class,"page-container")]//noscript//ul/li[position()>2]'):        product=Product()        # Name        name = link.xpath('h2/text()[2]').string()        if name:            product.name=name            product.url=context['url']            product.ssid=product.name + product.url            product.category='Golf Balls'            product.manufacturer=''            c += 1            review=Review()            review.product=product.name            review.url=product.url            review.type='pro'            review.ssid=product.ssid + str(c)            # Publish date            review.date='unknown'            # Author            review.authors.append(Person(name='golfdigest.com', ssid='golfdigest.com'))            # Grades            for g in link.xpath('p[3]/text()'):                value=g.xpath('(.)').string()                if value:                    name = value.split(' ★')[0]                    score = len(value.split(' ★'))-1                    review.grades.append(Grade(name=name, value=score, best=5))            # Summary            summary=link.xpath('p[2]//text()[string-length(normalize-space(.))>30]').string(multiple=True)            if summary:                review.properties.append(ReviewProperty(type='summary',value=summary))            if summary:                product.reviews.append(review)        if product.reviews:            session.emit(product)