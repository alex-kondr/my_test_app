from agent import *from models.products import *import simplejsonMULTIPRODS_URLS = ['https://beebom.com/best-android-smartphones-under-30000-inr-2013/', 'https://beebom.com/best-android-dual-sim-phones-in-india/']def strip_namespace(data):    tmp = data.content_file + ".tmp"    out = file(tmp, "w")    for line in file(data.content_file):        line = line.replace('<ns0', '<')        line = line.replace('ns0:', '')        line = line.replace(' xmlns', ' abcde=')        out.write(line + "\n")    out.close()    os.rename(tmp, data.content_file)def run(context, session):    session.browser.use_new_parser = True    session.queue(Request('https://beebom.com/category/reviews/'), process_revlist, {})def process_revlist(data, context, session):    strip_namespace(data)    revs = data.xpath('//article[contains(@id,"article-card-post")]')    for rev in revs:        title = rev.xpath('div[@class="entry-wrapper"]/h3/a/@title').string()        url = rev.xpath('div[@class="entry-wrapper"]/h3/a/@href').string()        ssid = rev.xpath('@id').string()        if ssid:            ssid = ssid.split('post-')[-1]            session.queue(Request(url), process_review, dict(title=title, url=url, ssid=ssid))    next_url = data.xpath('//link[@rel="next"]/@href').string()    if next_url:        session.queue(Request(next_url), process_revlist, dict())def process_review(data, context, session):    strip_namespace(data)    if context['title'].split(' ')[0] == 'Top' or context['title'].split(' ')[0] == 'Best' or 'Android Smartphones' in context['title']:        process_reviews(data, context, session)        return    resp = simplejson.loads(data.xpath('//script[@type="application/ld+json"]//text()').string())    rev_content = resp['@graph'][0]    product = Product()    product.name = context['title'].split(' Review')[0].split(': ')[0].split(' Makes Moving')[0].split(' Performance')[0].replace(' vs the Competition', '').split(' First Impressions')[0]    product.ssid = context['ssid']    product.category = 'Tech'    product.url = data.xpath('(//a[@rel="noopener nofollow"])[position() = last()]/@href').string() or context['url']    review = Review()    review.title = context['title']    review.type = 'pro'    review.ssid = product.ssid    review.date = rev_content['datePublished'].split('T')[0]    review.url = context['url']    author = rev_content.get('author')    if author:        author_name = author['name']        author_ssid = author['@id'].split('/')[-1]        author_url = resp['@graph'][-2]['url']        review.authors.append(Person(name=author_name, ssid=author_ssid, url=author_url))    grades = data.xpath('//div[@class="beebom-single-review-points"]/div')    if grades:        for grade in grades:            name = grade.xpath('.//div[@class="beebom-single-review-point-heading"]/text()').string()            value = float(grade.xpath('.//div[@class="beebom-single-review-point-content"]/text()').string())            review.grades.append(Grade(name=name, value=value, best=10.0))    pros_cons_content = data.xpath('//h3[contains(@id, "-and-cons")]/following-sibling::figure[1]/table/tbody/tr/td')    if pros_cons_content:        pros_cons_counter = 0        for pro_con in pros_cons_content:            if pros_cons_counter % 2 == 0:                pro = pro_con.xpath('text()').string()                if pro:                    review.add_property(type="pros", value=pro)            if pros_cons_counter % 2 == 1:                con = pro_con.xpath('text()').string()                if con:                    review.add_property(type="cons", value=con)            pros_cons_counter += 1    if not pros_cons_content:        pros = data.xpath('//h3[contains(text(), "Pros")]/following-sibling::ul[1]/li')        if not pros:            pros = data.xpath('(//p/strong[contains(text(), "Pros:")]/following::ul)[1]/li')        if pros:            for pro in pros:                pro = pro.xpath('.//text()').string()                review.add_property(type="pros", value=pro)        cons = data.xpath('//h3[contains(text(), "Cons")]/following-sibling::ul[1]/li')        if not cons:            cons = data.xpath('(//p/strong[contains(text(), "Cons:")]/following::ul)[1]/li')        if cons:            for con in cons:                con = con.xpath('.//text()').string()                review.add_property(type="cons", value=con)    if not pros_cons_content:        pros_cons_content = data.xpath('//h2[contains(@id, "-and-cons")]/following-sibling::figure/table/tbody/tr/td')        if pros_cons_content:            pros_cons_counter = 0            for pro_con in pros_cons_content:                if pros_cons_counter % 2 == 0:                    pro = pro_con.xpath('text()').string()                    if pro:                        review.add_property(type="pros", value=pro)                if pros_cons_counter % 2 == 1:                    con = pro_con.xpath('text()').string()                    if con:                        review.add_property(type="cons", value=con)                pros_cons_counter += 1    if not pros_cons_content:        pros_content = data.xpath('//div[@class="pros-cons"]/div/div[contains(text(), "The Pros")]/following-sibling::div/div/text()').strings()        for pros in pros_content:            if pros != None:                pros = pros.replace('\t', '').strip()            if pros != None and pros != '' and pros != ' ':                review.add_property(type="pros", value=pros)        cons_content = data.xpath('//div[@class="pros-cons"]/div/div[contains(text(), "The Cons")]/following-sibling::div/div/text()').strings()        for cons in cons_content:            if cons != None:                cons = cons.replace('\t', '').strip()            if cons != None and cons != '' and cons != ' ':                review.add_property(type="cons", value=cons)    conclusion = data.xpath('//h2[contains(text(), "?")][last()]/following-sibling::p[not(a/em[@rel="noopener nofollow"]or a[@rel="noopener nofollow"] or em/a[@rel="noopener nofollow"] or @style="text-align: center;" or strong/em/a)]//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//h2[contains(text(), "Verdict")]/following-sibling::p[1]//text()').string(multiple=True)    if conclusion:        conclusion = conclusion.replace('Pros: Cons:', '').replace('Cons:Pros:', '').replace('Cons: Pros:', '')        review.add_property(type="conclusion", value=conclusion)    summary = data.xpath('//div[@class="review-section"]/div[@class="review-verdict"]/text()').string(multiple=True)    if summary:        review.add_property(type="summary", value=summary)    excerpt = []    excerpts = data.xpath('//div[@class="beebom-single-content-container"]/p[not(@style="text-align: center;")]')    for ex in excerpts:        links = ex.xpath('.//*[@rel="noopener nofollow"]//text()').strings()        em_links = ex.xpath('.//*[@rel="noopener nofollow"]/../text()').strings()        em_strongs = ex.xpath('em/strong/text()').strings()        strong_ems = ex.xpath('strong/em/text()').strings()        p = ex.xpath('.//text()').string(multiple=True)        for link in links:            if 'Rs ' in link or '$' in link or 'Rs.' in link or 'https://' in link:                p = p.replace(link, '')        for em in em_links:            if 'if you want to buy the ' in em or ', Body Only' in em:                p = p.replace(em, '')        for st_e in strong_ems:            if 'Buy ' in st_e:                p = p.replace(st_e, '')        for ems in em_strongs:            if 'Buy ' in ems:                p = p.replace(ems, '')        if p != None and p != '':            excerpt.append(p)        if excerpt:        excerpt = ' '.join(excerpt).replace('(  )', '').replace('  )', '').replace('Pros:', '').replace('Cons:', '').replace('ProsCons ', '').replace('.    .', '').replace('Pros Cons', '')        if conclusion:            for el in conclusion.split('. '):                excerpt = excerpt.replace(el.strip(), '').replace('. .', '').strip()        review.add_property(type="excerpt", value=excerpt)        product.reviews.append(review)        session.emit(product)def process_reviews(data, context, session):    strip_namespace(data)    resp = simplejson.loads(data.xpath('//script[@type="application/ld+json"]//text()').string())    rev_content = resp['@graph'][0]    prods = data.xpath('//h2[not(contains(@class, "title"))][position() > 1]')    if context['url'] in MULTIPRODS_URLS:        prods = data.xpath('//h2[not(contains(@class, "title"))] | //p/span[@style="font-size: 1.5em;"]/parent::p')    if context['url'] == 'https://beebom.com/budget-android-phones-under-15000-inr-in-2013/':        prods = data.xpath('//h3[@style="text-align: left;"]')    for prod in prods:        product = Product()        product.name = prod.xpath('.//text()').string(multiple=True).split('. ')[-1].split(' â€“ ')[-1].split(': ')[-1]        product.ssid = product.name.lower().replace(' ', '-')        product.category = 'Tech'        product.url = context['url']        review = Review()        review.title = prod.xpath('.//text()').string(multiple=True)        review.type = 'pro'        review.ssid = product.ssid        review.date = rev_content['datePublished'].split('T')[0]        review.url = product.url        author = rev_content.get('author')        if author:            author_name = author['name']            author_ssid = author['@id'].split('/')[-1]              author_url = resp['@graph'][-1]['url']            review.authors.append(Person(name=author_name, ssid=author_ssid, url=author_url))        excerpt = ''        excerpt_content = prod.xpath('following-sibling::p[position() > 1]')        if product.name == 'Spice Mi 280':            excerpt_content = prod.xpath('following-sibling::p[position() > 2]')        if product.name == 'HTC Desire SV':            excerpt_content = prod.xpath('following-sibling::p[position() > 1 and position() < 4]')        for content in excerpt_content:            if content.xpath('img') or content.xpath('strong') or content.xpath('em') or content.xpath('span/em'):                break            excerpt += content.xpath('.//text()').string(multiple=True)        if excerpt:            review.add_property(type="excerpt", value=excerpt)            product.reviews.append(review)            session.emit(product)