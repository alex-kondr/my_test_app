from agent import *from models.products import *def process_revlist(data, context, session):    revs = data.xpath("//h1[@class='uk-article-title']/a")    for rev in revs:        title = rev.xpath("text()").string()        url = rev.xpath("@href").string()        session.queue(Request(url), process_review, dict(url=url, title=title))    nexturl = data.xpath("//ul[@class='uk-pagination']/li/a/i[@class='uk-icon-angle-double-right']/../@href").string()    if nexturl:        session.queue(Request(nexturl), process_revlist, {})def process_review(data, context, session):    product = Product()    product.name = context['title'].split(' - ')[0]    product.ssid = context['url'].split('/')[-2]    product.category = data.xpath("//span[@class='tm-article-category uk-visible-large']/a[1]//text()").string() or 'Analisis USB'    product.url = context['url']    review = Review()    review.title = context['title']    review.ssid = product.ssid    review.type = 'pro'    review.url = context['url']    review.date = data.xpath("//span[@class='tm-article-date']/time/@datetime").string()        author = data.xpath("//p[@class='uk-article-meta']/span[@class='tm-article-author uk-visible-large']/a").first()    author_name = author.xpath("text()").string()    author_url = author.xpath("@href").string()    review.authors.append(Person(name=author_name, profile_url=author_url, ssid=author_name))        excerpt = data.xpath("//div[@class='tm-main uk-width-medium-3-4']/descendant::text()[not(ancestor::p/@class='uk-article-meta')][not(ancestor::h1/@class='uk-article-title')]").string(multiple=True)    if excerpt:        excerpt = excerpt.split("ConclusiÃ³n")[0].split("Trackback")[0].split("Tags:")[0]        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))        conclusion = data.xpath("//strong[regexp:test(normalize-space(.), 'ConclusiÃ³n')]/following-sibling::text()").string(multiple=True)    if conclusion:        conclusion = conclusion.split("Trackback")[0].split("Tags:")[0]        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))            product.reviews.append(review)    session.emit(product)def run(context, session):    session.queue(Request('http://spanish.getusb.info/category/analisis-usb/'), process_revlist, {})