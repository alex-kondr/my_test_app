from agent import *from models.products import *def run(context, session):    session.queue(Request('https://sirshanksalot.com/'), process_frontpage, dict())def process_frontpage(data, context, session):    cats = data.xpath('//li[a[contains(., "Reviews")]]/ul/li/a')    for cat in cats:        name = cat.xpath('text()').string()        url = cat.xpath('@href').string()        if name and url:            name = name.replace('Reviews', '').strip()            session.queue(Request(url), process_revlist, dict(cat=name))def process_revlist(data, context, session):    revs = data.xpath('//h2[@class="entry-title"]/a')    for rev in revs:        title = rev.xpath('text()').string()        url = rev.xpath('@href').string()        session.queue(Request(url), process_review, dict(context, title=title, url=url))    next_url = data.xpath('//link[@rel="next"]/@href').string()    if next_url:        session.queue(Request(next_url), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.name = context['title'].split(' Review: ')[0].strip()    product.name = product.name.split(' Review')[0] if product.name.endswith(' Review') else product.name    product.url = context['url']    product.ssid = product.url.strip('/').split('/')[-1].replace('-review', '')    product.category = context['cat']    review = Review()    review.title = context['title']    review.type = 'pro'    review.url = product.url    review.ssid = product.ssid    author = data.xpath('//a[@rel="author"]').first()    if author:        author_name = author.xpath('span/text()').string()        author_url = author.xpath('@href').string()        author_ssid = author_url.strip('/').split('/')[-1]        review.authors.append(Person(name=author_name, ssid=author_ssid, profile_url=author_url))    date = data.xpath('//meta[contains(@property, "published_time")]/@content').string()    if date:        review.date = date.split('T')[0]    grade_overall = data.xpath('//p[regexp:test(., "– ?\d+ ?%") and (contains(., "Combined ") or regexp:test(., "Overall", "i") or regexp:test(., "Rating", "i"))]//text()').string(multiple=True)    if grade_overall:        grade_overall = float(grade_overall.strip().split()[-1].split('%')[0])        if grade_overall:            review.grades.append(Grade(type='overall', value=grade_overall, best=100.0))    grades = data.xpath('//p[regexp:test(., "– ?\d+ ?%") and not(contains(., "Combined ") or regexp:test(., "Overall Rating", "i")) and regexp:test(., "Rating", "i")]')    for grade in grades:        grade_name, grade_value = grade.xpath('.//text()').string(multiple=True).split('–')        grade_name = grade_name.replace('Overall', '').replace('Rating', '').strip()        grade_value = float(grade_value.replace('%', '').strip())        if grade_name and grade_value:            review.grades.append(Grade(name=grade_name, value=grade_value, best=100.0))    conclusion = data.xpath('(//div[@itemprop="text"]/div|//div[@itemprop="text"]//p)[regexp:test(., "^Conclusion", "i")]/following-sibling::*[not((contains(., "Overall ") and contains(., " Rating")) or regexp:test(., "On eBay", "i") or regexp:test(., "On faceboo", "i") or contains(., "Titleist Links") or regexp:test(., "^Links:"))][not(preceding-sibling::*[contains(., "Titleist Links") or regexp:test(., "^Links:")])][not(regexp:test(., "–\s*\$\d"))]//text()').string(multiple=True)    if conclusion and conclusion.strip():        review.add_property(type='conclusion', value=conclusion.strip())    excerpt = data.xpath('(//div[@itemprop="text"]/div|//div[@itemprop="text"]//p)[not(regexp:test(., "–\s*\$\d") or (contains(., "Overall ") and contains(., " Rating")) or regexp:test(., "On eBay", "i") or regexp:test(., "On faceboo", "i") or contains(., "Titleist Links") or regexp:test(., "^Links:"))][not(preceding-sibling::*[contains(., "Titleist Links") or regexp:test(., "^Links:")])]//text()').string(multiple=True)    if excerpt and excerpt.strip():        excerpt = excerpt.decode('unicode_escape').replace('ï¿½', '').encode('latin-1')        review.add_property(type='excerpt', value=excerpt.strip())        product.reviews.append(review)        session.emit(product)