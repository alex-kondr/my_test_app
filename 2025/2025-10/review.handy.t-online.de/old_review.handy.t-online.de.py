from agent import *from models.products import *import simplejsonimport reCAT = ['Digital', 'Smartphone', 'Computer & Gadgets']def run(context, session):    session.queue(Request('https://www.t-online.de/digital/'), process_category, dict())def process_category(data, context, session):    cats = data.xpath('//div[@data-testid="Scroller"]/ul/li/div/label/a')    for cat in cats:        name = cat.xpath('text()').string()        if name in CAT:            cats2 = cat.xpath('./parent::label/following-sibling::div/div/a')            for cat2 in cats2:                  name2 = cat2.xpath('text()').string()                url = cat2.xpath('@href').string()                if name2 in CAT:                    session.queue(Request(url), process_prodlist, dict(cat=name+'|'+name2))def process_prodlist(data, context, session):    prods = data.xpath('//div[@data-tb-region="topboxen"]/div//a')    for prod in prods:        name = prod.xpath('text()').string()        url = prod.xpath('@href').string()        if url:            session.queue(Request(url), process_review, dict(context, name=name, url=url))    next_page = data.xpath('//a[@class="css-2cbwa1"]/@href').strings()    if len(next_page) == 2:        session.queue(Request(next_page[-1]), process_prodlist, dict(context))def process_review(data, context, session):    resp_html = data.xpath('//script[@id="__NEXT_DATA__"]/text()').string()    if not resp_html:        return        data_json = simplejson.loads(resp_html)    product = Product()    product.name = data_json['props']['pageProps']['page']['title'].split(':')[0]    product.url = context['url']    product.ssid = context['url'].split('/')[-2].replace('id_', '')    product.category = context['cat']    review = Review()    review.type = 'pro'    review.title = context['name']    review.ssid = product.ssid    review.url = product.url    review.date = data_json['props']['pageProps']['page']['article']['publicationDate'].get('utcShort')    authors = data_json['props']['pageProps']['page']['article'].get('authors')    author_name = ''    author_url = ''    if authors:        for author in authors:            if author['type'] == 'regular':                author_name = author.get('firstName') + ' '  + author.get('lastName')                author_url = author.get('url')    if not author_name:        for author in authors:            author_name = author.get('firstName', '') + '' + author.get('lastName', '')            if not author_name:                author_name = author.get('name')                if not authors:        author = data_json['props']['pageProps']['page']['article'].get('agencies')        if author:            author_name = author[0]    if author_name and author_url:        author_url = 'https://www.t-online.de' + author_url        author_id = author_url[author_url.find('id_'):].split('/')[0]        review.authors.append(Person(name=author_name, ssid=author_id, url=author_url))        elif author_name:        review.authors.append(Person(name=author_name, ssid=author_name))    stages = data_json['props']['pageProps']['page']['article']['body'].get('stages')        summary = []    for nodes in stages:        if nodes['nodes']:            for p in nodes['nodes']:                if p['type'] == 'summary':                    for children in p['children']:                        if children['type'] == 'text':                            summary.append(children['text'].strip())                        if children.get('children'):                            for sub_children in children['children']:                                if sub_children['type'] == 'text' or 'span':                                    summary.append(sub_children['text'].strip())    summary = ' '.join(summary)    if summary:        review.add_property(type='summary', value=summary)        pros = []    cons = []    excerpt = []    for nodes in stages:        if nodes['nodes']:            for p in nodes['nodes']:                if p['type'] == 'sub_headline':                    for children in p['children']:                        if 'Fazit:' in children['text']:                            excerpt.append('/-/')                if p['type'] == 'p':                    for children in p['children']:                        if children['type'] == 'text':                            if 'Fazit:' in children['text']:                                excerpt.append('/=/')                            if children['text'].startswith('+ '):                                pros.append(children['text'].strip())                                                            if children['text'].startswith('- ') and children['text'] != '- ':                                cons.append(children['text'].strip())                            excerpt.append(children['text'].strip())                        if children['type'] == 'em' or children['type'] == 'span' or children['type'] == 'a':                            for sub_children in children['children']:                                if sub_children['type'] == 'text':                                    excerpt.append(sub_children['text'].strip())                        if children['type'] == 'strong':                            for sub_children in children['children']:                                if sub_children['type'] == 'text':                                    excerpt.append(sub_children['text'].strip())                                if sub_children['type'] == 'a':                                    for sub_sub_children in sub_children['children']:                                        if sub_sub_children['type'] == 'text':                                            excerpt.append(sub_sub_children['text'].strip())                    excerpt.append('||')    if pros and cons:        for pro in pros:            review.add_property(type='pros', value=pro.replace('+ ', ''))        for con in cons:            review.add_property(type='cons', value=con.replace('- ', ''))    conclusion = ''    if '/-/' in excerpt:        for pro in pros:            excerpt.remove(pro)                for con in cons:            excerpt.remove(con)                for p in excerpt:            if 'Edge: Nachteile' in p or 'Edge: Vorteile' in p:                excerpt.remove(p)        conclusion = ' '.join(excerpt[excerpt.index('/-/'):]).replace('/-/', '').replace('||', '').replace('/=/', '')            else:        if '/=/' in excerpt:            concl = ' '.join(excerpt).split('/=/')[1:]            for con in concl:                conclusion += con[con.find('Fazit:'):con.find('||')]        for p in excerpt:            if 'Edge: Nachteile' in p or 'Edge: Vorteile' in p:                excerpt.remove(p)        if pros and cons:            for pro in pros:                excerpt.remove(pro)            for con in cons:                excerpt.remove(con)    if conclusion:        result = re.findall(r'\d\d\d Euro', conclusion)        for p in result:            conclusion = conclusion.replace(p, '')        review.add_property(type='conclusion', value=conclusion)    excerpt = ' '.join(excerpt).replace('||', '')    if excerpt:        if conclusion:            result = re.findall(r'\d\d\d Euro', excerpt)            for p in result:                excerpt = excerpt.replace(p, '')            excerpt = excerpt.replace('/-/', '').replace('||', '').replace('/=/', '').replace(conclusion.strip(), '').strip()        review.add_property(type='excerpt', value=excerpt)        product.reviews.append(review)        session.emit(product)