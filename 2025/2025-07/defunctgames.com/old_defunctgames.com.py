from agent import *from models.products import *from Ft.Xml import ReaderExceptionimport redebug = TrueSITE = 'http://www.defunctgames.com' #import agent#def request(url):#   r = agent.Request(url, max_age=0)#   r.add_header('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')#   r.add_header('Authorization','b4305b3e-0b67-4c77-ac64-362dbc855ca2')#   return r#Request = requestdef process_category(data, context, session):   for cat in data.xpath("//li[@class='menu-three']/ul/li/a[regexp:test(@href,'reviews/system')]"):      url = cat.xpath("@href").string()      category = cat.xpath("@title").string(multiple=True)      if url and category:         session.queue(Request(url), process_productlist, dict(context, category=category))def process_productlist(data, context, session):   try:      posts = data.xpath("/")   except ReaderException:      return   for prod in data.xpath("//div[@class='gamename_2']//a"):      name = prod.xpath("descendant::text()").string(multiple=True)      url = prod.xpath("@href").string()      if url and name:         session.queue(Request(url), process_review, dict(context, url=url, name=name))def process_review(data, context, session):   try:      posts = data.xpath("/")   except ReaderException:      return   product = Product()   product.name = data.xpath("//div[@class='reviewname']/text()").string()   product.category = context['category']   product.url = context['url']   product.ssid = product.name   content = data.xpath("//div[@class='reviewtext']").first()   if content:      review = Review()      review.title = context['name']      review.type = 'pro'      review.url = context['url']      review.ssid = data.xpath("//input[@name='article_id']/@value").string()      if not(review.ssid):         return      product.reviews.append(review)      score = content.xpath("preceding-sibling::ul[@id='reviewScore']/li[@class='review-score-grade']/a").first()      if score:         value = re_search_once('(\d+)', score.xpath("@href").string())         description = score.xpath("descendant::text()").string()         if value:            review.grades.append(Grade(name='Defunct Games Rating', type='overall', value=float(value), best=100, description=description))      excerpt = content.xpath("node()[not(name()='center')]/descendant-or-self::text()").string(multiple=True)      summary = data.xpath("/descendant::div[@class='rightside_box-summary'][1]//text()[not(ancestor::script)]").string(multiple=True)      if summary:         review.properties.append(ReviewProperty(type='summary', value=summary))      next = data.xpath("//div[@id='next']/a/@href").string()      if next:         review.properties.append(ReviewProperty(type='pages', value=dict(url=review.url, title='Page 1')))         review.properties.append(ReviewProperty(type='pages', value=dict(url=next, title='Page 2')))         session.do(Request(next), process_nextpage, dict(review=review, url=next, excerpt=excerpt, page=2))      else:         process_lastpage(data, dict(review=review, excerpt=excerpt), session)   if product.reviews:      session.emit(product)def process_nextpage(data, context, session):   try:      posts = data.xpath("/")   except ReaderException:      return   review = context['review']   page = context['page']+1   content = data.xpath("//div[@class='reviewtext']").first()   if content:      excerpt = content.xpath("node()[not(name()='center')]/descendant-or-self::text()").string(multiple=True)      if excerpt:         newexcerpt = context['excerpt'] + '\n' + excerpt      else:         newexcerpt = context['excerpt']      next = data.xpath("//div[@id='next']/a/@href").string()      if next:         review.properties.append(ReviewProperty(type='pages', value=dict(url=next, title='Page %s'%(page))))         session.do(Request(next), process_nextpage, dict(review=review, url=next, page=page, excerpt=newexcerpt))      else:         process_lastpage(data, dict(review=review, excerpt=newexcerpt), session)def process_lastpage(data, context, session):   try:      posts = data.xpath("/")   except ReaderException:      return   review = context['review']   content = data.xpath("//div[@class='reviewtext']").first()   if content:      review.date = content.xpath("following-sibling::div//div[@id='postedlink']/a/text()").string()      author = content.xpath("following-sibling::div//div[@id='byline']/a").first()      if author:         name = author.xpath("descendant::text()").string(multiple=True)         url = author.xpath("@href").string()         if name and url:            review.authors.append(Person(name=name, profile_url=url, ssid=name))      review.properties.append(ReviewProperty(type='excerpt', value=context['excerpt']))def run(context, session):   session.browser.agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"   session.sessionbreakers = [SessionBreak(max_requests=5000)]   session.queue(Request('http://www.defunctgames.com/'), process_category, dict(context))