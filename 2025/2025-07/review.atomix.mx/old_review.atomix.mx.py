from agent import *from models.products import *debug = Trueimport redef process_revlist(data, context, session):   for rev in data.xpath("//div[regexp:test(@id,'post-\d+')]//h1/a"):      url = rev.xpath("@href").string()      title = rev.xpath("descendant::text()").string(multiple=True)      if url and title:         name = title.split('-')[-1].split(u'–')[-1]         session.queue(Request(url), process_review, dict(context, url=url, title=title, name=name))   nexturl = data.xpath("//ul[@id='pagination']//a[regexp:test(., 'Next')]/@href|//a[contains(img/@src,'/siguiente.png')]/@href").string()   if nexturl:      session.queue(Request(nexturl), process_revlist, dict())def process_review(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.ssid = product.name   product.category = data.xpath("//h1[regexp:test(normalize-space(.),'PLATAFORMA RESEÑADA')]/following-sibling::p[1]//text()").string() or "Videojuegos"   product.manufacturer = data.xpath("//h1[regexp:test(normalize-space(.),'DESARROLLADOR')]/following-sibling::p[1]//text()").string()   content = data.xpath("//div[@class='single-post-content']").first()   if content:      review = Review()      review.type = 'pro'      review.title = context['title']      review.url = context['url']      review.ssid = re_search_once('(\d+)', content.xpath("ancestor::div[regexp:test(@id,'post-\d+')]/@id").string())      datetxt = content.xpath("descendant::span[@class='date-dark']/text()").string()      if datetxt:         review.date = re_search_once("(\d+\/\d+\/\d+)", datetxt)      author = content.xpath(" descendant::a[@rel='author']").first()      if author:         name = author.xpath("descendant::text()").string()         url = author.xpath("@href").string()         if url and name:            review.authors.append(Person(name=name, ssid=name, profile_url=url))      rate = None      ratetxt = content.xpath("descendant::img[regexp:test(@src,'score|calificacion')]/@src").string()      print ratetxt, rate      if ratetxt:         rate = re_search_once('score-(\d{2})', ratetxt)         if not(rate):            rate = re_search_once('calificacion-(\d{2})', ratetxt)         if not(rate):            rate = re_search_once('score_(\d{2})', ratetxt)         if not(rate):            rate = re_search_once('calificacion_(\d{2})', ratetxt)         if not(rate):            rate = re_search_once('score(\d{2})', ratetxt)         if not(rate):            rate = re_search_once('calificacion(\d{2})', ratetxt)         if not(rate):            rate = re_search_once('(\d{2})', ratetxt)         if not(rate) and re.search('scorepikmin', ratetxt):            rate = 95         if rate:            review.grades.append(Grade(type='overall', name='Score', value=float(rate)/10, best=10.0))      else:         ratetxt = content.xpath("descendant::p[regexp:test(normalize-space(.),'^Score','i')]//text()").string()         if ratetxt:            rate = re_search_once('(\d\.?\d?)', ratetxt)            if rate:               review.grades.append(Grade(type='overall', name='Score', value=float(rate), best=10.0))      if rate and ( context['url'].count('review') or context['url'].count('resena') ):         product.reviews.append(review)      excerpt = content.xpath("descendant::p[following-sibling::node()[regexp:test(normalize-space(.),'^Conclusiones')]]//text()").string(multiple=True)      if not(excerpt)  and content.xpath("descendant::div[regexp:test(@class,'post-text')]/node()[regexp:test(name(),'h\d')]"):         excerpt = content.xpath("descendant::div[regexp:test(@class,'post-text')]/p[following-sibling::node()[regexp:test(name(),'h\d')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("descendant::div[regexp:test(@class,'post-text')]/p//text()[following::img[regexp:test(@src,'score')]]").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("descendant::div[regexp:test(@class,'post-text')]/p[normalize-space(text())]//text()").string(multiple=True)      if excerpt:         review.add_property(type='excerpt', value=excerpt)      conclusion = content.xpath("descendant::p[preceding-sibling::node()[regexp:test(normalize-space(.),'^Conclusiones')]]//text()").string(multiple=True)      if not(conclusion) and content.xpath("descendant::div[regexp:test(@class,'post-text')]/node()[regexp:test(name(),'h\d')]"):         conclusion = content.xpath("descendant::div[regexp:test(@class,'post-text')]/p[count(following-sibling::node()[regexp:test(name(),'h\d')])=0]//text()").string(multiple=True)      if not(conclusion)  and content.xpath("descendant::div[regexp:test(@class,'post-text')]/node()[regexp:test(name(),'h\d')]"):         conclusion = content.xpath("descendant::div[regexp:test(@class,'post-text')]/p[count(following-sibling::node()[regexp:test(name(),'h\d')])=1]//text()").string(multiple=True)      if not(conclusion)  and content.xpath("descendant::img[regexp:test(@src,'score')]"):         conclusion = content.xpath("descendant::div[regexp:test(@class,'post-text')]/p//text()[preceding::img[regexp:test(@src,'score')]]").string(multiple=True)      if conclusion:         review.add_property(type='conclusion', value=conclusion)   if product.reviews:      session.emit(product)def run(context, session):   session.browser.agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"   session.queue(Request('http://www.atomix.vg/seccion/resenas/'), process_revlist, {})