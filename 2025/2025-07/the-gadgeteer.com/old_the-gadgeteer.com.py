import stringfrom agent import *from models.products import *import refrom Ft.Xml import ReaderExceptiondebug = Truedef run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=5000)]    session.browser.use_new_parser = True    session.queue(Request('https://the-gadgeteer.com/category/reviews/'), process_category, {})def process_category(data, context, session):    for p in data.xpath("//h2[@itemprop='headline']/a[regexp:test(., 'review', 'i')]"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//div[@class='nav-links']//a[@class[regexp:test(., 'next')]]/@href").string()    if next:        session.queue(Request(next), process_category, {})def process_product(data, context, session):    try:       category = data.xpath("//div[@class='entry-meta']//span[@class='tags-links']/a/text()[string-length(normalize-space(.))>0]").string()    except ReaderException:       return    product = Product()    product.name = re_search_once('(.+) [Rr]eview', context['name'])    if not product.name:        product.name = context['name']     product.url = context['url']    product.ssid = product.name    if not category:        category = 'unknown'    product.category = Category(name = category)    review = Review()      review.title = context['name']    review.url = product.url    ssid = data.xpath("//article/@id[regexp:test(., 'post')]").string()    if ssid:        review.ssid = re_search_once('(\d+)', ssid)     review.type = 'pro'    review.date = data.xpath("//div[@class='entry-meta']//span[@class='posted-on']/span/text()[string-length(normalize-space(.))>0]").string()    user_data = data.xpath("//div[@class='entry-meta']//a[@rel='author']").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/author\/([^\/]+)', user.profile_url)        review.authors.append(user)    excerpt = data.xpath("//div[@class[regexp:test(., 'entry-content')]]/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    conclusion = data.xpath("//div[@class[regexp:test(., 'entry-content')]]/h2[regexp:test(., 'Final thoughts')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='conclusion'), value=conclusion, name = "Final thoughts"))    for pros in data.xpath("//div[@class[regexp:test(., 'entry-content')]]/h2[regexp:test(., 'What I like')]/following-sibling::*[1][self::ul]/li"):        p_value = pros.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if p_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "What I like"))    for cons in data.xpath("//div[@class[regexp:test(., 'entry-content')]]/h2[regexp:test(., 'What I.d change')]/following-sibling::*[1][self::ul]/li"):        c_value = cons.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if c_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "What I'd change"))              product.reviews.append(review)    session.emit(product)