#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *seen_urls = []def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://www.rakuten.co.jp/directplus/'), process_first_page, {})    url = 'https://review.rakuten.co.jp/shop/4/265672_265672/1.1/'    session.queue(Request(url), process_productlist2, dict(category='unknown'))def process_first_page(data, context, session):    for link in data.xpath('//li[descendant::a[text()="商品カテゴリ"]]//li//a'):        url=link.xpath('@href').string()        category=link.xpath('text()').string()        if url and category:#and not session.seen(url):            session.queue(Request(url),process_productlist,dict(category=category))def process_productlist(data, context, session):    for link in data.xpath('//td[descendant::div[@class="risfClfx"]][@style]'):        url=link.xpath('a//@href').string()        name=link.xpath('a//text()').string()        revurl=link.xpath('descendant::div[@class="risfClfx"]//a//@href').string()        if url and name and revurl:#and not session.seen(url):            session.queue(Request(url),process_product,dict(context,url=url,name=name,revurl=revurl))    # Next page    next=data.xpath('//span[@class="thisPage"]/following-sibling::a[1]//@href').string()    if next:        session.queue(Request(next), process_productlist, dict(context))def process_productlist2(data, context, session):    for link in data.xpath('//div[@class="revRvwUserMain"]//dt[@class="revRvwUserEntryItemName"]'):        url=link.xpath('a//@href').string()        name=link.xpath('a//text()').string()        revurl=link.xpath('following-sibling::dd[@class="revRvwUserEntryDetail"][1]//a//@href').string()        if url and name and revurl and revurl not in seen_urls:            revurl = revurl.split('/')[0:-2]            revurl = '/'.join(revurl) + '/'            session.queue(Request(url),process_product,dict(context,url=url,name=name,revurl=revurl))            seen_urls.append(revurl)    # Next page    next=data.xpath('//span[@class="revThisPage"]/following-sibling::a[1]//@href').string()    if next:        session.queue(Request(next), process_productlist2, dict(context))def process_product(data, context, session):    product=Product()    # Name    name = data.xpath('//div[@class="revItemHdr"]//a//text()').string()    if name:        product.name=name    else:        product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    product.category=context['category']    product.manufacturer='HP'    session.do(Request(context['revurl']), process_reviews, dict(context,product=product))    if product.reviews:        session.emit(product)def process_reviews(data, context, session):    product = context['product']    c=0    for link in data.xpath('//div[@class="revRvwUserSec"]'):        c += 1        review=Review()        review.product=product.name        review.url=context['revurl']        review.ssid=product.ssid + ' review '        review.type='user'        # Title        title = link.xpath('descendant::dt[@class="revRvwUserEntryTtl summary"]//text()').string()        if title:            review.title=title        # Publish date        pub_date=link.xpath('descendant::span[contains(@class,"revUserEntryDate")]//text()').string()        if pub_date:            review.date=pub_date            review.ssid+=pub_date        else:            review.date='unknown'        # Author        author=link.xpath('descendant::dt[contains(@class,"revUserFaceName")]//text()').string(multiple=True)        if author:            review.authors.append(Person(name=author, ssid=author))            review.ssid+=author        else:            review.authors.append(Person(name='unknown', ssid='unknown'))        # Grades        overall=link.xpath('descendant::span[@class="revUserRvwerNum value"]//text()').string()        if overall:            review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=5))        for g in link.xpath('descendant::li[@class="revUserDispList"]'):            name =g.xpath('text()').string()            value=g.xpath('descendant::span[@class="revDispListNum"]//text()').string()            if value and name:                review.grades.append(Grade(name=name, value=value, best=5))        # Summary        summary=link.xpath('descendant::dd[@class="revRvwUserEntryCmt description"]//text()').string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))        product.reviews.append(review)    next = data.xpath('//span[@class="revThisPage"]/following-sibling::a[1]//@href').string()    if next:        session.do(Request(next), process_reviews, dict(context))