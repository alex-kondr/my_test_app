import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session): #    session.browser.use_new_parser = True    session.sessionbreakers = [SessionBreak(max_requests=10000)]    session.queue(Request('http://www.audioholics.com/product-reviews', use='curl'), process_frontpage, {})def process_frontpage(data, context, session):    for cat in data.xpath("//a[regexp:test(., 'Product Reviews')]/following-sibling::ul/li//ul[@class[regexp:test(., 'secondaryContent')]]"):        category = cat.xpath("preceding-sibling::div[h3][1]/h3//text()[string-length(normalize-space(.))>0]").string()        for sub in cat.xpath("li/a"):            subcat = sub.xpath(".//text()[string-length(normalize-space(.))>0]").string()            cat_url = sub.xpath("@href").string()            if category and subcat and cat_url:                context['category'] = category + '|' + subcat                session.queue(Request(cat_url+'/allContents', use='curl'), process_category, context)def process_category(data, context, session):    for p in data.xpath("//div[@class[regexp:test(., 'listing-page')]]//div[@class='post']/h4[regexp:test(., '[^Pp][Rr]eview')]//a"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url'], use='curl'), process_product, context)def process_product(data, context, session):    product = Product()    product.name = data.xpath("//div[@class='productDataBlock']/ul/li[regexp:test(., 'Product Name')]/strong/text()[string-length(normalize-space(.))>0]").string()    if not product.name:        product.name = context['name'].replace(' Review', '')    product.url = context['url']    product.category = Category(name = context['category'])    product.ssid = re_search_once('\/([^\/]+)\/*$', product.url)    product.manufacturer = data.xpath("//div[@class='productDataBlock']/ul/li[regexp:test(., 'Manufacturer')]/strong/text()[string-length(normalize-space(.))>0]").string()    review = Review()    review.title = context['name']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    review.date = data.xpath("//div[@class='documentByLine']//span[last()]/text()[string-length(normalize-space(.))>0]").string()    if not review.date:        review.date = data.xpath("//div[@class='productDataBlock']//li[regexp:test(., 'Review Date')]/strong/text()[string-length(normalize-space(.))>0]").string()    user = data.xpath("//div[@class='documentByLine']//a[@rel='author']//text()[string-length(normalize-space(.))>0]").string()    if not user:        user = data.xpath("//div[@class='documentByLine']//span[1][preceding-sibling::text()[1][regexp:test(., '[Bb]y')]]//text()[string-length(normalize-space(.))>0]").string()    if user:        review.authors.append(Person(name = user, ssid = user))    for pros in data.xpath("//div[@id='ahReviewPros']/ul/li"):        p_value = pros.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if p_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "Pros"))    for cons in data.xpath("//div[@id='ahReviewCons']/ul/li"):        c_value = cons.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if c_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "Cons"))    has_excerpt = False    excerpt = data.xpath("//div[@class[regexp:test(., 'mobile-adtargeth2')]]/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))        has_excerpt = True    for page in data.xpath("//select[@id='dest']/option"):        title = page.xpath("text()[string-length(normalize-space(.))>0]").string()        url = page.xpath("@value").string()        if title and url:            url = 'http://www.audioholics.com' + url            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pages'), value = {'url': url, 'title': title}))    summary_url = data.xpath("//select[@id='dest']/option[regexp:test(., 'Conclusion')]/@value").string()    if summary_url:         summary_url = 'http://www.audioholics.com' + summary_url        session.queue(Request(summary_url, use='curl'), process_summary_page, dict(product=product, review=review, has_excerpt = has_excerpt))    else:        summary = data.xpath("//div[@class[regexp:test(., 'mobile-adtargeth2')]]/h2[regexp:test(., 'Conclusion')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Conclusion"))        for g in data.xpath("//div[@class='productDataBlock']/ul/li[regexp:test(., 'Rating')]"):            g_name = g.xpath("text()[string-length(normalize-space(.))>0]").string()            g_value = 0            for gv in g.xpath("img/@src"):                if re_search_once('\/(half-star)', gv.string()):                    g_value += 0.5                if re_search_once('\/(star)', gv.string()):                    g_value += 1            if g_name and g_value:                review.grades.append(Grade(name = g_name.replace(':', '').replace('Rating', '').strip(), value = str(g_value), worst = 0, best = 5))        if summary and not has_excerpt:            print "no excerpt captured"        if summary or has_excerpt:            product.reviews.append(review)            session.emit(product)def process_summary_page(data, context, session):    review = context['review']    product = context['product']    has_excerpt = context['has_excerpt']    summary = data.xpath("//h2[regexp:test(., 'Conclusion')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if not summary:        summary = data.xpath("//div[@class[regexp:test(., 'plain')]]/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Conclusion"))    for g in data.xpath("//table[@class='metrics']/tbody/tr"):        g_name = g.xpath("td[1]//text()[string-length(normalize-space(.))>0]").string()        g_value = 0        for gv in g.xpath("td[2]/img/@src"):            if re_search_once('(ah-half-star)', gv.string()):                g_value += 0.5            if re_search_once('(ah-star)', gv.string()):                g_value += 1        if g_name and g_value:            review.grades.append(Grade(name = g_name, value = str(g_value), worst = 0, best = 5))    if summary and not has_excerpt:        print "no excerpt captured"    if summary or has_excerpt:        product.reviews.append(review)        session.emit(product)