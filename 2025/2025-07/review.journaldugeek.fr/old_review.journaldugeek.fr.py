#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *debug = Truedef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.journaldugeek.com/tests/', use="curl"), process_category, {})def process_category(data, context, session):    for link in data.xpath('//a[@class="archive__list__item"]'):        url=link.xpath('@href').string()        name=link.xpath('@title').string()        if url and name:            bad_list2 = ['Test du','Que vaut le','Test : ','Test –','Test d’',            'Test de la','Test de','Impressions – ','[Impressions]','[Test]']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            bad_list = [' : ',', le',', la',', ']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name))    # Next page    next=data.xpath('//a[@class="nextpostslink"]//@href').string()    if next:        session.queue(Request(next, use="curl"), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    # Ssid    ssid = data.xpath('//body[contains(@class,"postid-")]//@class').string()    if ssid:        ssid = ssid.split('postid-')[1].split(' ')[0]        product.ssid=ssid    else:        product.ssid=product.name + product.url    # Category    category = data.xpath('//meta[regexp:test(@property,"(article:tag|article:section)")]//@content').join('|')    if category:        product.category=category    else:        product.category='unknown'    review=Review()    review.product=product.name    review.url=product.url    review.ssid=product.ssid + 'review'    review.type='pro'    # Publish date    pub_date=data.xpath('//div[@class="single__author"]//time//@datetime').string()    if pub_date:        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//div[@class="single__author"]//p//a/text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    grade = data.xpath('//span[@class="single__note--mark"]//text()').string()    if grade:        if ',' in grade: grade = grade.replace(',','.')        try:            review.grades.append(Grade(name='Overall Rating', type='overall', value=grade, best=10))        except:            print 'Something wrong with grade:', grade    # Excerpt    exce_list = [    '//node()[@class="single__introduction"]//text()',    '//div[@class="single__post"]//p//text()']    for item in exce_list:        excerpt=data.xpath(item).string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:333]+'...'))            break    lasturl = False    uris = []    for page in data.xpath('//div[@class="single__summary"]//li//a'):        title = page.xpath("descendant::text()").string()        url = page.xpath("@href").string()        if title and url and url not in uris:            lasturl = url            review.properties.append(ReviewProperty(type='pages',value=dict(url=url, title=title)))            uris.append(url)    if lasturl:        session.do(Request(lasturl, use="curl"), process_summary, dict(review=review))    else:        process_summary(data, dict(review=review), session)    product.reviews.append(review)    if product.reviews:        session.emit(product)def process_summary(data, context, session):    review = context['review']    # Summary    summary=data.xpath('//div[@class="single__opinion__text"]//p//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary',value=summary))    # Pros    for p in data.xpath('//table[@class="points__table"]//tr[2]//td[1]//li'):        pros=p.xpath('descendant::text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for c in data.xpath('//table[@class="points__table"]//tr[2]//td[2]//li'):        cons=c.xpath('descendant::text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))