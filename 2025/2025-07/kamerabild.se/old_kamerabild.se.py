from agent import *from models.products import *debug = Truedef process_frontpage(data, context, session):   for cat in data.xpath("//div[@class='avdbesk tester']//h2/a"):      url = cat.xpath("@href").string()      category = cat.xpath("descendant::text()").string(multiple=True)      if url and category:         session.queue(Request(url), process_category, dict(category=category))def process_category(data, context, session):   catid = re_search_once('(\d+)', data.xpath("//div[@id='ladda-knapp']//button/@tid").string())   if catid:      url = 'https://www.kamerabild.se/vyfix/article_lists/panel_pane_2/%s'%(catid)      session.queue(Request(url), process_revlist, dict(context))def process_revlist(data, context, session):   for rev in data.xpath("//ul[@class='teaser-list']/li[regexp:test(normalize-space(.),'Kamera & Bild testar')]/h2/a"):      url = rev.xpath("@href").string()      title = rev.xpath("descendant::text()").string(multiple=True)      if url and title:         name = re_search_once(u'TEST: (.*) [–-]', title)         if not(name):            name = re_search_once(u'Test: (.*) [–-]', title)         if not(name):            name = re_search_once(u'Test av (.*)$', title)         if not(name):            name = re_search_once(u'TEST: (.*)$', title)         if not(name):            name = re_search_once(u'Test: (.*)$', title)#         if not(name):#            name = title         if name:            session.queue(Request(url), process_review, dict(context, url=url, title=title, name=name))   next = data.xpath("//li[@class='pager-next']//a/@href").string()   if next:      session.queue(Request(next), process_revlist, dict(context))def process_review(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.ssid = product.name   product.category = context['category']   content = data.xpath("//div[@property]").first()   if content:      review = Review()      review.type = 'pro'      review.title = context['title']      review.url = context['url']      review.ssid = review.title       review.date = data.xpath("//li[@class='author']/descendant::span[last()]/text()").string(multiple=True)      author = data.xpath("//li[@class='author']//span[@class='author-name']").first()      if author:         name = author.xpath("descendant::text()").string(multiple=True)         email = author.xpath("following::div[1]//a/@href").string()         if name and email:            review.authors.append(Person(name=name, email=email, ssid=name))      summary = data.xpath("//div[regexp:test(@class,'lead-text$')]//text()").string(multiple=True)      if not(summary):         summary = data.xpath("//div[regexp:test(@class,'pane-node-field-lead-text')]//text()").string(multiple=True)      if summary:         review.add_property(type='summary', value=summary)      excerpt = content.xpath("p[count(preceding-sibling::h3)=0]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("p[following-sibling::node()[regexp:test(normalize-space(.),'Slutsats')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("descendant::p[normalize-space(.)]//text()").string(multiple=True)      if excerpt:         review.add_property(type='excerpt', value=excerpt)      score = re_search_once('(\d+)', data.xpath("//div[regexp:test(@class,'pane-node-field-totalbetyg')]//div/text()").string())      print 'xxx', score      if score:         review.grades.append(Grade(name='Totalbetyg', type='overall', value=float(score), best=100.0))      lasturl = ''      for page in content.xpath("descendant::select/option"):         url = review.url + '?nodePage=%s'%(page.xpath("@value").string())         title = page.xpath("descendant::text()").string()         print 'XXX', url, title         if url and title:            review.add_property(type='pages', value=dict(url=url, title=title))            lasturl = url      if lasturl:         session.queue(Request(lasturl), process_lastpage, dict(product=product, review=review, excerpt=excerpt))      else:         process_lastpage(data, dict(product=product, review=review, excerpt=excerpt), session)         def process_lastpage(data, context, session):   product = context['product']   review = context['review']   content = data.xpath("//div[@property]").first()   if content:      product.reviews.append(review)      conclusion = content.xpath("p[preceding-sibling::h3[1][regexp:test(normalize-space(.),'Slutsats')]]//text()").string(multiple=True)      if not(conclusion):         conclusion = content.xpath("p[count(following-sibling::h3)=0]//text()").string(multiple=True)      if conclusion and conclusion != context.get('excerpt', None):         review.add_property(type='conclusion', value=conclusion)      for g in content.xpath("div[regexp:test(@class,'pane-node-body')]//text()[regexp:test(normalize-space(.),'\S+ \d$')][preceding::text()[regexp:test(normalize-space(.),'SÅ SATTE VI BETYGET','i')]]"):         gradetxt = g.xpath("self::text()").string()         description = g.xpath("following::text()[1]").string()         if gradetxt:            title = re_search_once('([A-Z].*[a-z])', gradetxt)            value = re_search_once('(\d)', gradetxt)            print title, value            if title and value:               review.grades.append(Grade(name=title, value=float(value), best=10.0))      for g in content.xpath("p[preceding-sibling::h3[1][regexp:test(normalize-space(.),'Betyg')]]"):         gradetxt = g.xpath("descendant::text()").string(multiple=True)         if gradetxt:            title = re_search_once('([A-Z].*[A-Za-z]):?', gradetxt)            value = re_search_once('(\d+)', gradetxt)            print title, value            if title and value:               review.grades.append(Grade(name=title, value=float(value), best=100.0))      for img in content.xpath("descendant::img[regexp:test(@src,'info|betyg|plusminus')]"):         src = img.xpath("@src").string()         if src:              review.add_property(type='awards', value=dict(image_src=src))   if review.properties:      session.emit(product)def run(context, session):   session.queue(Request('http://www.kamerabild.se/tester'), process_frontpage, {})