#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import randomimport agentimport simplejsondef request(url, formdata):    additional_headers = ' -H "Content-Type: application/x-www-form-urlencoded" '    r = agent.Request(url, method='POST', use="curl", options="-s -L --insecure -X POST" + additional_headers + "-d '" + formdata +"'")    return rRequestNext = requestdef run(context, session):   session.sessionbreakers = [SessionBreak(max_requests=15000)]   session.queue(Request('https://www.macworld.com/'), process_first_page, dict())def process_first_page(data, context, session):   for link in data.xpath('//div[@class="primaryNav-menu-wrap"]/ul//li//a'):       url = link.xpath('@href').string()       category = link.xpath('text()').string()       if url and category:#and not session.seen(url):           url = url + '/reviews'           session.queue(Request(url), process_productlist, dict(category=category))def process_productlist(data, context, session):    #print data.content    if 'html: "<article' in data.content:        json_data = simplejson.loads(data.content)        html_data = json_data['html']        html_data= '<html><head></head><body>\n' + html_data + '\n</body></html>'        data = data.parse_fragment(html_data)    cnt = 0    for link in data.xpath('//div[@class="item-text"]//node()[regexp:test(name(),"h\d")]//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name:            bad_list = [' review: ']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            cnt += 1            bad_list2 = ['Review:','\\n','’','‘',"'"]            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name))    # Next page    next = data.xpath('//a[@aria-label="View More"]//@data-filters').string()    print next    if cnt > 0 and next:        page = context.get('page', 0) + 1        formdata = {}        formdata['action'] = 'ajaxload'        formdata['page'] = page        formdata['filters'] = next        formdata['perpage'] = 20        formdata['offset'] = 0        formdata['exclude'] = 1        formdata['languages'] = 'en'        formdata['_ajaxnonce'] = '3764dd67f3'        formdata = urllib.urlencode(formdata)        url = 'https://www.macworld.com/wp-admin/admin-ajax.php?&abc=' + str(random.randint(1,999999) + random.randint(1,9999999))        session.queue(RequestNext(url, formdata), process_productlist, dict(context, page=page))def process_product(data, context, session):    product=Product()    product.name = data.xpath('//h3[contains(@class, "product-name")]//text()[string-length(normalize-space(.))>1]').string() or context['name']    product.url=context['url']    product.ssid = re_search_once('postid-(\d+)', data.xpath('//body[contains(@class,"postid-")]/@class').string()) or product.name + product.url    product.category = data.xpath('//a[@class="tag-button"]//text()').join('|') or context['category']    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid + ' review'    # Publish date    if '"datePublished":"' in data.content:        revDate = data.content.split('"datePublished":"')[1].split('","')[0]        if 'T' in revDate: revDate = revDate.split('T')[0]        review.date = revDate    else:        review.date='unknown'    # Author    author=data.xpath('//span[@class="byline"]//a//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    overall=data.xpath('//div[@class="starRating"]//@style').string()    if overall:        overall = overall.replace('--rating: ','')[:-1]        review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=5))    # Summary    summ_list = [    '//p[@class="verdict"]//text()',    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Bottom line|Bottom Line|bottom line)")]/following-sibling::p//text()',    '//div[@itemprop="reviewBody"]//p[not(@class)][last()]//text()']    summary = False    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    # Excerpt    excerpt=data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    # Pros    for p in data.xpath('//ul[@class="pros review-list"]//li'):        pros=p.xpath('descendant::text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for c in data.xpath('//ul[@class="cons review-list"]//li'):        cons=c.xpath('descendant::text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    award = data.xpath('//img[@class="review-logo"]//@src').string()    if award:       review.properties.append(ReviewProperty(type='awards', value=dict(image_src=award)))    product.reviews.append(review)    if product.reviews:        session.emit(product)