from agent import *from models.products import *debug = Trueimport redef process_category(data, context, session):   for cat in data.xpath("//center/table//a[normalize-space(.)]"):      url = cat.xpath("@href").string()      category = cat.xpath("descendant::text()").string(multiple=True)      if url and category:         session.queue(Request(url), process_oldreviewpages, dict(category=category))def process_oldreviewpages(data, context, session):   for pageurl in data.xpath("//tr[regexp:test(normalize-space(.),'^Alphabetical Listing$')]/following-sibling::tr//a/@href").strings():      session.do(Request(pageurl), process_productlist2, dict(context))def process_productlist2(data, context, session):   for prod in data.xpath("//tr[count(td)=4]/td[2]//a"):      url = prod.xpath("@href").string()      name = prod.xpath("descendant::text()").string(multiple=True)      date = prod.xpath("preceding::td[1]//text()").string(multiple=True)      publisher = prod.xpath("following::td[1]//text()").string(multiple=True)      rating = prod.xpath("following::td[2]//text()").string(multiple=True)      if url and name:         rate = re_search_once('(\d+)', rating)         session.queue(Request(url), process_review2, dict(context, url=url, name=name, date=date, publisher=publisher, rate=rate))def process_productlist(data, context, session):   for prod in data.xpath("//h2/a"):      url = prod.xpath("@href").string()      name = prod.xpath("descendant::text()").string(multiple=True)      if url and name:         session.queue(Request(url), process_review, dict(context, url=url, name=name))   next = data.xpath("//a[@class='number-next']/@href").string()   if next:      session.queue(Request(next), process_productlist, dict(context))def process_review(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.ssid = product.name   content = data.xpath("//div[regexp:test(@id,'post-\d+')]").first()   if content:      categorytxt = content.xpath("div[@class='article']//p[regexp:test(normalize-space(.),'for.*(provided|purchased|from)')][last()]//text()").string(multiple=True)      print categorytxt      if categorytxt:         product.category = re_search_once('for the (.*) provided', categorytxt)         if not(product.category):            product.category = re_search_once('for the (.*) purchased', categorytxt)         if not(product.category):            product.category = re_search_once('for the (.*) from', categorytxt)         if not(product.category):            product.category = re_search_once('for (.*) provided', categorytxt)         if not(product.category):            product.category = re_search_once('for the (.*) purchased', categorytxt)         if not(product.category):            product.category = re_search_once('for the (.*) from', categorytxt)         if not(product.category):            product.category = 'unknown'      else:         product.category = 'unknown'      manufacturertxt = content.xpath(" div[@class='article']//strong[regexp:test(text(),'Publisher')]/text()").string()      if manufacturertxt:         product.manufacturer = re_search_once(': (.*)$', manufacturertxt)      review = Review()      review.type = 'pro'      review.title = context['name']      review.url = context['url']      review.ssid = re_search_once('(\d+)', content.xpath("@id").string())      product.reviews.append(review)      datetxt = content.xpath("div[@class='postauthor']/p/text()[2]").string()      if datetxt:         review.date = re_search_once('on (.*\d{4})', datetxt)      authortxt = content.xpath(" div[@class='article']//strong[regexp:test(text(),'Reviewed By')]/text()").string()      if authortxt:         author = re_search_once(': (.*)', authortxt)         if author:            review.authors.append(Person(name=author, ssid=author))      excerpt = content.xpath(" div[@class='article']/div/p[following-sibling::center]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("div[@class='article']/div/p[following-sibling::p[regexp:test(normalize-space(.),'Reviewed [Bb]y')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("div[@class='article']/div/p//text()").string(multiple=True)      if excerpt:         review.add_property(type='excerpt', value=excerpt)      ratetxt = content.xpath("div[@class='article']//strong[regexp:test(text(),'Rating')]/text()").string()      if ratetxt:         value = re_search_once('(\d+)', ratetxt)         if value:            review.grades.append(Grade(type='overall', name='Rating', value=float(value), best=100.0))   if product.reviews:      session.emit(product)def process_review2(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.ssid = product.name   product.category = context['category']   product.manufacturer = context['publisher']   content = data.xpath("//div[@class='KonaBody']").first()   if content:      review = Review()      review.type = 'pro'      review.title = context['name']      review.url = context['url']      review.ssid = review.title      product.reviews.append(review)      review.date = context['date']      author = data.xpath("/descendant::a[contains(@href, 'mail_redirect.php?email')][normalize-space(.)][1]").first()      if author:         name = author.xpath("descendant::text()").string(multiple=True)         url = author.xpath("@href").string()         if url and name:            review.authors.append(Person(name=name, profile_url=url, ssid=name))      excerpt = content.xpath("p[following-sibling::node()[regexp:test(normalize-space(.),'Overall Impression')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("p//text()").string(multiple=True)      if excerpt:         review.add_property(type='excerpt', value=excerpt)      conclusion = content.xpath(" p[regexp:test(normalize-space(.),'Overall Impression')]//text()").string(multiple=True)      if conclusion:         review.add_property(type='conclusion', value=conclusion)      rate = context.get('rate', None)      if rate:         review.grades.append(Grade(type='overall', name='Rating', value=float(rate), best=100.0))   if product.reviews:      session.emit(product)def run(context, session):   session.sessionbreakers = [SessionBreak(max_requests=10000)]   session.queue(Request('http://www.game-over.com/content/category/reviews/'), process_productlist, {})   session.queue(Request('http://www.game-over.com/review/gamereview.php'), process_category, {})