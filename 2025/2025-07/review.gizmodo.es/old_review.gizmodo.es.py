#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):   session.browser.agent = "Mozilla/6.0"   session.queue(Request('http://es.gizmodo.com/tag/analisis'), process_revlist, {})def process_revlist(data, context, session):   for rev in data.xpath('//article[contains(@class, "js_post_item")]/following::div[h2][1]'):      url = rev.xpath("a//@href").string()      name = rev.xpath("h2//text()").string(multiple=True)      if url and name:         bad_list = [', análisis:',': ¿']         for item in bad_list:             if item in name:                 namex = name.split(item)[0]                 if len(namex) == 0:                     name = name.split(item)[1]                 else:                     name = namex                 break         bad_list2 = ['Probamos el','Analizamos el ',' nuevo ','Nuevo','Probamos ']         for item in bad_list2:             if item in name:                 name = name.replace(item, '')         session.queue(Request(url), process_review, dict(context, url=url, title=name))   next = data.xpath('//a[@rel="next"]//@href').string()   if next:       session.queue(Request(next), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.name = context['title']    product.url = context['url']    # Ssid    ssid = data.xpath('//article[contains(@id,"post_")]/@id').string()    if ssid:        ssid = re_search_once('post_(\d+)', ssid)        product.ssid = ssid    else:        product.ssid = product.name + product.url    category = data.xpath('//meta[@name="keywords"]//@content').string()    if category:        product.category = category.replace(',','|')    else:        product.category = 'unknown'    review = Review()    review.type = 'pro'    review.title = product.name    review.url = product.url    review.ssid = product.ssid + ' review'    date = data.xpath('//time[@datetime]//@datetime').string()    if date:        if 'T' in date: date = date.split('T')[0]        review.date = date    author = data.xpath('//a[contains(@data-ga,"Author")]//text()').string()    if author:        review.authors.append(Person(name=author, ssid=author))    # Conclusion    conc_list = [    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(¿Me lo compro?|¿Lo compro?|Conclusiones)")]/following-sibling::p//text()'    '//div[contains(@class,"post-content")]//h3[contains(text(),"¿Me lo compro?")]/following-sibling::p//text()',    '//div[contains(@class,"post-content")]//h3[contains(text(),"¿Lo compro?")]/following-sibling::p//text()',    '//div[contains(@class,"post-content")]//h3[contains(text(),"Conclusiones")]/following-sibling::p//text()']    conclusion = False    for item in conc_list:        conclusion = data.xpath(item).string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))            break    # Excerpt    excerpt=data.xpath('//div[contains(@class,"post-content")]//p//text()').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:135]+'...'))    for pro in data.xpath("//p[normalize-space(text())][preceding-sibling::node()[regexp:test(name(),'h\d')][1][regexp:test(normalize-space(.),'(Lo que nos gusta|Lo mejor)')]]"):        line = pro.xpath("descendant::text()").string(multiple=True)        if line:            review.add_property(type='pros', value=line)    for con in data.xpath("//p[normalize-space(text())][preceding-sibling::node()[regexp:test(name(),'h\d')][1][regexp:test(normalize-space(.),'(Lo que no nos gusta|Lo peor)')]]"):        line = con.xpath("descendant::text()").string(multiple=True)        if line:            review.add_property(type='cons', value=line)    if excerpt or conclusion:        product.reviews.append(review)    if product.reviews:        #session.browser.use_new_parser = True        session.emit(product)