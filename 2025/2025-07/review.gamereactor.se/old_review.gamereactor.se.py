#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):   session.browser.agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:32.0) Gecko/20100101 Firefox/32.0"   session.sessionbreakers = [SessionBreak(max_requests=15000)]   session.queue(Request('http://www.gamereactor.se/recensioner/', use="curl"), process_productlist, {})   session.queue(Request('http://www.gamereactor.se/hardvara/', use="curl"), process_productlist2, dict(category='HÃ¥rdvara'))   session.queue(Request('http://www.gamereactor.se/blu-ray/', use="curl"), process_productlist2, dict(category='Blu-ray'))def process_productlist(data, context, session):   for prod in data.xpath("//div[@class='leftbox artistyle1 artistyle2']//h3"):      url = prod.xpath("preceding-sibling::a[img][1]/@href").string()      name = prod.xpath("descendant::text()").string(multiple=True)      if url and name :         fixurl = re_search_once('^(.*)\?', url)         if not(fixurl): fixurl = url         session.queue(Request(fixurl, use="curl"), process_product, dict(url=fixurl, name=name, category='Games'))   nexturl = data.xpath("//td[@class='next']/a/@href").string()   if not(nexturl): nexturl = data.xpath("//a[@class='next']/@href").string()   if nexturl:      fnexturl = re_search_once('^(.*)\&sid', nexturl)      if not(fnexturl): fnexturl = nexturl      if fnexturl:         session.queue(Request(fnexturl, use="curl"), process_productlist, dict(context, url=fnexturl))   if not(data.xpath("//div[@class='leftbox artistyle1 artistyle2']//h3")):     url = data.xpath("//a[@class='buttonBox continue']/@href").string()     if url:        session.do(Request(url, use="curl"), process_productlist, dict(context))def process_productlist2(data, context, session):   for prod in data.xpath("//div[@class='leftbox artistyle1 artistyle2']//h3"):      url = prod.xpath("preceding-sibling::a[img][1]/@href").string()      name = prod.xpath("descendant::text()").string(multiple=True)      category = prod.xpath("following-sibling::div[@class='systems'][1]//text()").string(multiple=True)      if not(category): category = context['category']      if url and name and category:         fixurl = re_search_once('^(.*)\?', url)         if not(fixurl): fixurl = url         category = category.replace('/','|')         session.queue(Request(fixurl, use="curl"), process_product, dict(url=fixurl, name=name, category=category))   nexturl = data.xpath("//td[@class='next']/a/@href").string()   if not(nexturl): nexturl = data.xpath("//a[@class='next']/@href").string()   if nexturl:      fnexturl = re_search_once('^(.*)\&sid', nexturl)      if not(fnexturl): fnexturl = nexturl      if fnexturl:         session.queue(Request(fnexturl, use="curl"), process_productlist2, dict(context, url=fnexturl))   if not(data.xpath("//div[@class='leftbox artistyle1 artistyle2']//h3")):     url = data.xpath("//a[@class='buttonBox continue']/@href").string()     if url:        session.do(Request(url, use="curl"), process_productlist2, dict(context))def process_product(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    category = data.xpath('//li[descendant::span[contains(descendant::text(),"Kategori:")]]/text()').string()    if category:        product.category = context['category'] + '|' + category    else:        product.category = context['category']    product.ssid = data.xpath('//article//@data-id').string()    if not(product.ssid): product.ssid = re_search_once("/hardvara/(\d+)", product.url)    if not(product.ssid): product.ssid = re_search_once("/blu-ray/(\d+)", product.url)    brand = data.xpath("//ul[@class='infobox']//text()[regexp:test(normalize-space(self::text()), '^Utvecklare:$')]/following::text()[normalize-space(self::text())][1]").string()    if brand:        product.manufacturer = brand    review = Review()    review.type = 'pro'    review.title = context['name']    review.url = context['url']    review.ssid = product.ssid + ' review '    review.date = data.xpath("//li[@class[regexp:test(., 'publishDateTime')]]/text()[string-length(normalize-space(.))>0]").string()    author = data.xpath('//meta[@name="Author"]//@content').string()    if author:        review.authors.append(Person(name=author, ssid=author))    excerpt = data.xpath('//node()[@class="intro"]//text()').string(multiple=True)    if not excerpt: excerpt = data.xpath('//meta[@property="og:description"]//@content').string()    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    grade = data.xpath("//div[@class='bigScoreWrapper']/img").first()    if grade:        title = grade.xpath("following-sibling::span/text()").string()        value = grade.xpath("@alt").string()        if title and value:            review.grades.append(Grade(type='overall', name=title, value=float(value), best=10.0))    for g in data.xpath("//td[@class='subscore']"):        value = g.xpath("descendant::text()").string(multiple=True)        title = g.xpath("preceding-sibling::td[1]//text()").string(multiple=True)        if title and value:            review.grades.append(Grade(name=title, value=float(value), best=10.0))    pro = data.xpath("//div[@class='goodbad'][preceding-sibling::div[1][regexp:test(normalize-space(.),'\+')]]//text()").string(multiple=True)    if pro:        review.properties.append(ReviewProperty(type='pros', value=pro))    con = data.xpath("//div[@class='goodbad'][preceding-sibling::div[1][regexp:test(normalize-space(.),'\-')]]//text()").string(multiple=True)    if con:        review.properties.append(ReviewProperty(type='cons', value=con))    conclusion = data.xpath('//div[@class="breadtext"]//p[last()]//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    if grade or excerpt or conclusion:        product.reviews.append(review)        session.emit(product)    if not(data.xpath("//div[@id='main']")):        url = data.xpath("//a[@class='buttonBox continue']/@href").string()        if url:            session.do(Request(url, use="curl"), process_product, dict(context, url=url))