from agent import *from models.products import *debug = Trueimport redef getexcerpt(txtlist):    excerpt = ''    txtlist = [o.strip() for o in txtlist]    for line in txtlist:        excerpt += ' ' + line        if re_search_once("([!?.])$", line) and len(line) > 150:            break    excerpt = re.compile("\s+").sub(' ', excerpt)    return excerpt.strip()def process_view_category(data, context, session):    for view_categoryline in data.xpath("//ul[@class='lcp_catlist']/li/a"):        context['product_url'] = view_categoryline.xpath("@href").string()        context['product_name'] = view_categoryline.xpath("//text()[string-length(normalize-space(.))>1]").join("")        if context['product_url'] and context['product_name']:            session.queue(Request(context['product_url']), process_product, context)def process_product(data, context, session):    product = Product()    product.name = context['product_name']    product.url = context['product_url']    product.ssid = context['product_name']    product.category = 'binoculars'     product.manufacturer = 'Binomania'    for imageline in data.xpath("//meta[@property='og:image']"):        url_image = imageline.xpath("@content").string()        if url_image:            product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.type = 'pro'    review.title = product.name    review.url = product.url    review.ssid = product.ssid    print("=============")    date = data.xpath("//p[@class='entry-meta']/time[@class='entry-time']/text()[string-length(normalize-space(.))>1]").string()    if not date:      date = data.xpath("//div[@class='site-inner']//p[@class='entry-meta']/time[@class='entry-time']/following-sibling::text()[string-length(normalize-space(.))>1]").string()    if date:      review.date = date.replace(' by','')    txtlist = data.xpath("//div[@class='entry-inner']/p[.//text()[string-length(normalize-space(.))>70]]//text()[string-length(normalize-space(.))>0][not(ancestor::script)]").strings()    if not txtlist:      txtlist = data.xpath("//div[@class='entry-content']/p[.//text()[string-length(normalize-space(.))>70]]//text()[string-length(normalize-space(.))>0][not(ancestor::script)]").strings()    if txtlist:        excerpt = getexcerpt(txtlist)        if excerpt:            review.properties.append(ReviewProperty(type='excerpt', value = excerpt))    username = data.xpath("//div[@class='site-inner']//p[@class='entry-meta']//a[@rel='author']//text()[string-length(normalize-space(.))>0]").string()    if username:        profile = data.xpath("//div[@class='site-inner']//p[@class='entry-meta']//a[@rel='author']/@href").string()        review.authors = Person(name = username, ssid = username, profile_url = profile)     for prosline in data.xpath("//p[strong[text()='Pregi' or text()='PREGI']]/following-sibling::ul[1]/li"):        pros = prosline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if pros:            review.properties.append(ReviewProperty(name='Pregi', type='pros', value=pros))              for prosline in data.xpath("//strong[text()='Pregi']/following-sibling::strong/text()[string-length(normalize-space(.))>1]"):        pros = prosline.string()        if pros:            pros = pros.replace('•','')            review.properties.append(ReviewProperty(name='Pregi', type='pros', value=pros))              for prosline in data.xpath("//p[strong[text()='Pregi' or text()='PREGI']]/following-sibling::p[1]/strong[1]//text()[string-length(normalize-space(.))>15]"):        pros = prosline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if pros:            review.properties.append(ReviewProperty(name='Pregi', type='pros', value=pros))              for consline in data.xpath("//p[strong[text()='Difetti' or text()='DIFETTI']]/following-sibling::ul[1]/li"):        cons = consline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if cons:            review.properties.append(ReviewProperty(name='Difetti', type='cons', value=cons))              for consline in data.xpath("//strong[text()='Difetti']/following-sibling::strong/text()[string-length(normalize-space(.))>1]"):        cons = consline.string()        if cons:            cons = cons.replace('•','')            review.properties.append(ReviewProperty(name='Difetti', type='cons', value=cons))              for consline in data.xpath("//p[strong[text()='Difetti' or text()='DIFETTI']]/following-sibling::p[1]/strong[1]//text()[string-length(normalize-space(.))>15]"):        cons = consline.string()        if cons:            review.properties.append(ReviewProperty(name='Difetti', type='cons', value=cons))              summary = data.xpath("//h2[.//text()[regexp:test(.,'In sintesi|FINALI|In definitiva')]]/following-sibling::p[.//text()[string-length(normalize-space(.))>50]][1]//text()[string-length(normalize-space(.))>0]").join(" ")    if not summary:      summary = data.xpath("//p[strong/text()[regexp:test(.,'In sintesi|FINALI|In definitiva')]]/following-sibling::p[.//text()[string-length(normalize-space(.))>50]][1]//text()[string-length(normalize-space(.))>0]").join(" ")    if summary:        review.properties.append(ReviewProperty(name='In sintesi', type='summary', value=summary))          if txtlist:       product.reviews.append(review)          session.emit(product)def run(context, session):    session.browser.use_new_parser = "True"    session.queue(Request('https://www.binomania.it/recensioni-binomania/'), process_view_category, {})