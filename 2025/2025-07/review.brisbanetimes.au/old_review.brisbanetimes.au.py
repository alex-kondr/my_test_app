from agent import *from models.products import *debug = Trueimport redef process_category(data, context, session):   for cat in data.xpath("//button[@aria-controls='categoryList']/following-sibling::ul/li/a"):      url = cat.xpath("@href").string()      category = cat.xpath("descendant::text()").string(multiple=True)      if url and category:         session.queue(Request(url), process_revlist, dict(context, category='%s|%s'%(context['category'], category)))def process_revlist(data, context, session):   for rev in data.xpath("//h3[preceding-sibling::h5[regexp:test(text(),'Review')]]/a"):      url = rev.xpath("@href").string()      title = rev.xpath("descendant::text()").string(multiple=True)      if url and title:         session.queue(Request(url), process_review, dict(context, url=url, title=title))   nexturl = data.xpath("//a[@aria-label='next page']/@href").string()   if nexturl:      session.queue(Request(nexturl), process_revlist, dict(context))def process_review(data, context, session):   product = Product()   product.name = context['title']   product.url = context['url']   product.ssid = product.name   product.category = context['category']   content = data.xpath("//div[@id='content']").first()   if content:      name = content.xpath("descendant::strong/em/text()").string()      if name:         product.name = name         product.ssid = name       review = Review()      review.type = 'pro'      review.title = context['title']      review.url = context['url']      review.ssid = review.title        datetxt = content.xpath("descendant::time/@datetime").string()      if datetxt:          review.date = datetxt.split('t')[0]      author = content.xpath("descendant::a[regexp:test(@title,'Articles by')]").first()      if author:         url = author.xpath("@href").string()         name = author.xpath("descendant::text()").string(multiple=True)         if url and name:            review.authors.append(Person(name=name, ssid=name, profile_url=url))      else:         name = content.xpath("descendant::h5//span/text()").string(multiple=True)         if name:            review.authors.append(Person(name=name, ssid=name))      ratetxt = data.xpath("//div[@class='articleBody']//text()[regexp:test(normalize-space(self::text()), '^Rating')]").string()      if ratetxt:         rate = re_search_once("(\d\.?\d*)", ratetxt)         if rate:            review.grades.append(Grade(type='overall', name='Rating', value=float(rate), best=5.0))      excerpt = content.xpath("descendant::div[regexp:test(@class,'undefined')]/p[normalize-space(text())]//text()").string(multiple=True)#      if not(excerpt):#         excerpt = content.xpath("div[@itemprop='articleBody']/p[normalize-space(text())][preceding-sibling::p[strong][1][regexp:test(normalize-space(.),'THE LOW-?DOWN','i')]]//text()").string(multiple=True)#      if not(excerpt):#         excerpt = content.xpath("div[@itemprop='articleBody']/p[normalize-space(text())][following-sibling::h3[regexp:test(normalize-space(.),'VERDICT','i')]]//text()").string(multiple=True)#      if not(excerpt):#         excerpt = content.xpath("div[@itemprop='articleBody']/p[normalize-space(text())][following-sibling::p[strong][regexp:test(normalize-space(.),'VERDICT','i')]]//text()").string(multiple=True)      if excerpt:         review.add_property(type='excerpt', value=excerpt)      pro = content.xpath(" div[@itemprop='articleBody']/p[normalize-space(text())][preceding-sibling::h3[1][regexp:test(normalize-space(.),'^LIKE','i')]]//text()").string(multiple=True)      if not(pro):         pro = content.xpath(" div[@itemprop='articleBody']/p[normalize-space(text())][preceding-sibling::p[strong][1][regexp:test(normalize-space(.),'^LIKE','i')]]//text()").string(multiple=True)      if pro:         review.add_property(type='pros', value=pro)      con = content.xpath(" div[@itemprop='articleBody']/p[normalize-space(text())][preceding-sibling::h3[1][regexp:test(normalize-space(.),'^DISLIKE','i')]]//text()").string(multiple=True)      if not(con):         con = content.xpath(" div[@itemprop='articleBody']/p[normalize-space(text())][preceding-sibling::p[strong][1][regexp:test(normalize-space(.),'^DISLIKE','i')]]//text()").string(multiple=True)      if con:         review.add_property(type='cons', value=con)      conclusion = content.xpath(" descendant::div[regexp:test(@class,'undefined')]/p[normalize-space(text())][last()]//text()").string(multiple=True)      if not(conclusion):         conclusion = content.xpath(" div[@itemprop='articleBody']/p[normalize-space(text())][preceding-sibling::p[strong][1][regexp:test(normalize-space(.),'VERDICT','i')]]//text()").string(multiple=True)      if conclusion:         product.reviews.append(review)         review.add_property(type='conclusion', value=conclusion)   if product.reviews:      session.emit(product)def run(context, session):   session.browser.agent = "Mozilla/6.0"   session.queue(Request('https://www.brisbanetimes.com.au/technology'), process_category, dict(category='Technology'))