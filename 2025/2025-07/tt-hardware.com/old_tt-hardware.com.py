from agent import *from models.products import *def run(context, session):   session.browser.agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:14.0) Gecko/20100101 Firefox/14.0.1'   session.queue(Request('https://tt-hardware.com/review/'), process_revlist, {})def process_category(data, context, session):   for cat in data.xpath("//div[@class='moduletable_menu']/ul/li[regexp:test(normalize-space(.),'^Tests')][1]/ul/li/a"):      category = cat.xpath("descendant::text()").string(multiple=True)      url = cat.xpath("@href").string()      if url:         session.queue(Request(url), process_revlist, dict(category=category))def process_revlist(data,context,session):   for rev in data.xpath("//h3[@class='entry-title td-module-title']/a[regexp:test(@href, 'review')]"):      name = rev.xpath("descendant::text()").string(multiple=True)      url = rev.xpath("@href").string()      if url and name:         session.queue(Request(url), process_review, dict(context, url=url, name=name))   next = data.xpath("//a[@title='Suivant']/@href").string()   if next:      session.do(Request(next), process_revlist, dict(context))def process_review(data,context,session):   try:      posts = data.xpath("/")   except ReaderException:      return   product = Product()   product.name = data.xpath("//div/@data-aawp-product-title").string()   product.url = context['url']   product.ssid = product.name   product.category = 'Computer Accessories'      content = data.xpath("//div[regexp:test(@class,'td-post-content')]").first()   if content:             review = Review()      product.reviews.append(review)      review.type = 'pro'      review.title = context['name']      review.url = product.url      review.ssid = re_search_once('(\d+)', data.xpath("//article/@id").string())      review.date = data.xpath("//span[@class='td-post-date']/text()").string(multiple=True)      author = data.xpath("//div[@class='td-post-author-name']/a").first()      if author:         name = author.xpath("descendant::text()").string(multiple=True)         url = author.xpath("@href").string()         if url and name:            review.authors.append(Person(name=name, ssid=name))      excerpt = content.xpath("p[following-sibling::h2[regexp:test(normalize-space(.),'^Présentation')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("p[following-sibling::node()[regexp:test(normalize-space(.),'^Présentation')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("p[count(preceding-sibling::h2)=0]//text()").string(multiple=True)      print excerpt      if excerpt:         review.properties.append(ReviewProperty(type='excerpt', value=excerpt))      conclusion = content.xpath("p[preceding-sibling::h2[regexp:test(normalize-space(.),'^Benchmarking')]]//text()").string(multiple=True)      if not(conclusion):         conclusion = content.xpath("p[preceding-sibling::node()[regexp:test(normalize-space(.),'^Benchmarking')]]//text()").string(multiple=True)      if not(conclusion):         conclusion = content.xpath("p[count(following-sibling::h2)=0]//text()").string(multiple=True)      print conclusion      if conclusion:         review.properties.append(ReviewProperty(type='conclusion', value=conclusion))      pro = content.xpath("descendant::text()[not(ancestor::strong or ancestor::b or ancestor::ul or parent::div)][preceding::text()[regexp:test(normalize-space(.),'^(Plus|Pour)','i')] and following::text()[regexp:test(normalize-space(.),'^(Minus|Contre)','i')]]").string(multiple=True)      if pro:         review.properties.append(ReviewProperty(type='pros', value=pro))      con = content.xpath("descendant::text()[not(ancestor::strong or ancestor::b or ancestor::ul or parent::div)][preceding::text()[regexp:test(normalize-space(.),'^(Minus|Contre)','i')]]").string(multiple=True)      if con:         review.properties.append(ReviewProperty(type='cons', value=con))#      score = content.xpath("p[regexp:test(normalize-space(.),'(Conclusion|Remarques)')]//text()[regexp:test(normalize-space(.),'\d\/\d+')]").string()#      if not(score):      score = content.xpath("descendant::text()[regexp:test(normalize-space(.),'\d\/10$')]").string()      print score      if score:         value = re_search_once('([\d\,]+)\/', score)         if value:            value = value.replace(',','.')            review.grades.append(Grade(name='Rating', type='overall', value=float(value), best=10))      score = content.xpath("preceding::span[@class='content_rating'][1]").first()      print score      if score:         value = len(score.xpath("descendant::img[regexp:test(@src,'rating_star.png')] "))         votes = re_search_once('(\d+)', score.xpath("descendant::text()").string(multiple=True))         print value, votes         if value and votes:            review.grades.append(Grade(name='Note des utilisateurs', value=float(value), best=5, voters=votes))      if review.properties:         session.emit(product)