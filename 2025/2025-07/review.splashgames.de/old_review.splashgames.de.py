from agent import *from models.products import *debug = Trueimport redef process_revlist(data, context, session):   for rev in data.xpath("//tr[count(td[@class='tabellenueberschrift'])=3 and regexp:test(normalize-space(.),'Rezension')]/following-sibling::tr/td[1]//a"):      url = rev.xpath("@href").string()      name = rev.xpath("descendant::text()").string(multiple=True)      date = rev.xpath("following::td[1]//text()").string(multiple=True)      if url and name:         session.queue(Request(url), process_review, dict(url=url, name=name, date=date))   nexturl = data.xpath("//a[regexp:test(normalize-space(.),'^>>$')]/@href").string()   if nexturl:      session.queue(Request(nexturl), process_revlist, {})def process_review(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.ssid = re_search_once("/rezension/(\d+)", product.url)   content = data.xpath("//td[@class='content'][table[@class='designtabelle']]").first()   if content:      product.category = content.xpath(" descendant::text()[regexp:test(self::text(),'^Systeme')]/following::text()[normalize-space(.)][1]").string()      product.manufacturer = content.xpath("descendant::text()[regexp:test(self::text(),'^Entwickler')]/following::text()[normalize-space(.)][1]").string()      review = Review()      review.type = 'pro'      review.title = context['name']      review.url = context['url']      review.ssid = product.ssid      product.reviews.append(review)      review.date = context['date']      author = content.xpath("descendant::text()[regexp:test(self::text(), '^Autor der Besprechung')]/following::text()[normalize-space(.)][1]").string()      if author:         review.authors.append(Person(name=author, ssid=author))      excerpt = content.xpath("descendant::node()[regexp:test(text(),'Inhalt')]/following-sibling::node()/descendant-or-self::text()[following::text()[regexp:test(self::text(),'Fazit')]]").string(multiple=True)      if excerpt:         review.add_property(type='excerpt', value=excerpt)      conclusion = data.xpath("descendant::node()[regexp:test(text(),'Fazit')]/following-sibling::node()/descendant-or-self::text()").string(multiple=True)      if conclusion:         review.add_property(type='conclusion', value=conclusion)      for pro in data.xpath("descendant::img[regexp:test(@title,'Wertung:')]/following::td[1]//ul/li"):         line = pro.xpath("descendant::text()").string(multiple=True)         if line:            review.add_property(type='pros', value=line)      for con in data.xpath("descendant::img[regexp:test(@title,'Wertung:')]/following::td[2]//ul/li"):         line = con.xpath("descendant::text()").string(multiple=True)         if line:            review.add_property(type='cons', value=line)      for g in content.xpath(" descendant::img[regexp:test(@title,'Wertung:')]/following-sibling::text()"):         line = g.string()         if line:            tmp = re_search_once("^(.*): (\d+\.?\d*)$", line)            if tmp and len(tmp) == 2:               if tmp[0] == 'Wertung':                  review.grades.append(Grade(type='overall', name=tmp[0], value=float(tmp[1]), best=10.0))               else:                  review.grades.append(Grade(name=tmp[0], value=float(tmp[1]), best=10.0))   if product.reviews:      session.emit(product)   def run(context, session):   session.queue(Request('http://www.splashgames.de/php/rezensionen/alle'), process_revlist, {})