import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     session.browser.use_new_parser = True    session.queue(Request('http://www.photoreview.com.au/reviews/'), process_frontpage, {})def process_frontpage(data, context, session):    for p in data.xpath("//div[@id='primary']//article//h2/a"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            context['url'] = context['url'].strip('+')            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//div[@class='nav-links']//a[@class[regexp:test(., 'next')]]/@href").string()    if next:        session.queue(Request(next), process_frontpage, {})def process_product(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    category = re_search_once('\/reviews\/([^\/]+)\/', product.url)    if category:        category = category.replace('-', ' ').title()    else:        category = "Digital Cameras"    product.category = Category(name = category)    product.ssid = re_search_once('\/([^\/]+)\/*$', product.url)    review = Review()    review.title = context['name']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    jstxt = data.xpath("//text()[regexp:test(., 'datePublished')]").string()    if jstxt:        review.date = re_search_once('datePublished\"\s*\:\s*\"([^\"]+)', jstxt)    has_grades = False    grade = data.xpath("//div[@class='rating_number']//span[@class='number']//text()[regexp:test(., '\d')]").string()    if grade:        review.grades.append(Grade(name="Photo review", value = grade, worst = 0, best = 10, type = 'overall'))        has_grades = True    for g in data.xpath("//*[self::h4 or self::h5][regexp:test(., 'Rating')]/following-sibling::ul[li][1]/li/text()[string-length(normalize-space(.))>0]"):        g_name = re_search_once('^(.+)\:\s*\d+', g.string())        g_value = re_search_once('\:\s*(\d+\.*\d*)', g.string())        if g_name and g_value:            g_value = g_value.strip()            review.grades.append(Grade(name = g_name, value = g_value, worst = 0, best = 10))            has_grades = True    excerpt = data.xpath("//*[self::h4 or self::h5][regexp:test(., 'Full review')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    summary = data.xpath("//*[self::h4 or self::h5][regexp:test(., '[Ss]ummary')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary))    conclusion = data.xpath("//p[*[self::b or self::strong][regexp:test(., 'Conclusion')]]/text()[string-length(normalize-space(.))>0]").string()    if conclusion:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='conclusion'), value=conclusion, name = "Conclusion"))	    award = data.xpath("//div[@class='editorschoice']//img/@src").string()    if award:        product.properties.append(ProductProperty(type=ProductPropertyType(name="awards"), value = {'name': 'Editor\'s Choice', 'image_src': award}))    if (excerpt or summary or conclusion) and has_grades:        product.reviews.append(review)        session.emit(product)