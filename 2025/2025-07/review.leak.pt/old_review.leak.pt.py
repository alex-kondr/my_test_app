import stringfrom agent import *from models.products import *import redef run(context, session):    session.queue(Request('https://www.leak.pt/reviews/'), process_productlist, {}) def process_productlist(data, context, session):    for rev in data.xpath('//div[contains(@class,"tdb_module_loop")]'):        prUrl = rev.xpath('descendant::h3[contains(@class,"entry-title")]/a/@href').string()        prName = rev.xpath('descendant::h3[contains(@class,"entry-title")]/a/text()').string()        if prName:            prName = prName.replace('(Mini-Review)','').replace('Mini-review','').replace('(Análise/Opinião)','').replace('(Review)','').replace('(Análise)','').replace('[Review/Análise]','').replace('[Review]','').replace('Review:','').replace('Review','').replace('Análise –','').replace('Análise:','').replace('Análise','').strip()        if prUrl and prName:            session.queue(Request(prUrl), process_product, dict(context, url=prUrl, name=prName) )    nxtLink = data.xpath("//link[@rel='next']/@href").string()    if nxtLink:        session.queue(Request(nxtLink), process_productlist, context)		def process_product(data, context, session):     product = Product()    product.url = context['url']    product.ssid = re_search_once("postid-(\d+)", data.xpath('//body[contains(@class,"postid-")]/@class').string())    product.name = context['name']    catName = data.xpath('//div[contains(@class, "tdb-category")]/a[@class="tdb-entry-category"]/text()[not(contains(normalize-space(.),"Reviews")) and not(contains(normalize-space(.),"Featured")) and not(contains(normalize-space(.),"Especiais"))]').join(" | ")    if not(catName):        catName = catName = "Tech / Games"    product.category = catName    for imageline in data.xpath("//meta[@property='og:image']"):        url_image = imageline.xpath("@content").string()        if url_image:            product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.url = context['url']     review.ssid = product.ssid    review.title = context['name']    review.type = 'pro'    date_str = data.xpath('//div[contains(@class, "tdb-block-inner")]/time[contains(@class,"entry-date") and contains(@class,"td-module-date")]/@datetime').string()    date_str = date_str.split("T")[0]    date = time.strftime("%Y-%m-%d", time.strptime(date_str, "%Y-%m-%d"))    if date:        review.date = date    product.reviews.append(review)    author = data.xpath('//div[@class="tdb-author-name-wrap"]/a[@class="tdb-author-name"]/text()').string()    review.authors = Person(name = author, ssid = author)    excerpt = data.xpath('//div[@class="bialty-container"]/p[string-length(normalize-space(.))>150][1]//text()').string(multiple=True)    review.properties.append(ReviewProperty(type='excerpt', value = excerpt))    conclusion = data.xpath("//node()[regexp:test(name(),'h\d')][contains(normalize-space(.),'Conclusão')]/following-sibling::p[string-length(normalize-space(.))>150][1]//text() | //node()[regexp:test(name(),'h\d')][contains(normalize-space(.),'Conclusões')]/following-sibling::p[string-length(normalize-space(.))>150][1]//text() | //node()[regexp:test(name(),'h\d')][contains(normalize-space(.),'Veredicto')]/following-sibling::p[string-length(normalize-space(.))>150][1]//text()").string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    pros = data.xpath('//node()[regexp:test(name(),"h\d")][contains(normalize-space(.),"Prós")]/following-sibling::ul[1]/li//text() | //node()[regexp:test(name(),"h\d")][contains(normalize-space(.),"Pros")]/following-sibling::ul[1]/li//text()').strings()    cons = data.xpath('//node()[regexp:test(name(),"h\d")][contains(normalize-space(.),"Contras")]/following-sibling::ul[1]/li//text()').strings()    cons = [f.strip().strip('+-:') for f in cons if f.strip()]    pros = [f.strip().strip('+-:') for f in pros if f.strip()]    cons = [f.strip().strip('+-:') for f in cons if f.strip() ]    pros = [f.strip().strip('+-:') for f in pros if f.strip() ]    if pros:	review.properties.append(ReviewProperty(name="Pros", type="pros", value=pros))    if cons :	review.properties.append(ReviewProperty(name="Cons", type="cons", value=cons))    grade_txt = data.xpath('//div[@class="td-post-content tagdiv-type"]/descendant::node()[contains(text(),"Classificação:")]/text()').string()    if grade_txt:        grade = grade_txt.split('Classificação:')[-1].split('/')[0].replace(",",".")        if grade:            review.grades.append(Grade(value=float(grade), best=10, worst=0, type='overall'))    session.emit(product)