from agent import *from models.products import *import simplejsonNOCAT = ['Editors Choice', 'Reviews', 'reviews', 'Featured']XCAT = ['News']def run(context, session):    session.queue(Request("https://phandroid.com/category/reviews/", use="curl", force_charset='utf-8'), process_revlist, dict())def process_revlist(data, context, session):    revs = data.xpath('//div[@class="list-item"]')    for rev in revs:        title = rev.xpath('.//h3/a/text()').string()        url = rev.xpath('.//h3/a/@href').string()        date = rev.xpath('.//time/@datetime').string()        author_name = rev.xpath('.//span[@class="entry-author"]/a/text()').string()        author_url = rev.xpath('.//span[@class="entry-author"]/a/@href').string()        grade = rev.xpath('.//span[@class="post-score-value"]/text()').string()        cat = rev.xpath('.//a[contains(@class, "cat-theme")]/text()').string()        if cat in NOCAT:            cat = 'Tech'        elif cat in XCAT:            continue        if title and url:            session.queue(Request(url, use="curl", force_charset='utf-8'), process_review, dict(context, title=title, url=url, cat=cat, date=date, author_name=author_name, author_url=author_url, grade=grade))    next_url = data.xpath('//link[@rel="next"]/@href').string()    if next_url:        session.queue(Request(next_url, use="curl", force_charset='utf-8'), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.name = context['title'].split(' Review')[0].split(' review')[0].split('Review: ')[-1]    product.ssid = context['url'].split('/')[-2]    product.category = context['cat']    product.url = data.xpath('(//a[contains(@class, "product")] | //a[contains(., "Buy")])[1]/@href').string()    if not product.url:        product.url = context['url']    review = Review()    review.title = context['title']    review.url = context['url']    review.ssid = product.ssid    review.type = 'pro'    date = context.get('date')    if date:        review.date = date.split('T')[0]    author_name = context.get('author_name')    author_url = context.get('author_url')    if author_name and author_url:        author_ssid = author_url.split('/')[-2]        review.authors.append(Person(name=author_name, profile_url=author_url, ssid=author_ssid))    elif author_name:        review.authors.append(Person(name=author_name, ssid=author_name))    grade_overall = context.get('grade')    if grade_overall:        review.grades.append(Grade(type='overall', value=float(grade_overall), best=10.0))    if not grade_overall:        grade_overall = data.xpath('//span[@itemprop="ratingValue"][not(contains(., "X.X"))]/text()').string()        if not grade_overall:            grade_overall = data.xpath('//span[@itemprop="reviewRating"]/text()').string(multiple=True)            if grade_overall and not grade_overall.split('(')[-1].split('/')[0].strip():                grade_overall = ''        if not grade_overall:            grade_overall = str(len(data.xpath('//span[@itemprop="reviewRating"]/i[contains(., "star_full")]')))        if grade_overall:            value = grade_overall.split('(')[-1].split('/')[0]            review.grades.append(Grade(type='overall', value=float(value), best=5.0))    pros = data.xpath('//div[@class="mnmd-review__pros"]//span/text()').strings()    if not pros:        pros = data.xpath('//div[@class="pros"]//li/text()').strings()    for pro in pros:        pro = pro.replace('+', '')        review.add_property(type='pros', value=pro)    cons = data.xpath('//div[@class="mnmd-review__cons"]//span/text()').strings()    if not cons:        cons = data.xpath('//div[@class="cons"]//li/text()').strings()    for con in cons:        con = con.replace('-', '')        review.add_property(type='cons', value=con)    summary = data.xpath('//div[contains(@class, "summary")]//text()').string(multiple=True)    if summary:        review.add_property(type='summary', value=summary)    conclusion = data.xpath('//h2[regexp:test(., "conclusion", "i") or regexp:test(., "final thoughts", "i")]//following-sibling::p[not(contains(., "Note:"))]//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//h2[regexp:test(., "conclusion", "i") or regexp:test(., "final thoughts", "i")]//following-sibling::div[@class="pros-cons-container"]//p//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion.strip()))    excerpt = data.xpath('//div[contains(@class, "entry-content")]//p[not(img)][not(.//strong[contains(., "Read:")])][not(preceding::h2[regexp:test(., "conclusion", "i") or regexp:test(., "final thoughts", "i")])][not(regexp:test(., "\[via", "i"))]//text()').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))        product.reviews.append(review)        session.emit(product)