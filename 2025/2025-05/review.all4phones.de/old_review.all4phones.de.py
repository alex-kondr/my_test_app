from agent import *from models.products import *debug = Trueimport redef getexcerpt(txtlist):   excerpt = ''   txtlist = [o.strip() for o in txtlist]   for line in txtlist:      excerpt += ' ' + line      if re_search_once("([!?.])$", line) and len(line) > 100:         break   excerpt = re.compile("\s+").sub(' ', excerpt)   if ".A4PMBg { width: 375px; height: 312px; } @media(min-width: 300px) { .A4PMBg { width: 375px; height: 312px; } } " in excerpt:      excerpt = excerpt.split(".A4PMBg { width: 375px; height: 312px; } @media(min-width: 300px) { .A4PMBg { width: 375px; height: 312px; } } ")[1]   return excerpt.strip()def process_frontpage(data, context, session):   for link in data.xpath("/descendant::h3[@class='threadtitle'][position() > 1]//a"):      url = link.xpath("@href").string()      title = link.xpath("descendant::text()").string(multiple=True)      if url and title:         session.queue(Request(url, use="curl"), process_review, dict(url=url, title=title))   nexturl = data.xpath("//form[contains(@class,'pagination')]/span[@class='selected']/following-sibling::span[1]/a[regexp:test(text(),'\d+')]/@href").string()   if nexturl:      session.queue(Request(nexturl, use="curl"), process_frontpage, dict(context))def process_review(data, context, session):   name = re_search_once("^Testbericht: (.*)$", context['title'])   if not name:      name = re_search_once("Test: (.*)$", context['title'])   if not name:      name = context['title']   name = name.split(" [TEST]")[0].split(" Erfahrungsberichte")[0].split(" Test")[0]   if "Testbericht : " in name:      name = name.split("Testbericht : ")[1]   if "Review: " in name:      name = name.split("Review: ")[1]   product = Product()   product.name = name   product.url = context['url']   product.ssid = product.name   product.category = 'Mobilephone'   review = Review()   review.type = 'pro'   review.title = context['title']   review.url = context['url']   review.ssid = review.title   review.date = data.xpath("/descendant::span[@class='date'][1]//text()").string(multiple=True)   product.reviews.append(review)   txtlist = data.xpath("/descendant::div[regexp:test(@id, '^post_message_\d+$')][1]//text()[not(ancestor::script)]").strings()   if txtlist:      excerpt = getexcerpt(txtlist)      if excerpt:         review.add_property(type='excerpt', value=excerpt)   conclusion = data.xpath("//text()[regexp:test(normalize-space(self::text()), '^Fazit:$', 'i')]/following::text()[following::text()[regexp:test(normalize-space(self::text()), '^Positiv\s*:$', 'i')]]").string(multiple=True)   if conclusion:      review.add_property(type='conclusion', value=conclusion)      pros = data.xpath("//b[normalize-space(.) = '(+)']/following::text()[normalize-space(self::text())][1]")   if pros:      for pro in pros:         line = pro.string()         if line:            review.add_property(type='pros', value=line)   else:      pros = data.xpath("//font[contains(., 'Positiv')]/following-sibling::node()")      if pros:         firstpro = None         for pro in pros:            pro = pro.string().strip()            if "- " in pro:               firstpro = True               review.add_property(type="pros", value=pro.replace("- ", ""))            if firstpro and pro == "":               break   cons = data.xpath("//b[normalize-space(.) = '(-)']/following::text()[normalize-space(self::text())][1]")   if cons:      for con in cons:         line = con.string()         if line:            review.add_property(type='cons', value=line)   else:      cons = data.xpath("//u[contains(., 'Negativ')]/following-sibling::node()")      if cons:         firstcon = None         for con in cons:            con = con.string().strip()            if "- " in con:               firstcon = True               review.add_property(type="cons", value=con.replace("- ", ""))            if firstcon and con == "":               break   ratetxt = data.xpath("//text()[normalize-space(self::text()) = 'Punkten']/following::text()[normalize-space(self::text())][1]").string()   if ratetxt:      rate = re_search_once("(\d+)", ratetxt)      if rate:         review.grades.append(Grade(type='overall', name='Punkten', value=float(rate), best=100.0))   session.emit(product)def run(context, session):   session.queue(Request('http://www.all4phones.de/forum/handy-testberichte/', use="curl"), process_frontpage, {})