from agent import *from models.products import *def process_revlist(data, context, session):   for rev in data.xpath("//div[regexp:test(@class, 'mvp-main-blog-cont ')]/a|//ul[regexp:test(@class,'mvp-blog-story-list')]/li/a"):      url = rev.xpath("@href").string()      title = rev.xpath("following::h2[1]//text()").string(multiple=True)      if url and title:         name = re_search_once(u'^(.*), an[áa]lisis', title)         if not name:            name = title         if name:            session.queue(Request(url), process_review, dict(context, url=url, title=title, name=name))   nexturl = data.xpath("//a[regexp:test(normalize-space(.),'Next ›')]/@href").string()   if nexturl:      session.queue(Request(nexturl), process_revlist, dict(context))def process_review(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.ssid = product.name   product.category = data.xpath("//a[@class='mvp-post-cat-link']/span[@class='mvp-post-cat left']//text()").string(multiple=True)   flag = 0   content = data.xpath("//div[@id='mvp-content-body']").first()   if content:      manufacturer = re_search_once('Fabricante. (.*)', content.xpath(" descendant::li[regexp:test(text(),'Fabricante')]/text()").string(multiple=True))      name = re_search_once('Modelo. (.*)', content.xpath("descendant::li[regexp:test(text(),'Modelo')]/text()").string(multiple=True))      if name and manufacturer:         product.name = '%s %s'%(manufacturer, name)         product.ssid = product.name      else:         name = data.xpath(" descendant::span[@class='item']//text()").string()         if name:            product.name = name            product.ssid = name      review = Review()      review.type = 'pro'      review.title = context['title']      review.url = context['url']      ssid = data.xpath("//div/@data-post-id").string()      if not ssid:         ssid = review.url.split("/")[-1]      if ssid == "":         ssid = review.url.split("/")[-2]      review.ssid = ssid      review.date = data.xpath("//div[regexp:test(@class,'mvp-author-info-date')]//time/@datetime").string()      author = data.xpath("//div[regexp:test(@class,'mvp-author-info-name')]//a[@rel='author']").first()      if author:         name = author.xpath("descendant::text()").string()         url = author.xpath("@href").string()         if url and name:            review.authors.append(Person(name=name, ssid=name, profile_url=url))      excerpt = data.xpath("//div/p[following-sibling::h3[regexp:test(normalize-space(.),'Conclusiones')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = data.xpath("//div/p[following-sibling::h3[regexp:test(normalize-space(.),'(Conclusión|Conclusiones)', 'i')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = data.xpath("//div/p[following-sibling::node()[regexp:test(normalize-space(.),'(Conclusión|Conclusiones)', 'i')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("descendant::div/p//text()").string(multiple=True)      if excerpt:         review.add_property(type='excerpt', value=excerpt)      conclusion = data.xpath("//div[@class='rwp-summary-wrap']/div//text()").string(multiple=True)      if not(conclusion):         conclusion = data.xpath("//div/p[preceding-sibling::h2[regexp:test(normalize-space(.),'(Conclusión|Conclusiones)', 'i')]][not(regexp:test(normalize-space(.),':$'))]//text()").string(multiple=True)      if not(conclusion):         conclusion = data.xpath("//div/p[preceding-sibling::h2[regexp:test(normalize-space(.),'(Conclusión|Conclusiones)', 'i')]]//text()").string(multiple=True)      if not(conclusion):         conclusion = data.xpath("//div/p[preceding-sibling::node()[regexp:test(normalize-space(.),'(Conclusión|Conclusiones)', 'i')]]//text()").string(multiple=True)      if conclusion:         flag = 1         review.add_property(type='conclusion', value=conclusion)      pros = data.xpath("//div[@class='rwp-pros-wrap']/div/text()").string(multiple=True)      if pros:         review.add_property(type='pros', value=pros)      cons = data.xpath("//div[@class='rwp-cons-wrap']/div/text()").string(multiple=True)      if cons:         review.add_property(type='cons', value=cons)      value = data.xpath("//span[@property='ratingValue']/text()").string()      if value and flag:         value = value.replace(',', '.')         review.grades.append(Grade(name='Nota', type='overall', best=10.0, value=float(value)))         product.reviews.append(review)      for g in data.xpath("//span[@class='rwp-criterion-label']"):         name = g.xpath("descendant::text()").string()         value = g.xpath("following-sibling::span//text()").string()         if value and name:            value = value.replace(',', '.')            review.grades.append(Grade(name=name, best=10.0, value=float(value)))      award = data.xpath("//a[regexp:test(@href,'recomendado')]").first()      if award:         imagesrc = award.xpath("@href").string()         name = award.xpath("img/@alt").string()         if imagesrc and name:            review.add_property(type='awards', value=dict(name=name, image_src=imagesrc))   if product.reviews:      session.emit(product)def run(context, session):   session.sessionbreakers = [SessionBreak(max_requests=10000)]   session.queue(Request('https://www.muycomputer.com/analisis/'), process_revlist, {})