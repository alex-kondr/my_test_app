import stringfrom agent import *from models.products import *import redebug = Truedef process_old(data, context, session):    pn = dict()    pu = dict()    pd = dict()    i = 0    for p in data.xpath("//table[@width='530']/tr[position()>1]/td[1]/p[position()>1]/a"):        name = p.xpath("text()[string-length(normalize-space(.))>0]").string()        pn[i] = re_search_once('\. (.+)', name)        pu[i] = p.xpath("@href").string()        i += 1    q = i    i = 0    for d in data.xpath("//table[@width='530']/tr[position()>1]/td[3]/p[position()>1]/em/text()[string-length(normalize-space(.))>0]"):        pd[i] = d.string()        i += 1    for i in range(0,q):        if pn[i] and pu[i] and pd[i]:            product = Product()            product.name = pn[i]            product.ssid = pu[i]            product.category = "Unknown old products"            review = Review()            review.ssid = product.ssid            review.date = pd[i]            review.type = 'pro'            product.properties.append(ProductProperty(type=ProductPropertyType(name='link.review'), value = {'url': pu[i], 'title': product.name}))            product.reviews.append(review)            session.emit(product)def process_frontpage(data, context, session):    for p in data.xpath("//table[@width='530']/tr/td/p/a"):        name = p.xpath("text()[string-length(normalize-space(.))>0]").string()        context['name'] = re_search_once('\. (.+)', name)        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            if re_search_once('(.+).pdf', context['url']):                product = Product()                product.name = context['name']                product.ssid = context['url']                product.category = Category(name = "Unknown")                product.properties.append(ProductProperty(type=ProductPropertyType(name='link.review'), value = {'url': context['url'], 'title': product.name}))                session.emit(product)            else:                session.queue(Request(context['url']), process_product, context)def process_product(data, context, session):    product = Product()    review = Review()    product.name = context['name']    product.url = context['url']    product.category = Category(name = context['category'])    product.ssid = product.url    review.ssid = product.ssid    review.type = 'pro'    review.url = product.url    excerpt = data.xpath("//p[@class='ingress']/text()").string()    image_src = data.xpath("//p[@class='ingress']/following-sibling::p[img][1]/img/@src").string()    image_alt = data.xpath("//p[@class='ingress']/following-sibling::p[img][1]/img/@alt").string()    if image_src:        product.properties.append(ProductProperty(type=ProductPropertyType(name="image"), value = { 'src': image_src, 'alt': image_alt}))    date = data.xpath("//text()[regexp:test(., ',\s*\S+\s+\S*\d\d\d\d')]").string()    if date:        review.date = re_search_once(', ([^,]+ \d\d\d\d)', date)    for pros in data.xpath("//table[@bgcolor = '#009900']/tr/td//span[@class='StykRub']/following-sibling::font//text()[string-length(normalize-space(.))>0]"):        p_value = pros.string()        if p_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "Plus"))    for cons in data.xpath("//table[@bgcolor = '#CC0000']/tr/td//span[@class='StykRub']/following-sibling::font//text()[string-length(normalize-space(.))>0]"):        c_value = cons.string()        if c_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "Minus"))    summary = data.xpath("//table[@bgcolor = '#0000FF']/tr/td/div/font//text()[string-length(normalize-space(.))>0]").string()    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Conclusion"))    else:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    grade = 0    for g in data.xpath("//p[span[contains(b/text(),'BETYG')]]/following-sibling::p[1]/img/@src"):         if re_search_once('/([^/]+).gif', g.string()) == "TheLENZ":            grade += 1        if re_search_once('/([^/]+).gif', g.string()) == "ThePluz":            grade += 0.5    if grade:        review.grades.append(Grade(name="Betyg", value = grade, worst = 0, best = 5, type = 'overall'))    product.reviews.append(review)    session.emit(product)def run(context, session):     #session.queue(Request('http://www.bigscreen.se/tester/tester-agt.htm'), process_old, {'category': 'Hemma bio'})    session.queue(Request('http://www.bigscreen.se/tester/tester-ant.htm'), process_frontpage, {'category': 'Hemma bio'})    session.queue(Request('http://www.bigscreen.se/tester/tester-aot.htm'), process_frontpage, {'category': 'Hemma bio'})