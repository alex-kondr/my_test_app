#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://cybershack.com.au/category/reviews/'), process_revlist, dict())def process_revlist(data, context, session):   for rev in data.xpath('//node()[regexp:test(name(),"h\d")][@class="entry__title"]//a'):      url = rev.xpath('@href').string()      title = rev.xpath('descendant::text()').string(multiple=True)      if url and title:         name = title         bad_list = [' – ']         for item in bad_list:             if item in name:                 namex = name.split(item)[0]                 if len(namex) == 0:                     name = name.split(item)[1]                 else:                     name = namex                 break         bad_list2 = ['Game Review:','Australian Review:','Review:','Review','(review)','(laptop review)','(soundbar review)',         '(TV review)','(network review)']         for item in bad_list2:             if item in name:                 name = name.replace(item, '')         session.queue(Request(url), process_product, dict(url=url, title=name))   nexturl = data.xpath('//li[@class="pgn__next"]//a//@href').string()   if nexturl:      session.queue(Request(nexturl), process_revlist, dict())def process_product(data, context, session):    product = Product()    product.name = context['title']    product.url = context['url']    ssid = re_search_once('postid-(\d+)', data.xpath('//body[contains(@class,"postid-")]/@class').string())    if ssid:        product.ssid = ssid    else:        product.ssid = product.name + ' ' + product.url    category = data.xpath('//li[@class="cat"]//a//text()').join('|')    if category:        product.category = category + '|Gadgets'    else:        product.category = 'Gadgets'    review = Review()    review.title = product.name    review.url = product.url    review.ssid = product.ssid + ' review'    review.type = 'pro'    revDate = data.xpath('//li[@class="date"]//text()').string()    if revDate:        review.date = revDate    author = data.xpath('//a[@rel="author"]//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    # Pros    for p in data.xpath('//div[@class="pros"]//li'):        pros = p.xpath('text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros', value=pros))    for p in data.xpath('//div[@class="pros_cons"]//tbody/tr/td[1]'):        pros = p.xpath('text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros', value=pros))    for p in data.xpath('//div[@class="sub-content"]//p[text()="Pros"]/following-sibling::ul[1]//li'):        pros = p.xpath('text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros', value=pros))    for p in data.xpath('//div[contains(descendant::strong//text(),"PROS")]//node()[contains(descendant::strong//text(),"PROS")]/following-sibling::ul[1]//li'):        pros = p.xpath('descendant::text()[string-length(normalize-space(.))>1]').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros', value=pros))    pros = data.xpath('//div[@class="sub-content"]//strong[text()="Pros"]/following-sibling::text()[1]').string(multiple=True)    if pros:        review.properties.append(ReviewProperty(type='pros', value=pros[1:]))    # Cons    for c in data.xpath('//div[@class="cons"]//li'):        cons = c.xpath('text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons', value=cons))    for c in data.xpath('//div[@class="pros_cons"]//tbody/tr/td[2]'):        cons = c.xpath('text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons', value=cons))    for c in data.xpath('//div[@class="sub-content"]//p[text()="Cons"]/following-sibling::ul[1]//li'):        cons = c.xpath('text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons', value=cons))    for c in data.xpath('//div[contains(descendant::strong//text(),"PROS")]//node()[contains(descendant::strong//text(),"CONS")]/following-sibling::ul[1]//li'):        cons = c.xpath('descendant::text()[string-length(normalize-space(.))>1]').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons', value=cons))    cons = data.xpath('//div[@class="sub-content"]//strong[text()="Cons"]/following-sibling::text()[1]').string(multiple=True)    if cons:        review.properties.append(ReviewProperty(type='cons', value=cons[1:]))    # Grades    grade = data.xpath('//div[@class="review-wu-grade-content"]//span//text()').string()    if grade:        review.grades.append(Grade(name='Rating', type='overall', value=float(grade), best=10.0))    for g in data.xpath('//div[@class="rev-option"]'):        name = g.xpath('descendant::h3//text()').string()        value = g.xpath('@data-value').string()        if value and name:            value = float(value) / 10.            review.grades.append(Grade(name=name, value=value, best=10.0))    # Conclusion    conc_list = [    '//div[contains(descendant::strong//text(),"Conclusion")]//p/text()',    '//div[contains(descendant::strong//text(),"Conclusion")]/following-sibling::div[not(ul)]//text()']    for item in conc_list:        conclusion = data.xpath(item).string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))            break    summ_list = [    '//node()[regexp:test(name(),"h\d")][contains(descendant::text(),"CyberShack’s view – ")]//text()',    '//node()[regexp:test(name(),"h\d")][contains(descendant::text(),"CyberShack – ")]//text()']    for item in summ_list:        summary = data.xpath(item).string(multiple=True)        if summary:            summary = summary.replace('CyberShack’s view – ','')            summary = summary.replace('CyberShack – ','')            review.properties.append(ReviewProperty(type='summary', value=summary))            break    # Excerpt    exce_list = [    '//meta[@property="og:description"]//@content'    ]    for item in exce_list:        excerpt = data.xpath(item).string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type="excerpt", value=excerpt))            product.reviews.append(review)            break    if product.reviews:        session.emit(product)