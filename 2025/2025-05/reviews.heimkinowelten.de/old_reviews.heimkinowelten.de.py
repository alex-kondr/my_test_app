from agent import *from models.products import *import reXCAT = ['Angebote']def strip_namespace(data):    tmp = data.content_file + ".tmp"    out = file(tmp, "w")    for line in file(data.content_file):        line = line.replace('<ns0', '<')        line = line.replace('ns0:', '')        line = line.replace(' xmlns', ' abcde=')        out.write(line + "\n")    out.close()    os.rename(tmp, data.content_file)def is_english(content):    en_words = "this you have or the and"    en_words_re = re.compile("|".join(map(lambda s: r"\b%s\b" % s, en_words.split(" "))))    return en_words_re.search(content.lower())def run(context, session):    session.browser.use_new_parser = True    session.queue(Request('https://heimkinowelten.de/'), process_frontpage, dict())def process_frontpage(data, context, session):    strip_namespace(data)    cats = data.xpath('//div[@class="porto-block"]//a[@aria-label="category"]')    for cat in cats:        name = cat.xpath('.//h3/text()').string()        url = cat.xpath('@href').string()        if name not in XCAT:            session.queue(Request(url), process_subcategory, dict(cat=name))def process_subcategory(data, context, session):    strip_namespace(data)    subcats = data.xpath('//div[h4[contains(., "Kategorie")]]/div//ul//a') or data.xpath('//div[@class="archive-products"]//a[@aria-label="category"]')    for subcat in subcats:        name = subcat.xpath('.//h3/text()').string() or subcat.xpath('text()').string()        url = subcat.xpath('@href').string()        session.queue(Request(url), process_prodlist, dict(cat=context['cat']+'|'+name))def process_prodlist(data, context, session):    strip_namespace(data)    prods = data.xpath('//div[@class="product-content"]')    for prod in prods:        name = prod.xpath('a[@class="product-loop-title"]/h3/text()').string()        url = prod.xpath('a[@class="product-loop-title"]/@href').string()        revs_cnt = prod.xpath('//div[@class="star-rating"]/@title').string()        if revs_cnt and float(revs_cnt) > 0:            session.queue(Request(url), process_product, dict(context, name=name, url=url))    next_url = data.xpath('//link[@rel="next"]/@href').string()    if next_url:        session.queue(Request(next_url), process_prodlist, dict(context))def process_product(data, context, session):    strip_namespace(data)    product = Product()    product.name = context['name']    product.url = context['url']    product.category = context['cat']    product.manufacturer = data.xpath('//meta[contains(@property, "brand")]/@content').string()    product.ssid = data.xpath('//div/@data-product-id').string()    # product.sku = data.xpath('//span[@class="sku"]/text()').string()    revs = data.xpath('//ol/li[contains(@class, "review")]/div')    for rev in revs:        review = Review()        review.type = 'user'        review.url = product.url        review.ssid = rev.xpath('@id').string().split('-')[-1]        author = rev.xpath('.//strong[contains(@class, "author")]/text()').string()        if author:            review.authors.append(Person(name=author, ssid=author))        date = rev.xpath('.//time/@datetime').string()        if date:            review.date = date.split('T')[0]        is_verified = rev.xpath('.//p[contains(@class, "is-verified")]').string()        if is_verified:            review.add_property(type='is_verified_buyer', value=True)        grade_overall = rev.xpath('.//div[@class="star-rating"]/@title').string()        if grade_overall:            review.grades.append(Grade(type="overall", value=float(grade_overall), best=5.0))        excerpt = rev.xpath('.//div[@class="description"]/p//text()').string(multiple=True)        if excerpt and not is_english(excerpt):            review.properties.append(ReviewProperty(type="excerpt", value=excerpt))            product.reviews.append(review)    if product.reviews:        session.emit(product)    # Loaded all revs