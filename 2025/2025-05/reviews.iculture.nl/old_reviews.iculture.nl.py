from agent import *from models.products import *import simplejsondef run(context, session):    session.queue(Request('https://www.iculture.nl/reviews/'), process_catlist, {})def process_catlist(data, context, session):    cats = data.xpath('//ul[@class="categories"]/li/a')    for cat in cats:        name = cat.xpath('text()').string()        url = cat.xpath('@href').string()        session.queue(Request(url), process_revlist, dict(cat=name))def process_revlist(data, context, session):    revs = data.xpath('//div[@class="post-list__content"]')    for rev in revs:        title = rev.xpath('h2/a/text()').string()        url = rev.xpath('h2/a/@href').string()        date = rev.xpath('div/time/@datetime').string()        summary = rev.xpath('p/text()').string()        session.queue(Request(url), process_review, dict(context, title=title, url=url, date=date, summary=summary))    next_url = data.xpath('//link[@rel="next"]/@href').string()    if next_url:        session.queue(Request(next_url), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.name = context['title'].split('iCulture bekijkt:')[-1].split('Review: ')[-1].split('Getest: ')[-1].split(' (review)')[0].split('mini review:')[0].split(' (eerste ervaringen)')[0].split(' review:')[0].split('Mini-review: ')[-1].split('Videoreview: ')[-1].split('Review ', 1)[-1].split(' review', 1)[0].split('Praktijktest ')[-1]    product.url = data.xpath('//li/a[contains(., "los kopen")]/@href').string() or context['url']    product.category = context['cat']    product.ssid = data.xpath('//article[contains(@id, "post-")]/@id').string().split('-')[-1]    manufacturer = data.xpath('//p[contains(., "Uitgever:")]//text()').string()    if not manufacturer:        manufacturer = data.xpath('//li[contains(., "Producent:")]/a/text()').string()    if not manufacturer:        manufacturer = data.xpath('//a[ancestor::p[contains(., "Fabrikant:")]][1]/text()').string()    if manufacturer:        product.manufacturer = manufacturer.split('"@type":"Brand","name":"')[-1].split('"}')[0]    review = Review()    review.type = 'pro'    review.title = context['title']    review.url = context['url']    review.ssid = product.ssid    review.date = context.get('date', '').split('T')[0]    rev_json = data.xpath('''//script[contains(., '"@type":"Article"')]/text()''').string()    if rev_json:        rev_json = simplejson.loads(rev_json)['@graph']        for obj in rev_json:            if obj['@type'] == 'Person' and obj.get('name', '') != 'Redactie iCulture.nl':                author_name = obj.get('name', '').split(' | ')[0].strip()                author_ssid = obj.get('@id', '').split('/')[-1]                author_url = obj.get('sameAs', [{}])                for i in author_url:                    if '.com/' in i:                        author_url = i                        break                if author_name and author_ssid and author_url:                    review.authors.append(Person(name=author_name, ssid=author_ssid, profile_url=author_url))                elif author_name and author_ssid:                    review.authors.append(Person(name=author_name, ssid=author_ssid))    pros = data.xpath('//div[@class="pros"]/ul/li//text()').strings()    if not pros:        pros = data.xpath('//p[contains(., "Pluspunten:")]/following-sibling::ul/li//text()').strings()    if not pros:        pros = data.xpath('//h4[contains(., "Pluspunten")]/following-sibling::ul[1]/li//text()').strings()    for pro in pros:        review.properties.append(ReviewProperty(type='pros', value=pro))    cons = data.xpath('//div[@class="cons"]/ul/li//text()').strings()    if not cons:        cons = data.xpath('//p[contains(., "Minpunten:")]/following-sibling::ul/li//text()').strings()    if not cons:        cons = data.xpath('//h4[contains(., "Minpunten")]/following-sibling::ul[1]/li//text()').strings()    for con in cons:        review.properties.append(ReviewProperty(type='cons', value=con))    grade_overall = data.xpath('//p[@class="score"]/text()').string()    if grade_overall:        review.grades.append(Grade(type='overall', value=float(grade_overall), best=10.0))    summary = context.get('summary')    if summary:        review.add_property(type='summary', value=summary)    conclusion = ''    conc_lines = data.xpath('//div[contains(@class, "main__content-body")]//*[preceding-sibling::h2[contains(@id, "conclusie") or contains(., "Conclusie")][1]][not(self::small[contains(., "Tekst:")])][not(contains(., "flickr]") or contains(., "Twijfel je nog wat je moet kiezen") or contains(., "vergelijkingen wellicht:"))][not(self::ul or self::aside or self::div[contains(@class, "mashsb-box") or contains(@class, "ad-container")])][not(contains(., "Pluspunten") or contains(., "Minpunten"))]')    for line in conc_lines:        if line.xpath('self::h2'):            break        elif line.xpath('self::p[a][small]'):            break        conc = line.xpath('.//text()').string(multiple=True)        if conc:            conclusion += conc    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    excerpt = data.xpath('//div[contains(@class, "main__content-body")]//p[not(regexp:test(., "bij deze aanbieders", "i"))][not(a[contains(., "Bekijk ook")])][not(a[contains(., "Bekijk de")])][not(small)][not(a[contains(., "line-up")])][not(preceding::h2[contains(@id, "conclusie")])][not(contains(., "Pluspunten:") or contains(., "Minpunten:") or contains(., "Daarnaast kun je voor een") or contains(., "vergelijkingen wellicht:") or contains(., "Twijfel je nog wat je moet kiezen"))][not(preceding::h2[contains(., "Conclusie")])][not(ancestor::div[contains(@class, "block-review") or contains(@class, "flickr")])][not(preceding::div[contains(@class, "block-review")])][not(strong[contains(., "Lees nu ook")])][not(contains(., "flickr]") or contains(., "ic_tab]"))]//text()').string(multiple=True)    if excerpt:        if summary:            excerpt = excerpt.replace(summary, "")        if conclusion:            excerpt = excerpt.replace(conclusion, "")        review.properties.append(ReviewProperty(type='excerpt', value=excerpt.strip()))        product.reviews.append(review)        session.emit(product)