import stringfrom agent import *from models.products import *import refrom Ft.Xml import ReaderExceptiondebug = Truedef run(context, session):     session.queue(Request('https://www.fudzilla.com/reviews'), process_frontpage, {})def process_frontpage(data, context, session):    for p in data.xpath("//div[@id[regexp:test(., 'itemList')]]/div[@class[regexp:test(., 'itemContainer')]]//h3/a"):        context['name'] = p.xpath(".//text()[not(regexp:test(., 'previewed', 'i'))][string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//a[@id='page-next-link']/@href").string()    if next:        session.queue(Request(next+'&tmpl=component'), process_next_page, {})def process_next_page(data, context, session):    for p in data.xpath("//div[@id='t3-content']//h3/a"):        context['name'] = p.xpath(".//text()[not(regexp:test(., 'previewed', 'i'))][string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//a[@id='page-next-link']/@href").string()    if next:        session.queue(Request(next), process_next_page, {})def process_product(data, context, session):    product = Product()    product.name = context['name'].replace(' reviewed', '').replace(' tested', '')    product.url = context['url']    product.category = Category(name = "Hardware")    product.ssid = re_search_once('reviews\/(\d+)', product.url)    review = Review()    review.title = context['name']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    review.date = data.xpath("//span[@class='itemDateCreated']/text()[string-length(normalize-space(.))>0]").string()    user_data = data.xpath("//div[@class='itemToolbar']//a[@rel='author']").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/author\/(\d+)', user.profile_url)        review.authors.append(user)    excerpt = data.xpath("//div[@class='itemIntroText']/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@class='itemFullText']/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//meta[@name='description']/@content").string()    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    for page in data.xpath("//div[@id='article-index']/ul/li/a[@href[not(regexp:test(., '\?showall'))]]"):        title = page.xpath(".//text()[string-length(normalize-space(.))>0]").string()        url = page.xpath("@href").string()        if title and url:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pages'), value = {'url': url, 'title': title}))    summary_url = data.xpath("//div[@id='article-index']/ul/li/a[regexp:test(., 'Conclusion', 'i')]/@href").string()    if summary_url:        session.queue(Request(summary_url), process_summary_page, dict(product=product, review=review))    else:        summary = data.xpath("//div[@class='itemFullText']/h2[regexp:test(., 'Conclusion')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string()        if summary:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Conclusion"))        product.reviews.append(review)        session.emit(product)def process_summary_page(data, context, session):    try:        summary = data.xpath("//div[@class='itemFullText']/h2[regexp:test(., 'Conclusion')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string()    except ReaderException:        product.reviews.append(review)        session.emit(product)    review = context['review']    product = context['product']    if not summary:        summary = data.xpath("//div[@class='itemFullText']/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string()    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Conclusion"))    product.reviews.append(review)    session.emit(product)