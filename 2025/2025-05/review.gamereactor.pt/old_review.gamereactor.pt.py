from agent import *from models.products import *import redef strip_namespace(data):    tmp = data.content_file + ".tmp"    out = file(tmp, "w")    for line in file(data.content_file):        line = line.replace('<ns0', '<')        line = line.replace('ns0:', '')        line = line.replace(' xmlns', ' abcde=')        out.write(line + "\n")    out.close()    os.rename(tmp, data.content_file)def run(context, session):    session.browser.use_new_parser = True    session.sessionbreakers = [SessionBreak(max_requests=3000)]    session.queue(Request('https://www.gamereactor.pt/analises/'), process_revlist, {})def process_revlist(data, context, session):    strip_namespace(data)    revs = data.xpath('//article[@class="areview"]/a')    for rev in revs:        title = rev.xpath("h3/text()").string()        url = rev.xpath('@href').string()        session.queue(Request(url), process_review, dict(title=title, url=url))    next_url = data.xpath('//link[@rel="next"]/@href ').string()    if next_url:        session.queue(Request(next_url), process_revlist, {})def process_review(data, context, session):    strip_namespace(data)    product = Product()    product.name = data.xpath('//section[contains(@class, "gameinfo")]/h2/a/text()').string() or context['title']    product.manufacturer = data.xpath('//li[span[contains(., "Produtora:")]]//text()[not(parent::span)]').string(multiple=True) or data.xpath('//li[span[contains(., "Editora:")]]//text()[not(parent::span)]').string(multiple=True)    product.url = context['url']    product.ssid = data.xpath('//article/@data-id').string()    category = 'Jogos|'    plats = data.xpath('//li[span[contains(., "Plataforma:") or contains(., "Testado em:")]]/text()').string(multiple=True)    if plats:        plats = plats.split(',')        for plat in plats:            plat_name = plat.strip()            if plat_name:                category += plat_name + '/'    genres = data.xpath('//li[span[contains(., "Pelityyppi:")]]/a/text()').strings()    if genres:        category = category.strip('|/') + '|'        for genre in genres:            genre_name = genre.strip()            if genre_name:                category += genre_name + '/'    product.category = category.strip('|/ ')    review = Review()    review.title = context['title']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    date = data.xpath('//meta[@itemprop="datePublished"]/@content').string()    if date:        review.date = date.split('T')[0]    author = data.xpath('//li[contains(@class, "publishAuthor")]/a').first()    if author:        author_name = author.xpath('span/text()').string()        review.authors.append(Person(name=author_name, ssid=author_name))    pro = data.xpath('//div[@class="goodbad"][preceding-sibling::div[contains(., "+")]][1]/text()').string()    if pro:        pro = re.sub(r'<.*?>', '', pro)        review.properties.append(ReviewProperty(type='pros', value=pro))    con = data.xpath('//div[@class="goodbad"][preceding-sibling::div[contains(., "-")]][1]/text()').string()    if con:        con = re.sub(r'<.*?>', '', con)        review.properties.append(ReviewProperty(type='cons', value=con))    grade_overall = data.xpath('//div[@class="scoreSplit"]/meter/@value').string()    if grade_overall:        review.grades.append(Grade(type='overall', value=float(grade_overall), best=10.0))    summary = data.xpath('//h2[@itemprop="alternativeHeadline"]/text()').string()    if summary:        review.add_property(type='summary', value=summary)    excerpt = data.xpath('//div[@id="page0"]/p//text()').string(multiple=True)    if excerpt:        excerpt = re.sub(r'<.*?>', '', excerpt).replace('<bild<', '').replace('" target="_blank">', '')        review.add_property(type='excerpt', value=excerpt)        product.reviews.append(review)        session.emit(product)