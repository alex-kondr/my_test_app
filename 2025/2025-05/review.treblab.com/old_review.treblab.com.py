from agent import *from models.products import *import simplejsonimport redef remove_emoji(string):    emoji_pattern = re.compile("["                               u"\U0001F600-\U0001F64F"  # emoticons                               u"\U0001F300-\U0001F5FF"  # symbols & pictographs                               u"\U0001F680-\U0001F6FF"  # transport & map symbols                               u"\U0001F1E0-\U0001F1FF"  # flags (iOS)                               u"\U00002500-\U00002BEF"  # chinese char                               u"\U00002702-\U000027B0"                               u"\U00002702-\U000027B0"                               u"\U000024C2-\U0001F251"                               u"\U0001f926-\U0001f937"                               u"\U00010000-\U0010ffff"                               u"\u2640-\u2642"                               u"\u2600-\u2B55"                               u"\u200d"                               u"\u23cf"                               u"\u23e9"                               u"\u231a"                               u"\ufe0f"  # dingbats                               u"\u3030"                               "]+", flags=re.UNICODE)    return emoji_pattern.sub(r'', string)def run(context, session):    session.queue(Request('https://treblab.com/'), process_frontpage, dict())def process_frontpage(data, context, session):    cats = data.xpath('//ul[@id="SiteNav"]/li')    for cat in cats:        cat_name = cat.xpath('a/span/text()').string()        prods = cat.xpath('.//div[@class="mega-menu__products-wrapper"]/a')        for prod in prods:            url = prod.xpath('@href').string()            session.queue(Request(url), process_product, dict(cat=cat_name, url=url))def process_product(data, context, session):    product = Product()    product.name = data.xpath('//h1[@class="h2 product-single__title"]/text()').string()    product.url = context['url']    product.ssid = data.xpath('//a/span/@data-id').string()    product.category = context['cat']    product.manufacturer = 'TREBLAB'    revs_url = 'https://storefront.trustshop.io/storefront/reviews?product_id={}&type=all&per_page=6'.format(product.ssid)    session.do(Request(revs_url), process_reviews, dict(product=product))def process_reviews(data, context, session):    product = context['product']    revs_json = simplejson.loads(data.content)    revs = revs_json.get('data', [])    for rev in revs:        review = Review()        review.type = 'user'        review.ssid = rev.get('id')        review.url = product.url        date = rev.get('created_at')        if date:            review.date = date.split('T')[0]        author = rev.get('customer', {}).get('name')        if author:            review.authors.append(Person(name=author, ssid=author))        grade_overall = rev.get('star')        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        is_verified_buyer = rev.get('buyer_verification')        if is_verified_buyer:            review.add_property(type='is_verified_buyer', value=True)        hlp_yes = rev.get('helpful')        if hlp_yes:            review.add_property(type='helpful_votes', value=hlp_yes)        title = rev.get('title')        excerpt = rev.get('content')        if excerpt and len(excerpt.strip(' .+-\n\t')) > 1 and title:            review.title = remove_emoji(title).strip(' .+-\n\t')        else:            excerpt = title        if excerpt:            excerpt = remove_emoji(excerpt).strip(' .+-\n\t')            if len(excerpt) > 1:                review.add_property(type='excerpt', value=excerpt)                product.reviews.append(review)    next_revs = revs_json.get('next_cursor')    if next_revs:        next_page = context.get('page', 1) + 1        next_url = 'https://storefront.trustshop.io/storefront/reviews?product_id={ssid}&type=all&current_page={page}&per_page=6'.format(ssid=product.ssid, page=next_page)        session.do(Request(next_url), process_reviews, dict(product=product, page=next_page))    elif product.reviews:        session.emit(product)