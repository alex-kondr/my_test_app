from agent import *from models.products import *import simplejsondef run(context, session):    session.queue(Request("https://www.nutrilett.se/", force_charset="utf-8"), process_category, dict())def process_category(data, context, session):    cats = data.xpath("//ul[contains(@class,'list-unstyled')]//li")    for cat in cats:        name = cat.xpath(".//small/text()").string()        url = cat.xpath(".//a/@href").string()        if url:            session.queue(Request(url, force_charset="utf-8"), process_product, dict(cat=name, url=url))def process_product(data, context, session):    prods = data.xpath("//div[contains(@class,'product-lists-item')]")    for prod in prods:        url = prod.xpath(".//a/@href").string()        revs = len(prod.xpath(".//div[@class='icon-fill']"))        if revs > 0:            session.queue(Request(url, force_charset="utf-8"), process_reviews, dict(context, url=url))def process_reviews(data, context, session):    json_body = data.xpath('//script[contains(., "review")]/text()').string()    if not json_body:        return    resp = simplejson.loads(json_body.strip())    product = Product()    product.name = resp['name']    product.ssid = resp['sku']    product.manufacturer = resp['brand']['name']    product.sku = product.ssid    product.url = context['url']    product.category = context['cat']    revs = resp['review']    for rev in revs:        review = Review()        review.type = 'user'        review.url = product.url        review.date = rev['datePublished']        grade_overall = rev['reviewRating']['ratingValue']        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        author_name = rev['name']        if author_name:            review.authors.append(Person(name=author_name, ssid=author_name))        is_recommended = data.xpath("//div[@class='review-item' and (.//div[contains(.,'%s')])]//div[@class='review-recommended']//small//text()" % (author_name)).string()        if is_recommended:            review.add_property(value=True, type='is_recommended')        helpful_votes = data.xpath("//div[@class='review-item' and (.//div[contains(.,'%s')])]//button[contains(@class,'icon-check')]//text()" % (author_name)).string()        if helpful_votes:            helpful_votes = helpful_votes.split('(')[-1].split(')')[0]            review.add_property(type='helpful_votes', value=int(helpful_votes))        unhelpful_votes = data.xpath("//div[@class='review-item' and (.//div[contains(.,'%s')])]//button[contains(@class,'icon-cross')]//text()" % (author_name)).string()        if unhelpful_votes:            unhelpful_votes = unhelpful_votes.split('(')[-1].split(')')[0]            review.add_property(type='not_helpful_votes', value=int(unhelpful_votes))        excerpt = rev['description']        if excerpt:            review.add_property(type='excerpt', value=excerpt)            review.ssid = review.digest()            product.reviews.append(review)    if product.reviews:        session.emit(product)