import stringfrom agent import *from models.products import *import refrom Ft.Xml import ReaderExceptiondebug = Truedef run(context, session):     session.browser.use_new_parser = True    session.sessionbreakers = [SessionBreak(max_requests=5000)]    session.queue(Request('https://gamecritics.com/reviews'), process_frontpage, {})def process_frontpage(data, context, session):    for p in data.xpath("//div[@id='recent-posts']/article//h3/a"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//div[@class='navigation']//a[@class[regexp:test(., 'next')]]/@href").string()    if next:        session.queue(Request(next), process_frontpage, {})def process_product(data, context, session):    try:       ssid = data.xpath("//div[@class='recent-posts']/article/@id").string()    except ReaderException:       return    product = Product()    product.name = context['name']    product.url = context['url']    category = None    categories = []    for c in data.xpath("//p[*[self::strong or self::b][regexp:test(., 'Disclosures')]]//text()[string-length(normalize-space(.))>0]"):        cat = parse_category(c.string())        if cat:             if cat != category and not cat in categories:                 if not category:                     category = cat                 else:                     categories.append(cat)    if not category:        category = "Games"    product.category = Category(name = category)    ssid = data.xpath("//div[@class='recent-posts']/article/@id").string()    if ssid:        product.ssid = re_search_once('(\d+)', ssid)    if len(categories) > 0:        product.also_in = categories    review = Review()    review.title = context['name']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    review.date = data.xpath("//div[@class='entry-meta']//time/text()[regexp:test(., '\d{4}')]").string()    user_data = data.xpath("//div[@class='entry-meta']//a[@rel='author']").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/author\/([^\/]+)', user.profile_url)        review.authors.append(user)    excerpt = data.xpath("//div[@class='entry-content']/p[not(strong)][.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    p_value = data.xpath("//div[@class='entry-content']/p[strong[regexp:test(., 'HIGH')]]//text()[string-length(normalize-space(.))>0][not(parent::strong[regexp:test(., 'HIGH')])]").string(multiple=True)    if p_value:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "HIGH"))    c_value = data.xpath("//div[@class='entry-content']/p[strong[regexp:test(., 'LOW')]]//text()[string-length(normalize-space(.))>0][not(parent::strong[regexp:test(., 'LOW')])]").string(multiple=True)    if c_value:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "LOW"))    product.reviews.append(review)    session.emit(product)def parse_category(str):    cat = None    if re_search_once('(PS4)', str) or re_search_once('(PlayStation 4)', str):        cat = "PlayStation 4"    elif re_search_once('(PS3)', str) or re_search_once('(PlayStation 3)', str):        cat = "PlayStation 3"    elif re_search_once('(PS2)', str) or re_search_once('(PlayStation 2)', str):        cat = "PlayStation 2"    elif re_search_once('(XOne)', str) or re_search_once('(Xbox One)', str):        cat = "Xbox One"    elif re_search_once('(Nintendo Switch)', str):        cat = "Nintendo Switch"    elif re_search_once('(PC)', str):        cat = "PC"    return cat