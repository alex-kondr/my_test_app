# -*- coding: utf8 -*-from agent import *from models.products import *def process_category(data, context, session):    for link in data.xpath('//h1[@class="entry-title"]//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name:            bad_list2 = ['SHOE REVIEW:','Shoe Review:','Shoe Review â€“','Shoe review:',            'Gear review:','Trail shoe review:','REVIEW:','Review:']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url),process_product,dict(context,url=url,name=name))    # Next page    next=data.xpath('//div[contains(@class,"nav-next")]//a//@href').string()    if next:        session.queue(Request(next), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    # Category    category = data.xpath('//div[@class="catDiv"]//a[not(contains(@href,"buying"))][not(contains(@href,"/reviews/"))]//text()').join(' | ')    if category:        product.category=category    else:        product.category='unknown'    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    # Publish date    pub_date=data.xpath('//div[@class="dateDiv"]//time//@datetime').string()    if pub_date:        review.date=pub_date[:-15]    else:        review.date='unknown'    # Author    author=data.xpath('//span[@class="author vcard"]//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Type    review.type='pro'    # Ssid    review.ssid=product.ssid    # Excerpt    excerpt = data.xpath('//div[@class="entry-content"]//p[not(img)][not(b)][not(strong)]//text()').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    # Summary    summ_list = [    '//div[@class="entry-content"]//p[contains(strong[2]//text(),"Great for")]//text()',    '//div[@class="entry-content"]//p[contains(strong//text(),"TAKEOUTS")]/following-sibling::p[not(a)]//text()',    '//div[@class="entry-content"]//p[contains(strong//text(),"TAKEOUTS")]/following-sibling::p[strong]//text()',    '//div[@class="entry-content"]//p[contains(b//text(),"TAKE OUTS")]//text()',    '//div[@class="entry-content"]//p[contains(strong//text(),"TAKE OUTS")]//text()',    '//div[@class="entry-content"]//p[contains(strong//text(),"Great for")]//text()',    '//div[@class="entry-content"]//p[contains(strong//text(),"Great For")]//text()']    summary = False    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    if summary or excerpt:        product.reviews.append(review)    if product.reviews:        session.emit(product)def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.trailrunmag.com/?cat=23,280'), process_category, {})