import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     session.sessionbreakers = [SessionBreak(max_requests=5000)]    session.queue(Request('https://www.stereo.de/hifi-test/'), process_frontpage, {})def process_frontpage(data, context, session):    for cat in data.xpath("//div[@class='tx-stereo-configurator']//a[@class[regexp:test(., 'btn')]]"):        context['category'] = cat.xpath(".//text()[string-length(normalize-space(.))>0]").string()        cat_url = cat.xpath("@href").string()        if context['category'] and cat_url:            session.queue(Request(cat_url), process_category, context)def process_category(data, context, session):    for p in data.xpath("//div[@class='tx_stereotest']/div"):        name = p.xpath(".//h4/a//text()[string-length(normalize-space(.))>1]").string()        url = p.xpath(".//h4/a/@href").string()        if name and url:            product = Product()            title = name.split(':')            if len(title) == 2:                product.name = title[1].strip()                product.manufacturer = title[0].strip()            else:                product.name = name            product.url = url            product.category = Category(name = context['category'])            product.ssid = re_search_once('(\d+)\/*$', product.url)            review = Review()            review.url = product.url            review.ssid = product.ssid            review.type = 'pro'            date = p.xpath(".//p/text()[regexp:test(., 'getestet')]").string()            if date:                review.date = re_search_once('(\d+\/\d+)', date)            excerpt = p.xpath("div[h4]/text()[string-length(normalize-space(.))>100]").string(multiple=True)            if excerpt:                review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))            grade = p.xpath("div[@class[regexp:test(., 'rating')]]/text()[regexp:test(., '\d')]").string()            if grade:                review.grades.append(Grade(name="Rating", value = grade, worst = 0, best = 5, type = 'overall'))            product.reviews.append(review)            session.emit(product)