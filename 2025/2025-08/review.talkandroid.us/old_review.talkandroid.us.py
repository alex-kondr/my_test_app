import stringfrom agent import *from models.products import *import refrom Ft.Xml import ReaderExceptiondebug = Truedef run(context, session):    session.browser.use_new_parser = True   session.queue(Request('http://www.talkandroid.com/reviews/', use='curl'), process_revlist, {})def process_revlist(data, context, session):   for rev in data.xpath("//h2[@class='entry-title']/a"):      title = rev.xpath("descendant::text()").string(multiple=True)      url = rev.xpath("@href").string()      if url and title:         name = re_search_once('Featured Android Game Review: (.*)$', title)         if not(name):            name = re_search_once('Featured Android App Review: (.*)$', title)         if not(name):            name = re_search_once('^(.*) [Rr]eview:', title)         if not(name):            name = title         session.queue(Request(url, use='curl'), process_review, dict(url=url, title=title, name=name))   next = data.xpath("//div[@class[regexp:test(., 'pagenav_nextprev')]]/a[regexp:test(., 'next')]/@href").string()   if next:      session.queue(Request(next, use='curl'), process_revlist, {})def process_review(data, context, session):   try:      content = data.xpath("//div[@id='main']").first()   except ReaderException:      return   product = Product()   if content:      product.name = context['name']      product.url = context['url']      product.category = 'Mobiles'      product.ssid = re_search_once('(\d+)', content.xpath("article/@id").string())      review = Review()      review.title = context['title']      review.url = product.url      review.ssid = product.ssid      review.type = 'pro'      review.date = content.xpath("descendant::time/@datetime").string()      author = content.xpath("descendant::a[@rel='author']").first()      if author:         name = author.xpath("descendant::text()").string(multiple=True)         url = author.xpath("@href").string()         if url and author:            review.authors.append(Person(name=name, ssid=name, profile_url=url))      excerpt = content.xpath("descendant::div[@class='entry-content']/p[normalize-space(text()) and not(regexp:test(normalize-space(.),':$'))][following-sibling::node()[regexp:test(normalize-space(.),'Closing')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("descendant::div[@class='entry-content']/p[normalize-space(text()) and not(regexp:test(normalize-space(.),':$'))]//text()").string(multiple=True)      if excerpt:         review.properties.append(ReviewProperty(type='excerpt', value=excerpt))      conclusion = re_search_once('[Rr]eview\:(.+)', context['title'])      if conclusion:         review.properties.append(ReviewProperty(type='conclusion', value=conclusion.strip()))      if review.properties:         product.reviews.append(review)      for pro in content.xpath("div/ul[preceding-sibling::p[regexp:test(normalize-space(.),':$')][1][regexp:test(normalize-space(.),'Pros')]]/li"):         line = pro.xpath("descendant::text()").string(multiple=True)         if line:            review.properties.append(ReviewProperty(type='pros', value=line))      for pro in content.xpath("div/p[preceding-sibling::p[regexp:test(normalize-space(.),':$')][1][regexp:test(normalize-space(.),'Pros')]]/strong"):         line = pro.xpath("descendant::text()").string(multiple=True)         if line:            review.properties.append(ReviewProperty(type='pros', value=line))      for con in content.xpath("div/ul[preceding-sibling::p[regexp:test(normalize-space(.),':$')][1][regexp:test(normalize-space(.),'Cons')]]/li"):         line = con.xpath("descendant::text()").string(multiple=True)         if line:            review.properties.append(ReviewProperty(type='cons', value=line))      for con in content.xpath("div/p[preceding-sibling::p[regexp:test(normalize-space(.),':$')][1][regexp:test(normalize-space(.),'Cons')]]/strong"):         line = con.xpath("descendant::text()").string(multiple=True)         if line:            review.properties.append(ReviewProperty(type='cons', value=line))   if product.reviews:      session.emit(product)