from agent import *from models.products import *def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=5000)]    session.queue(Request('https://www.recordere.dk/tests/'), process_revlist, dict())def process_revlist(data, context, session):    revs = data.xpath("//div[@class='tdc-row']//h3[not(ancestor::div[@class[regexp:test(., 'td_block_inner')]]/preceding-sibling::h4[1][regexp:test(., 'Seneste')])]/a")    for rev in revs:        name = rev.xpath(".//text()").string()        url = rev.xpath("@href").string()        session.queue(Request(url), process_review, dict(context, name=name, url=url))    def process_review(data, context, session):    product = Product()    product.ssid = context['url'].split('/')[-2]    product.category = data.xpath("//span[@class='td-bred-no-url-last']//text()").string()    product.url = context['url']    product.name = data.xpath("//h2[@class='cwp-item']//text()").string()    if not product.name:        product.name = context['name'].split(" â€“ ")[0]        if "TEST: " in product.name:            product.name = product.name.split("TEST: ")[1]        if "Test: " in product.name:            product.name = product.name.split("Test: ")[1]        if "test: " in product.name:            product.name = product.name.split("test: ")[1]        if "SLUT: " in product.name:            product.name = product.name.split("SLUT: ")[1]        if "Spilanmeldelse:" in product.name:            product.name = product.name.split("Spilanmeldelse: ")[1]        review = Review()    review.title = context['name']    review.ssid = product.ssid    review.type = 'pro'    review.url = context['url']    review.date = data.xpath("//time[@class='entry-date updated td-module-date']/@datetime").string().split('T')[0]        authors = data.xpath("//div[@class='td-post-author-name']/a")    for author in authors:        author_name = author.xpath(".//text()").string()        author_url = author.xpath("@href").string()        review.authors.append(Person(name=author_name, profile_url=author_url, ssid=author_name))        grade_overall = data.xpath("//div[@class='td-review-final-score']/text()[regexp:test(., '\d')]").string()    if grade_overall:        review.grades.append(Grade(type='overall', value=float(grade_overall), best=10.0))    if not grade_overall:        grade_overall = data.xpath("//div[@class[regexp:test(., 'score__wrap__with__title')]]//div[@class='score']/text()[regexp:test(., '\d')]").string()        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        pros = data.xpath("//div[@class='lets-review-block__pros']/div[@class[regexp:test(., 'review-block__pro')]]")    for pro in pros:        pro = pro.xpath(".//text()").string()        if pro:            review.add_property(type='pros', value=pro)        cons = data.xpath("//div[@class='lets-review-block__cons']/div[@class[regexp:test(., 'review-block__con')]]")    for con in cons:        con = con.xpath(".//text()").string()        if con:            review.add_property(type='cons', value=con)        summary = data.xpath("//div[@class='td-review-summary-content']//text()[string-length(normalize-space(.))>0]").string()    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))        conclusion = data.xpath("//div[@id='content_text']/h4[regexp:test(., 'Konklusion')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))        excerpt = data.xpath("//div[@id='content_text']/h4[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@id='content_text']/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))            product.reviews.append(review)        session.emit(product)