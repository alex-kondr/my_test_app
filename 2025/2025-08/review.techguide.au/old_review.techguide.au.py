# -*- coding: utf8 -*-from agent import *from models.products import *def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.techguide.com.au/reviews'), process_category, {})def process_category(data, context, session):    for link in data.xpath('//div[contains(@class,"item-inner")]//h2//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name and '-review' in url:            bad_list2 = [' review -']            for item in bad_list2:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            bad_list = ['unveils','with new ',' review','Review:',' speakers',' earphones', ' speakers',            ' headset',' headphones',' digital radio',' speaker',' portable']            for item in bad_list:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url),process_product,dict(context,url=url,name=name))    # Next page    next=data.xpath('//a[@class="next page-numbers"]//@href').string()    if next:        session.queue(Request(next), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    # Ssid    ssid = data.xpath('//article//@id').string()    if ssid:        product.ssid=ssid.replace('post-','')    else:        product.ssid=product.name + ' ' + product.url    # Category    category = data.xpath('//article//@class').string()    if category and 'category-' in category:        cate = category.split(' category-')[1:-1]        if len(cate)==0:            cat = category.split(' category-')[1].split(' ')[0].replace('-reviews','')            product.category=cat        else:            cat = '|'.join(cate).replace('-reviews','')            product.category=cat    else:        product.category='unknown'    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid + ' review'    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]//@content').string()    if pub_date:        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//span[@class="post-author-name"]/text()[string-length(normalize-space(.))>2]').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    over_list = [    '//div[@class="review-final-score"]//h3//text()',    '//div[@class="overall"]//span[@class="rate"]/text()']    for item in over_list:        overall=data.xpath(item).string()        if overall:            if '.' in overall or overall=='10' or len(overall)==1:                review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=10))            else:                review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=100))            break    for g in data.xpath('//div[@class="review-item"]'):        name =g.xpath('descendant::h5//text()').string()        value=g.xpath('descendant::span[@data-width]//@data-width').string()        if value and name:            if '-' in name: name = name.split('-')[0]            review.grades.append(Grade(name=name, value=value, best=100))    # Excerpt    excerpt=data.xpath('//div[contains(@class,"entry-content")]//p[not(a)][not(strong)][not(@class="post-meta")]//text()').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:333]+'...'))    # Summary    summary = data.xpath('//div[contains(@class,"entry-content")]//p[contains(node()//text(),"VERDICT")]/following-sibling::p[not(a)][not(strong)]//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))    # Pros    pro = False    pros=data.xpath('//p[contains(descendant::node()//text(),"PROS")]//text()[string-length(normalize-space(.))>5]').string(multiple=True)    if pros:        review.properties.append(ReviewProperty(type='pros',value=pros))        pro = True    if not pro:        for p in data.xpath('//aside[@class="review-pros-section"]//following-sibling::ul[1]//li'):            pros=p.xpath('descendant::text()').string()            if pros:                review.properties.append(ReviewProperty(type='pros',value=pros))                pro = True    # Cons    con = False    cons=data.xpath('//p[contains(descendant::node()//text(),"CONS")]//text()[string-length(normalize-space(.))>5]').string(multiple=True)    if cons:        review.properties.append(ReviewProperty(type='cons',value=cons))        con = True    if not con:        for c in data.xpath('//aside[@class="review-cons-section"]//following-sibling::ul[1]//li'):            cons=c.xpath('descendant::text()').string(multiple=True)            if cons:                review.properties.append(ReviewProperty(type='cons',value=cons))                con = True    product.reviews.append(review)    if product.reviews and (excerpt or summary):        session.emit(product)