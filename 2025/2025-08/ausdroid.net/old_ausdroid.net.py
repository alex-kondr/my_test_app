#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import timedef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://ausdroid.net/category/review/', use="curl"), process_category, {})def process_category(data, context, session):    for link in data.xpath('//node()[regexp:test(name(),"h\d")][contains(@class,"entry-title")]//a'):        url = link.xpath('@href').string()        name = link.xpath('text()').string()        if url and name:            bad_list = [' — ',' – ']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            bad_list2 = ['Review:']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name))    next = data.xpath('//a[descendant::node()[@class="td-icon-menu-right"]]//@href|//link[@rel="next"]//@href').string()    if next:        session.queue(Request(next, use="curl"), process_category, {})    time.sleep(15)def process_product(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    product.ssid = product.name + product.url    product.category = 'Gadgets'    category1 = data.xpath('//li[@class="entry-category"]//a[not(regexp:test(@href,"(news)"))]//text()').join('|')    category2 = data.xpath('//div[@class="td-post-source-tags"]//li//a//text()').join('|')    if category1:        if category2:            product.category = category1 + '|' + category2        else:            product.category = category1    else:        if category2:            product.category = category2    product.manufacturer = ''    review = Review()    review.product = product.name    review.url = product.url    review.type = 'pro'    review.ssid = product.ssid    pub_date = data.xpath('//meta[@property="article:published_time"]//@content').string()    if pub_date:        if 'T' in pub_date: pub_date = pub_date.split('T')[0]        review.date = pub_date    else:        review.date='unknown'    author = data.xpath('//div[@class="td-author-name vcard author"]//a//text()').string()    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    overall = data.xpath('//div[@class="td-review-final-score"]//text()').string()    if overall:        review.grades.append(Grade(name='Overall Rating', type='overall', value=float(overall), best=5))    for g in data.xpath('//tr[@class="td-review-row-stars"]'):        name = g.xpath('descendant::td[@class="td-review-desc"]//text()').string()        value = g.xpath('descendant::i[@class="td-icon-star"]')        half = g.xpath('descendant::i[@class="td-icon-star-half"]')        if value and name:            if '-' in name: name = name.split('-')[0]            value = len(value)            if half: value + 0.5            review.grades.append(Grade(name=name, value=value, best=5))    conc_list = [    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(onclusio|ONCLUSIO|hould buy|ould I buy|Wrap|hould you buy|worth buy|consider buy)")]//following-sibling::p[not(em)]//text()',    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::node()//text(),"(onclusio|ONCLUSIO|hould buy|ould I buy|Wrap|hould you buy|worth buy|consider buy)")]//following-sibling::p[not(em)]//text()']    conclusion = False    for item in conc_list:        conclusion = data.xpath(item).string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))            break    summary = data.xpath('//div[@class="td-review-summary-content"]//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary',value=summary))    excerpt = data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        if conclusion: excerpt = ''.join(excerpt.split(conclusion))        if summary: excerpt = ''.join(excerpt.split(summary))        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    for p in data.xpath('//div[@class="entry"]//h3[contains(text(),"Pros")]//following::ul[1]//li'):        pros = p.xpath('text()').string()        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    for c in data.xpath('//div[@class="entry"]//h3[contains(text(),"Cons")]//following::ul[1]//li'):        cons = c.xpath('text()').string()        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    if summary or excerpt or conclusion:        product.reviews.append(review)    if product.reviews:        session.emit(product)    time.sleep(15)