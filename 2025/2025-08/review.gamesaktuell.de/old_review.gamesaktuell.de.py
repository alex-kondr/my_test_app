# -*- coding: utf8 -*-from agent import *from models.products import *debug = Truedef process_first_page(data, context, session):    for link in data.xpath('//div[@class="calendarInner"]//div[contains(@class,"cal_years")]//a'):        url=link.xpath('@href').string()        category=link.xpath('text()').string()        if url and category:            session.queue(Request(url, use="curl"),process_category,dict(context))def process_category(data, context, session):    for link in data.xpath('//div[@class="headline_box"]//h3//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name:            bad_list = [' im Test: ',' im Test ',' Test: ']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            bad_list2 = ['im Test:','im Test','Test:','']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url, use="curl"),process_product,dict(context,url=url,name=name))    # Next page    next=data.xpath('//a[contains(descendant::text(),"weiter")]//@href').string()    if next:        session.queue(Request(next, use="curl"), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    # Category    category = data.xpath('//ul[@class="platformProductNavigation"]//li//text()[string-length(normalize-space(.))>1]').join(' | ')    if category:        product.category='Games | ' + category    else:        product.category='Games'    # Brand    brand = data.xpath('//dt[descendant::text()="Developer"]/following-sibling::dd[1]//text()').string()    if brand:        product.manufacturer=brand    review=Review()    review.product=product.name    review.url=product.url    review.ssid=product.ssid + 'review'    review.type='pro'    # Publish date    pub_date=data.xpath('//meta[@name="DC.date.issued"]//@content').string()    if pub_date:        review.date=pub_date[:-14]    else:        review.date='unknown'    # Author    author=data.xpath('//span[@class="editorNameLink"]//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    overall=data.xpath('//span[@class="rating_data"]//text()').string()    if overall:        if ',' in overall: overall = overall.replace(',','.')        if '-' in overall: overall = overall.replace('-','')        try:            if float(overall) > 10: overall = float(overall)/10.            review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=10))        except:            pass    # Summary    summary=data.xpath('//div[@class="rrm_conclusionText"]//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary',value=summary))    # Excerpt    excerpt=data.xpath('//div[@id="articleTextBody"]//p//text()').string(multiple=True)    if excerpt:        if summary: excerpt = ''.join(excerpt.split(summary))        review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:1111]))    # Pros    for p in data.xpath('//dl[@class="rrm_pacDataInner pro"]//dd'):        pros=p.xpath('descendant::text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for c in data.xpath('//dl[@class="rrm_pacDataInner con"]//dd'):        cons=c.xpath('descendant::text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    product.reviews.append(review)    if product.reviews:        session.emit(product)def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.gamesaktuell.de/Artikel-Archiv/Tests/', use="curl"), process_first_page, {})