# -*- coding: utf8 -*-from agent import *from models.products import *import time, randomdef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.soccercleats101.com/category/cleat-reviews/', use="curl"), process_category, {})def process_category(data, context, session):    for link in data.xpath('//h2[@class="post-box-title"]//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        rate=link.xpath('../following-sibling::p[@class="post-meta"]//span[contains(@style, "width:")]//@style').string()        if url and name:            bad_list = [' â€“ ']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            bad_list2 = ['Boot Review',' Review']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            if rate:                rate = float(rate[6:][:-1]) / 20.            else:                rate = 0            session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name, rate=rate))    # Next page    next=data.xpath('//span[@id="tie-next-page"]//a//@href').string()    if next:        session.queue(Request(next, use="curl"), process_category, dict(context))    time.sleep(random.randint(5,10))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    product.category='shoes'    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]//@content').string()    if pub_date:        review.date=pub_date[:-15]    else:        review.date='unknown'    # Author    author=data.xpath('//span[@class="post-meta-author"]//a//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    if context['rate'] > 0:        review.grades.append(Grade(name='Overall Rating', type='overall', value=context['rate'], best=5))    # Excerpt    excerpt=data.xpath('//div[@class="entry"]//p[not(a)][not(em)][not(span)]//text()').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt',value=excerpt))        product.reviews.append(review)    # Summary    summ_list = [    '//h3[contains(text(),"I buy them and why")]/following-sibling::p[1]//text()',    '//h3[contains(text()," Summary")]/following-sibling::p[1]//text()',    '//h2[contains(text()," Summary")]/following-sibling::p[1]//text()',    '//p[contains(strong/text()," Summary")]//text()']    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    if product.reviews:        session.emit(product)    time.sleep(random.randint(15,30))