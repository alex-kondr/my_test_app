import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     session.browser.use_new_parser = True    session.browser.agent = "Firefox"    session.queue(Request('http://metro.co.uk/tag/games-reviews/'), process_frontpage, {})def process_frontpage(data, context, session):    for p in data.xpath("//div[@id='content']//h3//a"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//link[@rel='next']/@href").string()    if next:        session.queue(Request(next), process_frontpage, {})def process_product(data, context, session):    product = Product()    name = data.xpath("//h1[@itemprop='headline']/text()[string-length(normalize-space(.))>0]").string()    if not name:        name = context['name']    cleanname = name.replace('review -', '|').replace('review â€“', '|')    product.name = re_search_once('(.+).retro.\|', cleanname)    if not product.name:        product.name = re_search_once('(.+).\|', cleanname)    if not product.name:        product.name = context['name'].replace('Game review: ', '')    product.url = context['url']    category = "Games"    formats = data.xpath("//div[@class='article-body']/p/em/text()[regexp:test(., 'Formats')]").string()    subcat = get_category(formats)    if subcat:        category += '|' + subcat    product.category = Category(name = category)    product.ssid = re_search_once('(\d+)\/*$', product.url)    review = Review()    review.title = name    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    review.date = data.xpath("//div[@class[regexp:test(., 'post-meta-top')]]//span[@class='post-date']/text()[string-length(normalize-space(.))>0]").string()    user_data = data.xpath("//div[@class[regexp:test(., 'post-meta-top')]]//a[@rel='author']").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/author\/([^\/]+)', user.profile_url)        review.authors.append(user)    excerpt = data.xpath("//div[@class='article-body']/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string()    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    summary = data.xpath("//article//p//strong[regexp:test(., 'In Short')]/following-sibling::text()[string-length(normalize-space(.))>0]").string()    if summary:        summary = summary.strip(':').strip()        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "In Short"))    p_value = data.xpath("//article//p//strong[regexp:test(., 'Pros')]/following-sibling::text()[string-length(normalize-space(.))>0]").string()    if p_value:        p_value = p_value.strip(':').strip()        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "Pros"))    c_value = data.xpath("//article//p//strong[regexp:test(., 'Cons')]/following-sibling::text()[string-length(normalize-space(.))>0]").string()    if c_value:        c_value = c_value.strip(':').strip()        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "Cons"))    tgrade = data.xpath("//article//p//strong[regexp:test(., 'Score')]/following-sibling::text()[string-length(normalize-space(.))>0]").string()    if tgrade:        grade = re_search_once('(\d+\.*\d*)\/', tgrade)        if grade:            review.grades.append(Grade(name="Score", value = grade, worst = 0, best = 10, type = 'overall'))    product.reviews.append(review)    session.emit(product)def get_category(cat):    category = ""    if re_search_once('(PlayStation 4 \(reviewed)', cat):        category = "PlayStation 4"    elif re_search_once('(Xbox One \(reviewed)', cat):        category = "Xbox One"    elif re_search_once('(PC \(reviewed)', cat):        category = "PC"    elif re_search_once('(PlayStation 3 \(reviewed)', cat):        category = "PlayStation 3"    elif re_search_once('(3DS \(reviewed)', cat):        category = "3DS"    elif re_search_once('(PS Vita \(reviewed)', cat):        category = "PS Vita"    elif re_search_once('(Xbox 360 \(reviewed)', cat):        category = "Xbox 360"    elif re_search_once('(Wii \(reviewed)', cat):        category = "Wii"    elif re_search_once('(iOS \(reviewed)', cat):        category = "iOS"    elif re_search_once('(Android \(reviewed)', cat):        category = "Android"    elif re_search_once('(PlayStation 2 \(reviewed)', cat):        category = "PlayStation 2"    elif re_search_once('(PlayStation 4)', cat):        category = "PlayStation 4"    elif re_search_once('(Xbox One)', cat):        category = "Xbox One"    elif re_search_once('(PC)', cat):        category = "PC"    elif re_search_once('(PlayStation 3)', cat):        category = "PlayStation 3"    elif re_search_once('(3DS)', cat):        category = "3DS"    elif re_search_once('(PS Vita)', cat):        category = "PS Vita"    elif re_search_once('(Xbox 360)', cat):        category = "Xbox 360"    elif re_search_once('(Wii)', cat):        category = "Wii"    elif re_search_once('(iOS)', cat):        category = "iOS"    elif re_search_once('(Android)', cat):        category = "Android"    elif re_search_once('(PlayStation 2)', cat):        category = "PlayStation 2"    return category