import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     session.queue(Request('http://www.winmagpro.nl/reviews'), process_frontpage, {})def process_frontpage(data, context, session):    for p in data.xpath("//div[@class='grid-index__bg']//h2/a[not(regexp:test(., 'preview', 'i'))]"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//li[@class='pager-next']/a/@href").string()    if next:        session.queue(Request(next), process_frontpage, {})def process_product(data, context, session):    product = Product()    product.name = context['name'].replace('Review:', '').strip()    product.url = context['url']    category = data.xpath("//div[@class[regexp:test(., 'meta--large')]]/div[@class='field-section-select'][not(regexp:test(., 'reviews', 'i'))]//text()[string-length(normalize-space(.))>0]").string()    if not category:        category = "Hardware"    product.category = Category(name = category)    product.ssid = re_search_once('([^\/]+)\/*$', product.url)    review = Review()    review.title = context['name']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    review.date = data.xpath("//div[@class[regexp:test(., 'meta--large')]]/text()[regexp:test(., '\d{4}')]").string()    user_data = data.xpath("//div[@class[regexp:test(., 'meta--large')]]//a[@class='username']").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/users\/([^\/]+)', user.profile_url)        review.authors.append(user)    excerpt = None    ex_data = data.xpath("//div[@class[regexp:test(., 'field-lead-text')]]").first()    if ex_data:        excerpt = ex_data.xpath(".//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@class[regexp:test(., 'field-body')]]/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    summary = data.xpath("//div[@class[regexp:test(., 'field-body')]]/*[self::h3 or self::h2][regexp:test(., 'Conclusie')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Conclusie"))    grade = data.xpath("//p/strong[regexp:test(., 'Cijfer\:')]/following-sibling::text()[1][regexp:test(., '\d+')]").string()    if grade:        review.grades.append(Grade(name="Cijfer", value = grade.replace(',', '.'), worst = 0, best = 10, type = 'overall'))    product.reviews.append(review)    session.emit(product)