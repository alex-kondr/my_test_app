import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     sb = SessionBreak()    sb.max_requests = 10000    session.sessionbreakers = [ sb ]    session.browser.use_new_parser = True    session.queue(Request('http://www.pcgames.de/Artikel-Archiv/Tests/'), process_frontpage, {})def process_frontpage(data, context, session):    years = []    for y in data.xpath("//div[@class[regexp:test(., 'cal_years')]]/a/@href"):        years.append(y.string())    years.reverse()    for y in years:        session.queue(Request(y), process_year, context)def process_year(data, context, session):    for d in data.xpath("//div[@class[regexp:test(., 'cal_day')]]/a/@href"):        session.queue(Request(d.string()), process_date, context)def process_date(data, context, session):    for p in data.xpath("//h3/a"):        context['name'] = p.xpath("text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)def process_product(data, context, session):    product = Product()    product.name = data.xpath("//ul[@class='breadcrumbFrame']/li[position()=2]//a//text()[string-length(normalize-space(.))>0]").string()    product.url = context['url']    product.ssid = re_search_once('(\d+)\/*$', product.url)    review = Review()    review.title = data.xpath("//h1[@class='articleTitle']/text()[string-length(normalize-space(.))>0]").string()    if not review.title:        review.title = context['name']    review.ssid = product.ssid    review.url = product.url    review.type = 'pro'    review.date = data.xpath("//p[@class='introText']/time/text()[string-length(normalize-space(.))>0]").string()    if not review.date:        review.date = data.xpath("//div[@class='editorData']/time/text()[string-length(normalize-space(.))>0]").string()    user = data.xpath("//div[@class='editorData']/span[@class='editorNameLink']//text()[string-length(normalize-space(.))>0]").string()    if user:        review.authors.append(Person(name = user, ssid = user))    excerpt = ""    for ex in data.xpath("//div[@id='articleTextBody']//p//text()[string-length(normalize-space(.))>0][not(ancestor::*[@class[regexp:test(., 'innerArticleModule')]])]"):        if len(excerpt)<100:            excerpt += ' ' + ex.string()    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt.strip()))    for page in data.xpath("//div[@class='articlenavigation_pages']/select/option"):        title = page.xpath(".//text()[string-length(normalize-space(.))>0]").string()        value = page.xpath("@value").string()        if title and value:            url = product.url + '/' + value + '/'            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pages'), value = {'url': url, 'title': title}))    summary_url = data.xpath("//div[@class='articlenavigation_pages']/select/option[last()-1][not(@selected)]/@value").string()    if summary_url:        summary_url = product.url + '/' + summary_url + '/'        session.queue(Request(summary_url), process_summary_page, dict(product=product, review=review))    else:        process_summary(data, review, product)        product.reviews.append(review)        session.emit(product)def process_summary_page(data, context, session):    review = context['review']    product = context['product']    process_summary(data, review, product)    product.reviews.append(review)    session.emit(product)def process_summary(data, review, product):    category = None    categories = []    for c in data.xpath("//h4[@class='entityName']/text()[string-length(normalize-space(.))>0]"):        cat = re_search_once('\(([^\)]+)\)', c.string())        if cat:            if not category:                category = cat            else:                categories.append(cat)    first_cat = 'Games'    if category:        first_cat += '|' + category    product.category = Category(name = first_cat)    if len(categories) > 0:        product.also_in = categories    summary = data.xpath("//b[regexp:test(., 'Fazit')]/following-sibling::text()[string-length(normalize-space(.))>0]").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Fazit"))    for pros in data.xpath("//dl[@class='rrm_pacDataInner pro']/dd"):        p_value = pros.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if p_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "Pro"))    for cons in data.xpath("//dl[@class='rrm_pacDataInner con']/dd"):        c_value = cons.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if c_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "Contra"))    grade = data.xpath("//span[@class='rating_data']/text()[regexp:test(., '\d')]").string()    if grade:        review.grades.append(Grade(name="Spielspa√ü", value = grade, worst = 0, best = 100, type = 'overall'))