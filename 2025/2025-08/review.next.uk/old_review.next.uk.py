from agent import *from models.products import *from datetime import datetimeimport simplejsonimport redef remove_emoji(string):    emoji_pattern = re.compile("["                               u"\U0001F600-\U0001F64F"  # emoticons                               u"\U0001F300-\U0001F5FF"  # symbols & pictographs                               u"\U0001F680-\U0001F6FF"  # transport & map symbols                               u"\U0001F1E0-\U0001F1FF"  # flags (iOS)                               u"\U00002500-\U00002BEF"  # chinese char                               u"\U00002702-\U000027B0"                               u"\U00002702-\U000027B0"                               u"\U000024C2-\U0001F251"                               u"\U0001f926-\U0001f937"                               u"\U00010000-\U0010ffff"                               u"\u2640-\u2642"                               u"\u2600-\u2B55"                               u"\u200d"                               u"\u23cf"                               u"\u23e9"                               u"\u231a"                               u"\ufe0f"  # dingbats                               u"\u3030"                               "]+", flags=re.UNICODE)    return emoji_pattern.sub(r'', string)def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=7000)]    session.queue(Request('https://www.next.co.uk/shop/department-homeware-productaffiliation-kitchen-0'), process_category, dict(cat='Home|Kitchen & Dining'))    session.queue(Request('https://www.next.co.uk/shop/department-homeware-productaffiliation-lighting-0'), process_category, dict(cat='Home|Lighting'))def process_category(data, context, session):    cats = data.xpath('//ul/li/a[contains(@href, "category-")]')    for cat in cats:        name = cat.xpath('text()').string()        url = cat.xpath('@href').string() + '?p=1'        session.queue(Request(url), process_prodlist, dict(cat=context['cat']+'|'+name))def process_prodlist(data, context, session):    prods = data.xpath('//div[contains(@data-testid, "product_tile")]')    for prod in prods:        name = prod.xpath('div/@aria-label').string()        url = prod.xpath('a[contains(@data-testid, "_link")]/@href').string().split('#')[0]        ssid = prod.xpath('a/@data-testid').string().split('tile_')[-1].split('_')[0]        rating = prod.xpath('.//span[contains(@data-testid, "star-rating")]')        if rating:            session.queue(Request(url), process_product, dict(context, name=name, url=url, ssid=ssid))    next_url = data.xpath('//a[regexp:test(., "view next", "i")]/@href').string()    if next_url:        session.queue(Request(next_url, max_age=0), process_prodlist, dict(context))def process_product(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    product.category = context['cat']    product.ssid = context['ssid']    prod_json = data.xpath('//script[@data-testid="pdp-structured-data"]/text()').string()    if prod_json:        prod_json = simplejson.loads(prod_json)        product.manufacturer = prod_json.get('brand', {}).get('name')        product.sku = prod_json.get('sku', product.ssid)    revs_url = "https://www.next.co.uk/review/json/" + product.ssid + '/'    session.do(Request(revs_url, max_age=0), process_reviews, dict(product=product, revs_url=revs_url))    if product.reviews:        session.emit(product)def process_reviews(data, context, session):    product = context['product']    revs_json = simplejson.loads(data.content)    revs = revs_json.get('Results', [])    for rev in revs:        if rev['Review'].get('Imported', False):            continue        review = Review()        # review.title = rev['Review'].get('Title') â€” prod.name        review.type = 'user'        review.ssid = rev['Review']['SubmissionId']        review.url = product.url        author = rev.get('User', {}).get('Nickname')        if author:            review.authors.append(Person(name=author, ssid=author))        date = rev['Review'].get('SubmissionTime')        if date:            date = int(date.split('(')[-1].split(')')[0])            review.date = datetime.utcfromtimestamp(date / 1000).strftime('%Y-%m-%d')        grade_overall = rev.get('Ratings', {}).get('Score')        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        is_recommended = rev['Review'].get('IsRecommended')        if is_recommended:            review.properties.append(ReviewProperty(value=True, type='is_recommended'))        excerpt = rev['Review'].get('Text')        if excerpt:            excerpt = remove_emoji(excerpt).strip()            if excerpt:                review.properties.append(ReviewProperty(type='excerpt', value=excerpt))                product.reviews.append(review)    next_page = revs_json.get('Pages', {}).get('Next')    page = context.get('page', 1)    if next_page and page < int(next_page):        revs_url = context['revs_url'] + str(next_page)        session.do(Request(revs_url, max_age=0), process_reviews, dict(context, page=next_page))