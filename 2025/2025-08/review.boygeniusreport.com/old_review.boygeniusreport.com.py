import simplejsonfrom agent import *from models.products import *def strip_namespace(data):    tmp = data.content_file + ".tmp"    out = file(tmp, "w")    for line in file(data.content_file):        line = line.replace('<ns0', '<')        line = line.replace('ns0:', '')        line = line.replace(' xmlns', ' abcde=')        out.write(line + "\n")    out.close()    os.rename(tmp, data.content_file)def run(context, session):    session.browser.use_new_parser = True    session.queue(Request("http://bgr.com/reviews/"), process_revlist, dict())def process_revlist(data, context, session):    strip_namespace(data)    revs = data.xpath('//article[contains(@class, "type-post")]')    for rev in revs:        title = rev.xpath('.//h2/a/text()').string()        url = rev.xpath('.//h2/a/@href').string()        ssid = rev.xpath('@class').string().split('post-', 1)[-1].split()[0]        session.queue(Request(url), process_review, dict(title=title, url=url, ssid=ssid))    next_url = data.xpath('//link[@rel="next"]/@href').string()    if next_url:        session.queue(Request(next_url), process_revlist, dict())def process_review(data, context, session):    strip_namespace(data)    product = Product()    product.name = data.xpath('//div[contains(@class, "items-start") or contains(@class, "bgr-commerce")]//h3//text()').string() or data.xpath('//div[contains(@class, "product-callout")]/@data-title').string() or data.xpath('//span[@class="product-title"]//text()').string(multiple=True) or context['title'].split('review:')[0].split(' Review')[0].split(' review')[0]    product.url = data.xpath('//div[contains(@class, "bgr-commerce")]//h3/a/@href').string() or data.xpath('//div[contains(@class, "product-callout")]/@data-url').string() or data.xpath('//a[contains(@class, "product-callout") or contains(@class, "see-it") or contains(@rel, "sponsored")]/@href').string() or context['url']    product.ssid = context['ssid']    product.category = data.xpath('//div[contains(@class, "bgr-breadcrumbs")]//span[last()]/a/text()').string().replace('News', 'Tech')    review = Review()    review.title = context['title']    review.url = context['url']    review.ssid = product.ssid    review.type = "pro"    date = data.xpath('//meta[@property="article:published_time"]/@content').string()    if date:        review.date = date.split('T')[0]    author = data.xpath('//div[contains(@class, "co-authors-meta")]/a').first()    if author:        author_name = author.xpath('text()').string()        author_url = author.xpath('@href').string()        author_ssid = author_url.strip('/').split('/')[-1]        review.authors.append(Person(name=author_name, profile_url=author_url, ssid=author_ssid))    grade_overall = data.xpath('//div[contains(@class, "bgr-commerce-stars") or contains(@class, "product-review-stars")]/span[@class="sr-only"]/text()').string()    if grade_overall:        grade_overall = grade_overall.split(': ')[-1].split()[0].replace(',', '.')        review.grades.append(Grade(type="overall", value=float(grade_overall), best=5.0))    pros = data.xpath('//ul[@class="pros"]/li/text()').strings()    for pro in pros:        review.add_property(type='pros', value=pro)    cons = data.xpath('//ul[@class="cons"]/li/text()').strings()    for con in cons:        review.add_property(type='cons', value=con)    summary = data.xpath('//div[contains(@class, "bgr-commerce-description")]/p/text()').string() or data.xpath('//div[@class="bgr-product-review-block "]//div[contains(@class, "leading")]/p//text()').string(multiple=True)    if summary:        review.add_property(type='summary', value=summary)    conclusion = data.xpath('//p[preceding-sibling::h2[regexp:test(@id, "h-conclusion", "i") or regexp:test(., "wrap-up", "i") or regexp:test(., "conclusion", "i")]]//text()').string(multiple=True)    if conclusion:        review.add_property(type="conclusion", value=conclusion)    excerpt = data.xpath('//div[contains(@class, "entry-content")]/p[not(preceding-sibling::h2[regexp:test(@id, "h-conclusion", "i") or regexp:test(., "wrap-up", "i") or regexp:test(., "conclusion", "i")])]//text()').string(multiple=True)    if excerpt:        review.add_property(type="excerpt", value=excerpt)        product.reviews.append(review)        session.emit(product)