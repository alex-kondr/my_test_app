from agent import *from models.products import *import simplejsondef run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=10000)]    session.queue(Request("https://www.primecables.ca/"), process_catlist, dict())def process_catlist(data, context, session):    cats = data.xpath('//li[@class="nav2020"]')    for cat in cats:        name = cat.xpath('a//text()').string()        cats1 = cat.xpath('div/div/dl')        for cat1 in cats1:            cat1_name = cat1.xpath('dt/a//text()').string()            subcats = cat1.xpath('dd/ul/li')            for subcat in subcats:                subcat_name = subcat.xpath('div[@class="category-name"]//text()').string()                url = subcat.xpath('a/@href').string()                session.queue(Request(url), process_prodlist, dict(cat=name + "|" + cat1_name + "|" + subcat_name))def process_prodlist(data, context, session):    prods = data.xpath('//div[@class="product-name-wrap"]/div')    for prod in prods:        name = prod.xpath('p[@v-else="v-else"]//text()').string()        url = prod.xpath('a/@__href').string()        if url:            url = url.split("source_url('")[-1].rstrip("')\"")            session.queue(Request(url), process_product, dict(context, name=name, url=url))    next_url = data.xpath('//li[@class="next"]/a/@href').string()    if next_url:        session.queue(Request(next_url), process_prodlist, dict(context))def process_product(data, context, session):    prod_content = simplejson.loads(data.xpath('//div/@data-origin-params').string())    product = Product()    product.name = context['name']    product.url = context['url']    product.category = context['cat']    product.ssid = prod_content.get('id')    product.sku = prod_content.get('sku')    product.manufacturer = data.xpath('//span[@itemprop="brand"]//text()').string()    mpn = data.xpath('//span[@itemprop="model"]//text()').string()    if mpn:        product.add_property(type='id.manufacturer', value=mpn)    revs_count = data.xpath('//meta[@itemprop="reviewCount"]/@content').string()    if revs_count and int(revs_count) > 0:        revs_url = product.url.replace('p-', 'reviews-')        session.do(Request(revs_url), process_reviews, dict(product=product))def process_reviews(data, context, session):    product = context['product']    revs = data.xpath('//li[contains(@id, "review")]/parent::ul')    for rev in revs:        review = Review()        review.type = "user"        review.url = product.url        review.date = rev.xpath('following::div[@class="review-date"][1]//text()').string()        ssid = rev.xpath('li/@id').string()        if ssid:            review.ssid = ssid.split('review-')[-1]        author = rev.xpath('following::div[@class="review-customer-name notranslate"][1]/p//span[@itemprop="author"]//text()').string()        if author:            review.authors.append(Person(name=author, ssid=author))        grade_overall = rev.xpath('following-sibling::div[@class="review-num"][1]/span/text()').string()        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        hlp_yes = rev.xpath('following::div[@class="review-thank notranslate"][1]/span//text()').string()        if hlp_yes:            hlp_yes = int(hlp_yes.split(' people')[0].split(' person')[0].lstrip('('))            if hlp_yes > 0:                review.add_property(type='helpful_votes', value=hlp_yes)        is_verified = rev.xpath('following::div[@class="review-customer-sort notranslate"][1]/img/@src').string()        if is_verified and 'verified-buyer' in is_verified:            review.add_property(type='is_verified_buyer', value=True)        else:            continue        excerpt = rev.xpath('following::div[@class="review-content-text"][1]/p//text()').string()        if excerpt:            review.add_property(type='excerpt', value=excerpt)            product.reviews.append(review)    next_url = data.xpath('//a[@rel="next"]/@href').string()    if next_url and data.response_url != next_url:        session.do(Request(next_url), process_reviews, dict(product=product))    else:        session.emit(product)