from agent import *from models.products import *def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=4000)]    session.queue(Request('https://www.clubic.com/test-produit/'), process_prodlist, dict())def process_prodlist(data, context, session):    prods = data.xpath("//div[@class='cell auto post-infos align-self-middle']")    for prod in prods:        cat = prod.xpath(".//a[@class='post-badge']//text()").string()        url = prod.xpath("a/@href").string()        title = prod.xpath("a/text()").string()        session.queue(Request(url), process_product, dict(context, url=url, cat=cat, title=title))    next_url = data.xpath("//link[@rel='next']/@href").string()    if next_url:        session.queue(Request(next_url), process_prodlist, dict())def process_product(data, context, session):    product = Product()    product.category = context["cat"]    product.url = context["url"]    product.ssid = product.url.split("/")[-1].split(".")[0]    product.name = data.xpath("//h3[@class='marty-rating-block__title']//text()").string()    if not product.name:        product.name = data.xpath("//h4[@class='legacy-rating-block__title']//text()").string()    if not product.name:        product.name = context["title"]    review = Review()    review.title = context["title"]    review.type = 'pro'    review.url = context['url']    review.date = data.xpath("//meta[@property='article:published_time']/@content").string()    if review.date:        review.date = review.date.split("T")[0]        authors = data.xpath("//div[@class='cell auto fs14 txtleft lh10 txt-nightblue author-bloc']")    for author in authors:        author_name = author.xpath("div[@class='author-infos']//a/span/text()").string()        author_url = author.xpath("a/@href").string()        review.authors.append(Person(name=author_name, profile_url=author_url, ssid=author_name))        conclusion = data.xpath("//div[@class='marty-rating-block__content__cell marty-rating-block__content__cell--resume']//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//h2[@class='ff-title txt-secondary-' and contains(text(),'Conclusion')]/following-sibling::text()[1]").string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    summary = data.xpath("//p[@class='marty-paragraph-left']//strong/text()").string(multiple=True)    if not summary:        summary = data.xpath("//div[contains(@class, 'mod-summary')]/strong[1]").string(multiple=True)    if not summary:        summary = data.xpath("//h2[@class='ff-title txt-secondary-'][1]/following-sibling::b/text()").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))        excerpt = data.xpath("//div[@class='marty-row']//p[contains(@class, 'marty-paragraph-')]//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@class='grid-x grid-padding-x text']//text()").string(multiple=True)    if excerpt:        if conclusion:            excerpt = excerpt.replace(conclusion, "")        if summary:            excerpt = excerpt.replace(summary, "")        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))        grade_overall = data.xpath("//div[contains(@class, 'score')]//em/text()").string()    if grade_overall:        review.grades.append(Grade(type='overall', value=float(grade_overall), best=10.0))    grades = data.xpath("//div[@class='marty-rating-block__columns']/p")    if not grades:        grades = data.xpath("//div[@class='legacy-rating-block__columns']/p")    for grade in grades:        grade_name = grade.xpath(".//span[1]//text()").string()        grade_value = grade.xpath("./span[last()]/text()").string()        if grade_name and grade_value:            review.grades.append(Grade(name=grade_name, value=float(grade_value), best=10.0))        pros = data.xpath("//div[@class='marty-hero-card__infos__pros']/ul/li")    if not pros:        pros = data.xpath("//div[contains(@class, 'legacy-rating-block__cell--pros')]/ul/li")    for pro in pros:        pro = pro.xpath(".//text()").string()        if pro:            review.add_property(type='pros', value=pro)        cons = data.xpath("//div[@class='marty-hero-card__infos__cons']/ul/li")    if not cons:        cons = data.xpath("//div[contains(@class, 'legacy-rating-block__cell--cons')]/ul/li")    for con in cons:        con = con.xpath(".//text()").string()        if con:            review.add_property(type='cons', value=con)        if excerpt:        review.ssid = review.digest()        product.reviews.append(review)        session.emit(product)