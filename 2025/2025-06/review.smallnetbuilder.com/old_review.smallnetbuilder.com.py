# -*- coding: utf8 -*-from agent import *from models.products import *debug = Truedef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.smallnetbuilder.com/', use="curl"), process_first_page, dict())def process_first_page(data, context, session):    for link in data.xpath('//ul[@class="nav navbar-nav"]//a[contains(@href,"review")]'):        url=link.xpath('@href').string()        category=link.xpath('descendant::text()').string(multiple=True)        if url and category:            session.queue(Request(url, use="curl"), process_category, dict(category=category))def process_category(data, context, session):    for link in data.xpath('//h2//a[contains(@href,"review")]'):        url=link.xpath('@href').string()        name=link.xpath('descendant::text()').string()        if url and name:            bad_list2 = ['Reviewed','','','','']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name))    # Next page    next=data.xpath('//li//a[@title="Next"]//@href').string()    if next:        session.queue(Request(next, use="curl"), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    product.category=context['category']    category = data.xpath('//div[@class="pwtags_list"]//a//text()').join('|')    if category: product.category += '|' + category    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid + ' review'    revDate = data.xpath('//time[@itemprop="datePublished"]//@datetime').string()    if revDate:        if 'T' in revDate: revDate = revDate.split('T')[0]        review.date = revDate    else:        review.date='unknown'    # Author    author=data.xpath('//meta[@name="author"]//@content').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Excerpt    excerpt=data.xpath('//div[@class="item-page clearfix"]/following::body[p][1]/p[text()][1]//text()').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt',value=excerpt))    summ_page = data.xpath('//div[@class="pager"]//select//option[last()]//@value').string()    if summ_page:        summ_page = 'http://www.smallnetbuilder.com/' + summ_page        session.do(Request(summ_page, use="curl"), process_summary, dict(context, review=review))    else:        context['review'] = review        process_summary(data, context, session)    product.reviews.append(review)    if product.reviews:        session.emit(product)def process_summary(data, context, session):    review = context['review']    # Summary    summary=data.xpath('//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Closing Thoughts|closing thoughts|closing thoughts|Closing|Thoughts|closing|thoughts|Conclusion|conclusion)")]/following-sibling::p[not(@id)]//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary',value=summary))    # Award    award = data.xpath('//img[contains(@src,"award")]//@src').string()    if award:       review.properties.append(ReviewProperty(type='awards', value=dict(image_src=award)))