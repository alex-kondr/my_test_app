from agent import *from models.products import *debug = Truedef process_frontpage(data, context, session):    for cat in data.xpath("//label[@for='showSubmenuReviews']//following-sibling::ul//li//a"):        category = cat.xpath(".//text()").string()        url = cat.xpath("@href").string()        if category and url:            session.do(Request(url), process_revlist, dict(context, category=category))def process_revlist(data, context, session):    for rev in data.xpath("//ul[@class='standard reduced']//li//h4//a[2]"):        url = rev.xpath("@href").string()        title = rev.xpath(".//text()").string(multiple=True)        if url and title:            session.do(Request(url), process_review, dict(context, url=url, title=title))    nexturl = data.xpath("//a[contains(text(), 'Weiter Â»')]//@href").string()    if nexturl:        session.do(Request(nexturl), process_revlist, dict(context))def process_review(data, context, session):    author = data.xpath("//p[@class='author']//text()").string()    excerpt = data.xpath("//h4[contains(text(), 'Einleitung')]//following-sibling::p//text()").string(multiple=True)    date = data.xpath("//time//@datetime").string().split(' ')[0]    for prod in data.xpath("//div[@id='summary']//h4"):        product = Product()        name = prod.xpath("text()").string()        if name:            if 'meint' in name:                product.name = context['title']            if 'Links' in name:                break            if not('meint' in name) and not('Links' in name):                product.name = name        product.url = context['url']        product.ssid = get_url_parameter(product.url, 'contentid')        if not(product.ssid):            product.ssid = context['title']        product.category = context['category']        review = Review()        review.type = 'pro'        review.title = product.name        review.url = product.url        review.ssid = product.ssid        review.date = date        if author:            review.authors.append(Person(name=author, ssid=author))            if excerpt:            review.add_property(type='excerpt', value=excerpt)                summary = prod.xpath(".//following-sibling::p[1]//text()").string(multiple=True)        if summary:            review.add_property(type='summary', value=summary)        for pro in prod.xpath(".//following-sibling::div[@class='valuation old'][1]//li[@class='positive']//text()"):            if pro:                review.add_property(type='pros', value=pro.string())        for con in prod.xpath(".//following-sibling::div[@class='valuation old'][1]//li[@class='negative']//text()"):            if con:               review.add_property(type='cons', value=con.string())        for grade in prod.xpath(".//following-sibling::div[@class='valuation old'][1]//ul[@class='awardsOld']//img//@src"):            if grade:                grade = grade.string()                grade_name = grade.split('Award_')[-1].split('_')[0]                if 'Sehr_Gut' in grade:                    review.grades.append(Grade(type='overall', name=grade_name, value=3.0, best=3.0))                elif '_Gut' in grade:                    review.grades.append(Grade(type='overall', name=grade_name, value=2.0, best=3.0))                elif '_Befriedigend' in grade:                    review.grades.append(Grade(type='overall', name=grade_name, value=1.0, best=3.0))                else:                    review.grades.append(Grade(type='overall', name=grade_name, value=0.0, best=3.0))        if summary or excerpt:            product.reviews.append(review)        if product.reviews:            session.emit(product)def run(context, session):    session.queue(Request('https://www.tech-review.de/'), process_frontpage, {})