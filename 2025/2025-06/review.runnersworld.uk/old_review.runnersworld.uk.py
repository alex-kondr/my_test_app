# -*- coding: utf8 -*-from agent import *from models.products import *import simplejsonimport agentdef request(url, json):    r = agent.Request(url, data=json, method='POST')    r.add_header('Authorization', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Imp3dF9zZWNyZXRfZnJlIn0.e30.wlF-prqbR7gQ28qeFJrGOTKcct5p5jzNfrO6NBcc7C8')    r.add_header('Content-Type', 'application/json')    r.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36')    return rRequestX = requestdef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    uri = 'https://heimdall.hearstapps.com/graphql'    json = '{"query":"\n\tquery searchQuery(\n\t\t$siteName: String!\n\t\t$firstCount: Int!\n\t\t$pageNumber: Int!\n\t\t$queryString: String!\n\t) {\n\t\tsearch(index_name: $siteName, first: $firstCount, start: $pageNumber, query: $queryString) {\n\t\t\ttotal_count\n\t\t\tcontent {\n\t\t\t\tid\n\t\t\t\ttitle\n\t\t\t\tmedia(role_in:[12,2,3]) {\n\t\t\t\t\t...ImageFragment\n\t\t\t\t}\n\t\t\t\tslug\n\t\t\t\tedited_at\n\t\t\t\tmetadata {\n\t\t\t\t\tsocial_dek\n\t\t\t\t\tshort_title\n\t\t\t\t\tseo_meta_title\n\t\t\t\t\tseo_meta_description\n\t\t\t\t}\n\t\t\t\tpublish_from\n\t\t\t\tdisplay_id\n\t\t\t\tdisplay_date\n\t\t\t\tlegacy_id\n\t\t\t\tsection {\n\t\t\t\t\ttitle\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t\tsubsection{\n\t\t\t\t\ttitle\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\tfragment ImageFragment on Image {\n\t\t\timage_id\n\t\t\thips_url\n\t\t\thips_prefix\n\t\t\theight\n\t\t\trole\n\t\t\tpathname\n\t\t\tmedia_type\n\t\t\twidth\n\t\t\tcreated_at\n\t\t\tmetadata {\n\t\t\t\tcrops\n\t\t\t\tcustom_tag\n\t\t\t\tdek\n\t\t\t\tdomain\n\t\t\t\theadline\n\t\t\t\tselected_crop\n\t\t\t\tlegacy_crops\n\t\t\t\tcaption\n\t\t\t\tphoto_credit # for image credit\n\t\t\t\tembed_image_link_url\n\t\t\t\tembed_image_link_title\n\t\t\t\tembed_image_link_new_tab\n\t\t\t\tembed_image_link_nofollow\n\t\t\t}\n\t\t\timage_metadata {\n\t\t\t\tcrops\n\t\t\t\tlegacy_domain\n\t\t\t\tfile_type\n\t\t\t\tphoto_credit\n\t\t\t\tseo_meta_title\n\t\t\t\tseo_meta_description\n\t\t\t}\n\t\t\tsource {\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n\t\n","variables":{"siteName":"runnersworld-en-gb","firstCount":100,"pageNumber":1,"queryString":"ried and tested"}}'    #session.queue(RequestX(uri, json), process_pages, dict(base_url=uri, base_json=json))    urls = [    'https://www.runnersworld.com/uk/gear/shoes/',    'https://www.runnersworld.com/uk/gear/clothes/',    'https://www.runnersworld.com/uk/gear/tech/']    for url in urls:        session.queue(Request(url), process_category, dict(category=url.split('gear/')[1][:-1]))def process_pages(data, context, session):    jstxt = data.content    jstxt = jstxt.replace('\/','')    revs = yaml.load(jstxt)    total = revs['search']['total_count']    pages = int(total) / 100 + 1    for x in xrange(2, pages):        uri = context['base_url']        json = context['base_json'].replace('"pageNumber":1','"pageNumber":'+str(x*100)+1)        session.queue(RequestX(uri, json), process_category, dict(context))def process_categoryJSON(data, context, session):    jstxt = data.content    jstxt = jstxt.replace('\/','/')    revs = simplejson.loads(jstxt)    try:        for rev in revs['search']['content']:            name = rev['title']            url = rev['section'].get('slug') + '/' + rev['subsection'].get('slug') + '/' + rev['slug']            category = rev['section'].get('slug') + '|' + rev['subsection'].get('slug')            url = 'https://www.runnersworld.com/uk' + url            if 'first-look' in url or 'review' in url or 'pick-of-the-week' in url or 'tested' in name or 'Tested' in name:                session.queue(Request(url), process_product, dict(context, url=url, name=name, category=category))    except:        print revsdef process_category(data, context, session):    json_data = data.xpath('//script[@id="json-ld"]/text()').string()    jstxt = json_data    jstxt = jstxt.replace('\/','/')    revs = simplejson.loads(jstxt)    try:        for rev in revs['itemListElement']:            name = rev['name']            url = rev['url']            if 'first-look' in url or 'review' in url or 'pick-of-the-week' in url or 'tested' in name or 'Tested' in name:                bad_list2 = ['Tried and tested:',': Tried and tested']                for item in bad_list2:                    if item in name:                        name = name.replace(item, '')                session.queue(Request(url), process_product, dict(context, url=url, name=name))    except:        print revsdef process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    product.category=context['category']    product.manufacturer = data.xpath('node()[@class="product-slide-brand"]//text()').string()    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid + ' review'    revDate = data.xpath('//meta[@property="article:published_time"]//@content').string()    if revDate:        if 'T' in revDate: revDate = revDate.split('T')[0]        review.date = revDate    author = data.xpath('//node()[@class="byline-name"]//text()').string() or 'runnersworld.co.uk'    review.authors.append(Person(name=author, ssid=author))    conclusion = data.xpath('//node()[regexp:test(descendant::text(),"(Verdict|verdict)")]/following::p[text()][1]//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    summ_list = [    '//div[contains(@class,"content-dek standard-dek")]//text()']    summary = False    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    excerpt=data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt and excerpt != summary:        review.properties.append(ReviewProperty(type='excerpt',value=excerpt))    if summary or excerpt or conclusion:        product.reviews.append(review)    if product.reviews:        session.emit(product)