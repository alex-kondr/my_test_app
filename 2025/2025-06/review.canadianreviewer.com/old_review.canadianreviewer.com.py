import stringfrom agent import *from models.products import *import redef process_view_category(data, context, session):    for view_categoryline in data.xpath("//div[@class='journal-entry-text' and h2[@class='title']/a[contains(@href,'/review-')]]"):        context['date'] = view_categoryline.xpath(".//span[@class='posted-on']/text()[string-length(normalize-space(.))>0]").string()        context['excerpt'] = view_categoryline.xpath("div[@class='body']//p//text()[string-length(normalize-space(.))>0][not(regexp:test(.,'By |Click to read more'))]").join("")        context['product_url'] = view_categoryline.xpath("h2[@class='title']/a[contains(@href,'/review-')]/@href").string()        context['product_name'] = view_categoryline.xpath("h2[@class='title']/a[contains(@href,'/review-')]/text()[string-length(normalize-space(.))>1]").join(" ")        if context['excerpt'] and context['date'] and context['product_url'] and context['product_name']:            time.sleep(3)            context['product_name'] = context['product_name'].replace('Review: ','')            context['product_name'] = context['product_name'].replace('Review:','')            session.queue(Request(context['product_url']), process_product, context)    next = data.xpath("//div[@class='paginationControlWrapper journal-navigation']//a[regexp:test(normalize-space(.),'Next \d Entries')]/@href").string()    if next:         session.queue(Request(next), process_view_category, context)def process_product(data, context, session):    product = Product()    product.url = context['product_url']     product.name = context['product_name']    product.ssid =context['product_name']    product.category = data.xpath("//span[@class='posted-in']//a[@rel='tag']/text()[string-length(normalize-space(.))>1]").join(", ")    for imageline in data.xpath("//meta[@property='og:image' and contains(@content,'http://www.canadianreviewer.com')]"):        url_image = imageline.xpath("@content").string()        if url_image:            #print url_image            url_image = re_search_once('(.+)\?', url_image)            product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.url = context['product_url']     review.title = context['product_name']    review.ssid = review.title    review.type = 'pro'    review.properties.append(ReviewProperty(type='excerpt', value = context['excerpt']))    review.date = context['date']    username = data.xpath("//span[@class='posted-by']/a/text()[string-length(normalize-space(.))>1]").string()    if username:        profile = data.xpath("//span[@class='posted-by']/a/@href").string()        u_ssid = username        review.authors = Person(name = username, ssid = u_ssid, profile_url = profile)     for prosline in data.xpath("//div[@id='content']//p[.//text()[regexp:test(.,'Pros:|Hits:')]]/following-sibling::ul[1]/li"):        pros = prosline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if pros:            review.properties.append(ReviewProperty(name='Pros', type='pros', value=pros))              for consline in data.xpath("//div[@id='content']//p[.//text()[regexp:test(.,'Cons:|Misses:')]]/following-sibling::ul[1]/li"):        cons = consline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if cons:            review.properties.append(ReviewProperty(name='Cons', type='cons', value=cons))              summary = data.xpath("//div[@id='content']//p[.//text()[regexp:test(.,'onclusion|erdict')]]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]]//text()[string-length(normalize-space(.))>0]").join(" ")    if summary:      review.properties.append(ReviewProperty(name='Verdict', type='summary', value=summary))          u_rating_all = data.xpath("//div[@class='body']//text()[regexp:test(.,'Rating: ')]").string()         if not u_rating_all:      u_rating_all = data.xpath("//strong[text()[regexp:test(.,'Rating')]]/following-sibling::text()[string-length(normalize-space(.))>0][regexp:test(.,'out of 5')]").string()         if u_rating_all:        u_rating = re_search_once('(\d+[.]\d+|\d+) out of 5', u_rating_all)        if u_rating:            review.grades.append(Grade(name='Rating', value = u_rating, worst = 0, best = 5, type = 'overall'))    product.reviews.append(review)    if product.category:        session.emit(product)def run(context, session):    session.queue(Request('http://www.canadianreviewer.com/cr/category/reviews'), process_view_category, {})    session.queue(Request('http://www.canadianreviewer.com/cr/category/reviews?currentPage=2'), process_view_category, {})