# -*- coding: utf8 -*-from agent import *from models.products import *debug = Truedef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://www.nafisa.co.za/category/review/'), process_category, {})def process_category(data, context, session):    for link in data.xpath('//a[@class="post-title"]'):        url=link.xpath('@href').string()        name=link.xpath('following-sibling::node()[regexp:test(name(),"h\d")]//text()').string()        if url and name:            bad_list2 = ['Bullet Review:','Thoughts:','Review:','Hands On:','First Impressions:','Thoughts on']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url),process_product,dict(context,url=url,name=name))    # Next page    next=data.xpath('//a[@class="next page-numbers"]//@href').string()    if next:        session.queue(Request(next), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    # Category    category = data.xpath('//div[@class="post-item-single-container"]//div[@class="post-categories"]//a[not(contains(descendant::text(),"review"))]//text()|//a[@class="post-tags-item"]//text()').join('|')    if category:        product.category=category.replace('#','')    else:        product.category='gadgets'    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid    # Publish date    pub_date=data.xpath('//a[@class="post-date"]//text()').string()    if pub_date:        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//a[@class="post-author"]//text()').string()    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    overall=data.xpath('//div[@class="post-content-review-score"]//node()[regexp:test(name(),"h\d")]/text()').string()    if overall:        review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=10))    for g in data.xpath('//div[@class="post-content-review-progressbar-item"]'):        name =g.xpath('div[1]/div[1]//text()').string()        value=g.xpath('div[1]/div[2]//text()').string()        if value and name and 'OVERALL' not in name:            if ' - ' in name: name = name.split(' - ')[0]            try:                value = int(value)/10.                review.grades.append(Grade(name=name, value=value, best=10))            except:                print 'skipped, score value fault:', value    # Summary    summ_list = [    '//p[contains(descendant::text(),"CONCLUSION")]/following-sibling::p//text()',    '//div[@class="review-short-summary"]//text()']    summary=False    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    # Excerpt    exce_list = [    '//div[@class="post_inner_wrapper"]//p//text()',    '//div[@id="ts-post"]//p//text()',    '//meta[@property="og:description"]//@content']    for item in exce_list:        excerpt=data.xpath(item).string(multiple=True)        if excerpt:            if summary: excerpt = ''.join(excerpt.split(summary))            review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:135]))            break    # Pros    for pro in data.xpath('//node()[@class="post-content-review-pros"]//li'):        pros = pro.xpath('descendant::text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for con in data.xpath('//node()[@class="post-content-review-cons"]//li'):        cons = con.xpath('descendant::text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    product.reviews.append(review)    if product.reviews:        session.emit(product)