from agent import *from models.products import *import redebug = Truedef run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=10000)]    session.queue(Request('http://www.madshrimps.be'), process_frontpage, {})def process_frontpage(data, context, session):    cats = data.xpath("//div[@id='menu1']/ul[@class='content menu']/li/a[@class='button bg-arrow']/@href")    for cat in cats:        url = cat.string()        session.queue(Request(url), process_category, context)def process_category(data, context, session):    prods = data.xpath("//a[@class='article_title']/@href")    for prod in prods:        url = prod.string()        session.queue(Request(url), process_product, dict(url=url))def process_product(data, context, session):    try:        data.xpath("/")    except:        print("Exception.")        return    product = Product()    product.name = data.xpath("//div[@class='rightcol']/h1//text()").string()    product.category = data.xpath("//div[@class='rightcol']/p[@class='info']/a/span[@class='label']//text()").string()    product.url = context["url"]    product.ssid = re_search_once("article\/(\d+)", product.url)    review = Review()    review.title = product.name    review.type = "pro"    review.url = context["url"]    review.ssid = product.ssid    review.date = data.xpath("//div[@class='rightcol']/p[@class='info']/span[@class='date']//text()").string()    authors = data.xpath("//div[@class='rightcol']/p[@class='info']/a[@class='author']")    for author in authors:        url = author.xpath("@href").string()        name = author.xpath(".//text()").string()        ssid = re_search_once('member\/(\d+)', url)        review.authors.append(Person(name=name, profile_url=url, ssid=ssid))    summary = data.xpath("//div[@id='article_content']//text()").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))     excerpt = data.xpath("//text()").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))     pages = data.xpath("(//ul[@class='article_page_nav'])[1]/li/select/option")    for page in pages:        title = page.xpath(".//text()").string()        url = page.xpath("@value").string()        review.properties.append(ReviewProperty(type="pages", value=dict(url=url, title=title)))    lasturl = data.xpath("(//ul[@class='article_page_nav'])[1]/li/select/option/@value").string()    session.do(Request(lasturl), process_lastpage, dict(product=product, review=review))        if product.reviews:        session.emit(product)def process_lastpage(data, context, session):    product = context['product']    review = context['review']    conclusion = data.xpath("//div[@id='article']/font[@size='+1'][last()]/following-sibling::node()[not(regexp:test(normalize-space(.),':$'))]/descendant-or-self::text()").string(multiple=True)    if not(conclusion):        conclusion = data.xpath("//h1[contains(.,'Conclus')]/following-sibling::div[@id='article'][1]/p//text()").string(multiple=True)    if not(conclusion):        conclusion = data.xpath("//div[@id='article']//text()").string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type="conclusion", value=conclusion))        product.reviews.append(review)