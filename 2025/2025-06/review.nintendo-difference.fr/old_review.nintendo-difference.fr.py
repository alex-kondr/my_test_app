from agent import *from models.products import *debug = Trueimport reIMGLST = []def process_productlist(data, context, session):   cnt = 0   page = context['page']   for prod in data.xpath("//div[@class='paginated-table-header']/following-sibling::div/div[@class='paginated-table-cell paginated-table-cell-titre']"):      cnt += 1      url = prod.xpath("a/@href").string()      name = prod.xpath("descendant::text()").string(multiple=True)      manufacturer = prod.xpath("following-sibling::div[last()]//text()").string(multiple=True)      category = prod.xpath("preceding-sibling::div[last()]//text()").string(multiple=True)      if url and name and category:         session.queue(Request(url), process_review, dict(url=url, name=name, manufacturer=manufacturer, category=category))   if cnt == 20:      nexturl = 'http://www.nintendo-difference.com/listetests-s0.htm' + '?page=%s'%(page+1)      session.queue(Request(nexturl), process_productlist, dict(page=page+1))def process_review(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.ssid = re_search_once("test(\d+)", product.url)   product.category = context['category']   product.manufacturer = context['manufacturer']   content = data.xpath("//div[@id='left-content']").first()   if content:      review = Review()      review.type = 'pro'      review.url = context['url']      review.ssid = product.ssid      product.reviews.append(review)      author = content.xpath("descendant::a[@id='test-header-author']").first()      if author:         datetxt = author.xpath("/following-sibling::text()").string()         if datetxt:            review.date = re_search_once('(\d{2}.*\d{4})', datetxt)         name = author.xpath("descendant::text()").string()         url = author.xpath("@href").string()         if url and name:            review.authors.append(Person(name=name, ssid=name, profile_url=url))      excerpt = content.xpath("descendant::div[@id='cachearticle']//text()[not(ancestor::h3)][following::h3[regexp:test(normalize-space(.),'Conclusion')]]").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("descendant::div[@id='cachearticle']//text()[not(ancestor::h3)]").string(multiple=True)      if excerpt:         review.properties.append(ReviewProperty(type='excerpt', value=excerpt))      labels = ['GRAPHISME', 'DUREE DE VIE', 'MANIABILITE', 'SONS ET MUSIQUES']      rates = data.xpath("//div[@class='top_note']//div[regexp:test(@class, '^note_')]")      if len(labels) == len(rates):         for name, g in zip(labels, rates):            ratetxt = g.xpath("div[@class='note']/text()").string()            rate = re_search_once("(\d+)", ratetxt)            description = g.xpath("div[@class='texte']//text()").string(multiple=True)            if rate:               review.grades.append(Grade(name=name, value=float(rate), best=20.0, description=description))      g = data.xpath("//div[@class='note_generale']").first()      if g:         ratetxt = g.xpath("div[@class='note']/text()").string()         rate = re_search_once("(\d+)", ratetxt)         description = g.xpath("div[@class='texte']//text()").string(multiple=True)         if rate:            review.grades.append(Grade(type='overall', name='GENERALE', value=float(rate), best=20.0))         if description:            review.properties.append(ReviewProperty(type='conclusion', value=description))      for pro in data.xpath("//div[@id='plus_moins']/div[@id='gauche_m']//ul/li"):         line = pro.xpath("descendant::text()").string(multiple=True)         if line:            review.properties.append(ReviewProperty(type='pros', value=line))      for con in data.xpath("//div[@id='plus_moins']/div[@id='droite_m']//ul/li"):         line = con.xpath("descendant::text()").string(multiple=True)         if line:            review.properties.append(ReviewProperty(type='cons', value=line))      summary = data.xpath("//div[@id='verdict']//text()").string(multiple=True)      if summary:         review.properties.append(ReviewProperty(type='summary', value=summary))      imagesrc = data.xpath("//div[@id='verdict']//img[regexp:test(@alt,'Verdict')]/@src").string()      if imagesrc and not(imagesrc in IMGLST):         IMGLST.append(imagesrc)      print IMGLST      conclusion = data.xpath("descendant::div[@id='cachearticle']//text()[preceding::h3[1][regexp:test(normalize-space(.),'Conclusion')]]").string(multiple=True)      if conclusion:         review.properties.append(ReviewProperty(type='conclusion', value=conclusion))     if product.reviews:      session.emit(product)def run(context, session):   session.queue(Request('http://www.nintendo-difference.com/listetests-s0.htm'), process_productlist, dict(page=1))