from agent import *from models.products import *def process_dates_list(data, context, session):    for url in data.xpath("//li[@class='archive__subitem']/a/@href"):        session.queue(Request(url.string(), max_age=1), process_date, {})def process_date(data, context, session):    for product in data.xpath("//li[@class='archive__item']//a"):        title = product.xpath(".//text()").string()        url = product.xpath("@href").string()        if title and url:            session.queue(Request(url), process_product, dict(pageurl=url, title=title))def process_product(data, context, session):    product = Product()    product.url = context["pageurl"]    product.name = context['title'].split("review")[0]    product.ssid = context['pageurl'].split("/")[-1]    cats = data.xpath("//h2/text()")    for category in cats:        category = category.string().lower()        if data.xpath("//h5[@class='boxout__title']/text()").string() and data.xpath("//h5[@class='boxout__title']/text()").string().find("Compare other") >= 0:            product_category = data.xpath("//h5[@class='boxout__title']/text()").string().replace("Compare other ", "")            break        elif category.find("more ") >= 0 and category.find("review") >= 0:            product_category = category.lower().split(" review")[0]            more_pos = category.find("more ") + 5            product_category = product_category[more_pos::]            break    else:        product_info = data.xpath("//head/script[@type='application/ld+json']/text()").string()        category_start = product_info.find('"Category: ')        product_category = product_info[category_start::].split(",")[0].replace('"Category: ', "")[:-1]    if product_category == "product" or product_category == "":        product_category = "Review"    product.category = product_category    review = Review()    review.type = "pro"    review.title = context['title']    review.url = context["pageurl"]    review.ssid = product.ssid    date = data.xpath("//time/@datetime").string()    review.date = date.split('T')[0]    summary = data.xpath("//p[@class='header__strapline']/text()").string()    if summary:          review.properties.append(ReviewProperty(type="summary", value=summary))    conclusion = data.xpath("//p[@class='verdict__text']/text()").string()    if conclusion:        review.properties.append(ReviewProperty(type="conclusion", value=conclusion))    score = len(data.xpath("//span[@class='chunk rating']/span[@class='rating__star']"))    score += len(data.xpath("//span[@class='chunk rating']/span[@class='rating__star rating__star--half']")) * 0.5    if score > 0:        review.grades.append(Grade(type="overall", value=score, best=5))    authors = data.xpath("//a[@class='byline__authorname']")    for author in authors:        authorurl = author.xpath("@href").string()        name = author.xpath(".//text()").string()        review.authors.append(Person(name=name, ssid=name, profile_url=authorurl))    pros = data.xpath("//div[@class='procon__pros']/ul/li/p/text()")    for pro in pros:        review.add_property(type="pros", value=pro.string())    cons = data.xpath("//div[@class='procon__cons']/ul/li/p/text()")    for con in cons:        review.add_property(type="cons", value=con.string())    product.reviews.append(review)    session.emit(product)def run(context, session):    session.queue(Request('https://www.realhomes.com/reviews/archive'), process_dates_list, {})