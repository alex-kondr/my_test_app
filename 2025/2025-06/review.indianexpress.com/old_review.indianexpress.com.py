#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):    session.browser.agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0) Gecko/20100101 Firefox/31.0"    session.queue(Request('http://indianexpress.com/section/technology/tech-reviews/'), process_view_category, dict(page=1))def process_view_category(data, context, session):    if context['page'] != 1:        html_data = data.content.encode('utf8')        html_data = html_data.replace('"\\t','')        html_data = html_data.replace('\\t"','')        html_data = html_data.replace('\\n','')        html_data = html_data.replace('\\t','')        html_data = html_data.replace('\\/','')        html_data = html_data.replace('\\"','"')        html_code = '<html><head></head><body>\n' + html_data + '\n</body></html>'        data = data.parse_fragment(html_code)    cnt = 0    for view_categoryline in data.xpath('//node()[@class="title"][regexp:test(name(),"h\d")]//a'):        context['product_url'] = view_categoryline.xpath('@href').string()        context['product_name'] = view_categoryline.xpath('descendant::text()[string-length(normalize-space(.))>1]').string()        if context['product_url'] and context['product_name']:            cnt +=1            if 'wp-admin/indianexpress.com' in context['product_url']:                context['product_url'] = context['product_url'].replace('wp-admin/indianexpress.com','/')                context['product_url'] = context['product_url'].replace('articletechnologytech-reviews','article/technology/tech-reviews/')            name = context['product_name']            bad_list = [' Review:',' review:']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            context['product_name'] = name            session.queue(Request(context['product_url']), process_product, context)    next = data.xpath('//a[@class="next page-numbers"]//@href').string()    if next:        session.queue(Request(next), process_view_category, dict(context))def process_product(data, context, session):    product = Product()    product.name = context['product_name']    product.url = context['product_url']    product.category = data.xpath('//div[@class="storytags"]//a//text()').join('|') or 'Technology'    product.ssid = re_search_once('postid-(\d+)', data.xpath('//body[contains(@class,"postid-")]/@class').string()) or context['product_url']    review = Review()    review.product=product.name    review.url = context['product_url']    review.ssid = product.ssid + ' review'    review.type = 'pro'    # Title    title = data.xpath('//meta[@property="og:title"]//@content').string()    if title:        review.title = title    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]/@content').string()    if pub_date:        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    username = data.xpath('//meta[@itemprop="author"]//@content').string()    if username:        review.authors = Person(name=username, ssid=username)    excerpt = data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt[:135]+'...'))    rating_value = data.xpath('//div[@class="hide_rating"]//text()[string-length(normalize-space(.))=1][1]').string()    if rating_value:        review.grades.append(Grade(name= 'Rating', value=rating_value, worst=0, best=5, type='overall'))    summary = data.xpath('//node()[@class="m-story-header__intro"]//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))    # Conclusion    conc_list = [    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Verdict|Conclus|Should you buy|verdict)")]/following-sibling::p//text()',    '//p[regexp:test(descendant::node()//text(),"(Verdict|Conclus|Should you buy|verdict)")]/following-sibling::p//text()']    for item in conc_list:        conclusion = data.xpath(item).string(multiple=True)        if conclusion:            if 'For all the latest' in conclusion: conclusion = conclusion.split('For all the latest')[0]            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))            break    for prosline in data.xpath("//p[.//text()[regexp:test(.,'What is good')]]/following-sibling::p[following-sibling::p[.//text()[regexp:test(.,'What is not that good')]]]"):        pros = prosline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if pros:            review.properties.append(ReviewProperty(name='What is good', type='pros', value=pros))    for consline in data.xpath("//p[.//text()[regexp:test(.,'What is not that good')]]/following-sibling::p[following-sibling::p[.//text()[regexp:test(.,'Verdict')]]]"):        cons = consline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if cons:            review.properties.append(ReviewProperty(name='What is not that good', type='cons', value=cons))    product.reviews.append(review)    if summary or excerpt or conclusion:        session.emit(product)