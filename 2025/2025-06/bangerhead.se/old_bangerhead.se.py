import stringfrom agent import *from models.products import *import reimport yamldef process_category(data, context, session):    for categoryline in data.xpath("//li[a/@title='New in']/following-sibling::li[following-sibling::li[.//a[regexp:test(.,'Magazine')]]]/ul/li/a[@data-lvl='2']"):        context['category_url'] = categoryline.xpath("@href").string()        c1 = categoryline.xpath("parent::li/parent::ul/preceding-sibling::a[1]//text()[string-length(normalize-space(.))>1]").string()        c2 = categoryline.xpath("text()[string-length(normalize-space(.))>1]").string()        if c1 and c2:           context['category_name'] = c1 + '|' + c2           session.queue(Request(context['category_url']), process_view_category, context)           #session.emit(Product(name = 'product_name', url = category_url, category = category_name))def process_view_category(data, context, session):    for view_categoryline in data.xpath("//div[@data-bh-element-type='product']"):        context['sku'] = view_categoryline.xpath(".//div/@data-artnr").string()        context['man'] = view_categoryline.xpath(".//div[@class='PT_Brand gutter-sm-B text-s']/text()[string-length(normalize-space(.))>0]").string()        context['url'] = view_categoryline.xpath(".//div[@class='PT_Beskr text-s']/a/@href").string()        context['name'] = view_categoryline.xpath(".//div[@class='PT_Beskr text-s']/a/text()[string-length(normalize-space(.))>0]").string()        if context['url'] and context['name'] and context['man'] and context['sku']:            session.queue(Request(context['url']), process_product, context)            #session.emit(Product(name = context['product_name'], url = context['product_url'], category = '2'))    next = data.xpath("//div[@id='product_group--pagination']/a[contains(text(),'NÃ¤sta')]/@href").string()    if next:        session.queue(Request(next), process_view_category, context)def process_product(data, context, session):  product = Product()  product.name = context['name']  product.url = context['url']  product.category = context['category_name']#    product.category = data.xpath("//span[@class='breadcrumb']/a[position()>1]/text()[string-length(normalize-space(.))>0]").join("|")  product.ssid = product.name  product.manufacturer = context['man']  product.sku = context['sku']  json_text = data.xpath("//script[@consent_type='2' and @type='application/ld+json']/node()[regexp:test(.,'reviewRating')]").string()  if json_text:    json_text2 = yaml.load(json_text)    json_reviews = json_text2["review"]    print json_reviews#    for key in json_reviews:#      print(key)    #print json_text2["product_reviews"]["user_reviews"]["reviews"][0]["name"]    i = 0    for r in json_reviews:      i = i + 1      review = Review()      review.url = product.url      review.type = 'user'      username = r["author"]["name"]      if username:        review.authors = Person(name = username, ssid = username)       review.ssid = product.sku + '/' + str(i)      summary = r["description"]      if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))            grade1 = r["reviewRating"]["ratingValue"]      if grade1:             review.grades.append(Grade(name= 'Rating', value = grade1, worst = 0,  best = 5, type = 'overall'))      if summary and username and grade1:        product.reviews.append(review)#    process_reviews(data, product)    if product.reviews and product.category and product.sku:        session.emit(product)def run(context, session):     session.sessionbreakers = [SessionBreak(max_requests=20000)]    #session.queue(Request('https://www.bangerhead.se/'), process_category, {})    session.queue(Request('https://www.bangerhead.se/schampo-harvard'), process_view_category, {'category_name': '1'})