import stringfrom agent import *from models.products import *import redef getexcerpt(txtlist):    excerpt = ''    txtlist = [o.strip() for o in txtlist]    for line in txtlist:        excerpt += ' ' + line        if re_search_once("([!?.])$", line) and len(line) > 100:            break    excerpt = re.compile("\s+").sub(' ', excerpt)    return excerpt.strip()def process_view_category(data, context, session):    for view_categoryline in data.xpath("//div[@id='real_content']//div[@class='post-content']"):        context['product_url'] = view_categoryline.xpath("following-sibling::a[1]/@href").string()        context['product_name'] = view_categoryline.xpath("h3/text()[string-length(normalize-space(.))>1][contains(.,'Test')]").string()        context['date'] = view_categoryline.xpath("div[@class='details']/span[@class='date']/text()[string-length(normalize-space(.))>1]").string()        if context['product_url'] and context['product_name'] and context['date']:            session.queue(Request(context['product_url']), process_product, context)            #session.emit(Product(name = context['product_name'], url = context['product_url'], category = context['category_name']))    next = data.xpath("//div[@class='pagination']//a[text()='→']/@href").string()    if next:        session.queue(Request(next), process_view_category, context)def process_product(data, context, session):     product = Product()    product.url = context['product_url']     product.ssid = context['product_url']    product.name = context['product_name']    product.category = 'Testy smartfonów'    url_image = data.xpath("//meta[@property='og:image']/@content").string()    if url_image:        product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.url = context['product_url']     review.ssid = context['product_url']     review.title = context['product_name']    review.type = 'pro'    review.date = context['date']    i = '0'    username = data.xpath("//a[@class='author_email']/text()").string()    if username:        profile = data.xpath("//a[@class='author_email']/@href").string()        review.authors = Person(name = username, ssid = username, email = profile)     txtlist = data.xpath("//div[@class='article-full']/p[text()[string-length(normalize-space(.))>100]]//text()[not(ancestor::script)]").strings()    if txtlist:        excerpt = getexcerpt(txtlist)        if excerpt:            review.properties.append(ReviewProperty(type='excerpt', value = excerpt))    summary = data.xpath("//div[@class='article-full']//h1[.//text()[regexp:test(.,'odsumowanie')]]/following-sibling::p[text()[string-length(normalize-space(.))>100]]//text()[string-length(normalize-space(.))>0]").join(" ")    if summary:        i = '1'        review.properties.append(ReviewProperty(name='Podsumowanie', type='summary', value=summary))          for prosline in data.xpath("//p[strong/text()[regexp:test(.,'Zalety')]]/following-sibling::ul[1]/li"):        pros = prosline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if pros:            i = '1'            review.properties.append(ReviewProperty(name='Zalety', type='pros', value=pros))            for consline in data.xpath("//p[strong/text()[regexp:test(.,'Wady')]]/following-sibling::ul[1]/li"):        cons = consline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if cons:            i = '1'            review.properties.append(ReviewProperty(name='Wady',type='cons', value=cons))              for gradeline in data.xpath("//div[@class='article-full']//h1//text()[regexp:test(.,'– ocena ')]"):        rating_name = re_search_once('(.+) ocena', gradeline.string())        rating_value = re_search_once('(\d)', gradeline.string())        if rating_value and rating_value != '0' and rating_name:            rating_name = rating_name.replace('–','')            i = '1'            review.grades.append(Grade(name= rating_name, value = rating_value, worst = 0, best = 6))    product.reviews.append(review)    if i == '1':      session.emit(product)def run(context, session):    session.queue(Request('https://gsmonline.pl/testy'), process_view_category, {}) 