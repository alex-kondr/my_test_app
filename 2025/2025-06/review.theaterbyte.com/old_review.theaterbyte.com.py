import stringfrom agent import *from models.products import *import redef getexcerpt(txtlist):    excerpt = ''    txtlist = [o.strip() for o in txtlist]    for line in txtlist:        excerpt += ' ' + line        if re_search_once("([!?.])$", line) and len(line) > 100:            break    excerpt = re.compile("\s+").sub(' ', excerpt)    return excerpt.strip()def process_category(data, context, session):    for categoryline in data.xpath("//div[@class='td_module_flex td_module_flex_1 td_module_wrap td-animation-stack td-cpt-post']//div[@class='td-module-meta-info'][h3]/h3"):        url = categoryline.xpath("a/@href").string()        name = categoryline.xpath("a//text()[string-length(normalize-space(.))>1]").string()        if url :           session.do(Request(url), process_product, {'product_name' : name, 'product_url' : url, 'ssid' : url})    next = data.xpath("//div[@class='page-nav td-pb-padding-side']/a[@aria-label='next-page']/@href").string()    if next:       session.do(Request(next), process_category, {})def process_product(data, context, session):     product = Product()    product.url = context['product_url']     product.ssid = context['product_url']    product.name = context['product_name']    product.category = 'cat'    url_image = data.xpath("//meta[@property='og:image']/@content").string()    if url_image:        product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.url = context['product_url']     review.ssid = context['product_url']     review.title = context['product_name']    review.type = 'pro'    review.date = data.xpath("//time[contains(@class,'entry-date')]/following-sibling::text()[string-length(normalize-space(.))>0]").string()    username = data.xpath("//div[@class='tdb-author-name-wrap']/a[@class='tdb-author-name']/text()[string-length(normalize-space(.))>0]").string()    if username:        profile = data.xpath("//div[@class='tdb-author-name-wrap']/a[@class='tdb-author-name']/@href").string()        review.authors = Person(name = username, ssid = username, profile_url = profile)     txtlist = data.xpath("//div[contains(@class,'tdb-block-inner') and .//text()[string-length(normalize-space(.))>100]]//text()[string-length(normalize-space(.))>0]").strings()    if not txtlist:        txtlist = data.xpath("//div[@class='entry-content']//text()[string-length(normalize-space(.))>1]").strings()    if txtlist:        excerpt = getexcerpt(txtlist)        if excerpt:            review.properties.append(ReviewProperty(type='excerpt', value = excerpt))    for prosline in data.xpath("//span[text()[regexp:test(.,'Pros|The Good')]]/following::ul[1]/li"):        pros = prosline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if pros:            review.properties.append(ReviewProperty(name='Pros', type='pros', value=pros))            for prosline in data.xpath("//p[strong/text()[regexp:test(.,'Pros|The Good')]]/following::ul[1]/li"):        pros = prosline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if pros:            review.properties.append(ReviewProperty(name='Pros', type='pros', value=pros))            for consline in data.xpath("//span[text()[regexp:test(.,'Cons|The Bad')]]/following::ul[1]/li"):        cons = consline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if cons:            review.properties.append(ReviewProperty(name='Cons',type='cons', value=cons))              for consline in data.xpath("//p[strong/text()[regexp:test(.,'Cons|The Bad')]]/following::ul[1]/li"):        cons = consline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if cons:            review.properties.append(ReviewProperty(name='Cons',type='cons', value=cons))              summary = data.xpath("//div[@class='rwp-summary']//text()[string-length(normalize-space(.))>0]").join(" ")    if not summary:      summary = data.xpath("//div[@class='td-review-summary-content']//text()[string-length(normalize-space(.))>0]").join(" ")    if not summary:      summary = data.xpath("//h2[.//text()[regexp:test(.,'The Final Assessmen|END')]]/following-sibling::p[.//text()[string-length(normalize-space(.))>70]][1]//text()").join(" ")    if not summary:      summary = data.xpath("//h4[.//text()[regexp:test(.,'The Final Assessmen|END')]]/following-sibling::p[.//text()[string-length(normalize-space(.))>70]][1]//text()").join(" ")    if summary:        review.properties.append(ReviewProperty(name='Summary', type='summary', value=summary))          grade1 = data.xpath("//span[@class='rwp-overlall-score-value']/text()[string-length(normalize-space(.))>0]").string() 			    if grade1:   			       rating_value = re_search_once('(\d+[.]\d+|\d+)', grade1) 			       if rating_value and rating_value != '0': 			            review.grades.append(Grade(name= 'Score', value = rating_value, worst = 0,  best = 5, type = 'overall'))    for ratingline in data.xpath("//tr[@class='td-review-row-stars']"):        name = ratingline.xpath("td[@class='td-review-desc']/text()[string-length(normalize-space(.))>0]").string()        value = 0        for grade in ratingline.xpath("td[@class='td-review-stars']/i[@class='td-icon-star']"):            value = value + 1        for grade in ratingline.xpath("td[@class='td-review-stars']/i[@class='td-icon-star-half']"):            value = value + 0.5        rating_value = value        if value and value !='0' and name:          review.grades.append(Grade(name= name, value = rating_value, worst = 0, best = 5))    product.reviews.append(review)    if txtlist:       session.emit(product)def run(context, session):    sb = SessionBreak()    sb.max_requests = 20000    session.sessionbreakers = [ sb ]    session.queue(Request('https://www.theaterbyte.com/'), process_category, {}) #    session.queue(Request('https://www.theaterbyte.com/wordpress/category/hardware-gear-electronics/gear-news-announcements'), process_view_category, {'category_name': '1'}) 