from agent import *from models.products import *debug = Trueimport reimport agentdef request(url, max_age=0):   r = agent.Request(url, max_age=max_age, use='curl')   r.add_header('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')   return rRequest = requestdef process_productlist(data, context, session):      for prod in data.xpath("//div[@class='leftbox artistyle1 artistyle2']//h3"):      url = prod.xpath("preceding-sibling::a[img][1]/@href").string()      name = prod.xpath("descendant::text()").string(multiple=True)      category = prod.xpath("following-sibling::div[@class='systems'][1]//text()").string(multiple=True)      if url and name and category:         fixurl = re_search_once('^(.*)\?', url)         if not(fixurl):            fixurl = url         session.queue(request(fixurl), process_product, dict(url=fixurl, name=name, category=category))   nexturl = data.xpath("//td[@class='next']/a/@href").string()   if not(nexturl):      nexturl = data.xpath("//a[@class='next']/@href").string()   if nexturl:      fnexturl = re_search_once('^(.*)\&sid', nexturl)      if not(fnexturl):         fnexturl = nexturl      if fnexturl:         session.queue(request(fnexturl), process_productlist, dict(context, url=fnexturl))   if not(data.xpath("//div[@class='leftbox artistyle1 artistyle2']//h3")):     url = data.xpath("//a[@class='buttonBox continue']/@href").string()     if url:        session.do(request(url), process_productlist, dict(context))def process_productlist2(data, context, session):   for prod in data.xpath("//div[@class='leftbox artistyle1 artistyle2']//h3"):      url = prod.xpath("preceding-sibling::a[img][1]/@href").string()      name = prod.xpath("descendant::text()").string(multiple=True)      category = prod.xpath("following-sibling::div[@class='systems'][1]//text()").string(multiple=True)      if not(category):         category = context['category']      if url and name and category:         fixurl = re_search_once('^(.*)\?', url)         if not(fixurl):            fixurl = url         session.queue(request(fixurl), process_product, dict(url=fixurl, name=name, category=category))   nexturl = data.xpath("//a[@class='next']/@href").string()   if not(nexturl):      nexturl = data.xpath("//td[@class='next']/a/@href").string()   if nexturl:      fnexturl = re_search_once('^(.*)\&sid', nexturl)      if not(fnexturl):         fnexturl = nexturl      if fnexturl:         session.queue(request(fnexturl), process_productlist2, dict(context, url=fnexturl))   if not(data.xpath("//div[@class='leftbox artistyle1 artistyle2']//h3")):     url = data.xpath("//a[@class='buttonBox continue']/@href").string()     if url:        session.do(request(url), process_productlist2, dict(context))def process_product(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.ssid = data.xpath("//div[@id='main']//article/@data-id").string()   product.category = context['category']   product.manufacturer = data.xpath("//ul[@class='infobox']//text()[regexp:test(., '^Entwickler') or regexp:test(., '^Hersteller')]/following::text()[normalize-space(self::text())][1]").string()   content = data.xpath("//div[@id='main']").first()   if content:      review = Review()      review.type = 'pro'      review.title = context['name']      review.url = context['url']      review.ssid = product.ssid      review.date = data.xpath("//li[@class[regexp:test(., 'publishDateTime')]]/text()[string-length(normalize-space(.))>0]").string()      author = data.xpath("//li[@class[regexp:test(., 'publishAuthor')]]//a").first()      if author:         name = author.xpath("descendant::text()").string(multiple=True)         url = author.xpath("ancestor::a[1]/@href").string()         if url and name:            review.authors.append(Person(name=name, profile_url=url, ssid=name))      excerpt = data.xpath("//h2[@class='intro']//text()[string-length(normalize-space(.))>0]").string(multiple=True)      if not excerpt:         excerpt = data.xpath("//div[@class='breadtext']//p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)      if excerpt:         review.properties.append(ReviewProperty(type='excerpt', value=excerpt))      grade = data.xpath("//div[@class='scoreSplit']/div[@class='bigScoreWrapper']/img").first()      if grade:         title = grade.xpath("following-sibling::span/text()").string()         value = grade.xpath("@alt").string()         if title and value:            product.reviews.append(review)            review.grades.append(Grade(type='overall', name=title, value=float(value), best=10.0))      for g in data.xpath("//td[@class='subscore']"):         value = g.xpath("descendant::text()").string(multiple=True)         title = g.xpath("preceding-sibling::td[1]//text()").string(multiple=True)         if title and value:            review.grades.append(Grade(name=title, value=float(value), best=10.0))      pro = content.xpath("//div[@class='goodbad'][preceding-sibling::div[1][regexp:test(normalize-space(.),'\+')]]//text()").string(multiple=True)      if pro:         review.properties.append(ReviewProperty(type='pros', value=pro))      con = content.xpath("//div[@class='goodbad'][preceding-sibling::div[1][regexp:test(normalize-space(.),'\-')]]//text()").string(multiple=True)      if con:         review.properties.append(ReviewProperty(type='cons', value=con))      if product.reviews:         session.emit(product)   if not(data.xpath("//div[@id='main']")):      url = data.xpath("//a[@class='buttonBox continue']/@href").string()      if url:         session.do(request(url), process_product, dict(context, url=url))def run(context, session):   session.sessionbreakers = [SessionBreak(max_requests=5000)]   session.browser.agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:32.0) Gecko/20100101 Firefox/32.0"   session.queue(request('http://www.gamereactor.de/Kritiken/'), process_productlist, {})   session.queue(request('http://www.gamereactor.de/Gadgets/'), process_productlist2, dict(category='Gadgets'))   session.queue(request('http://www.gamereactor.de/Film/'), process_productlist2, dict(category='Filme'))