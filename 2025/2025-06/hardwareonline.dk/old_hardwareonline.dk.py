from agent import *from models.products import *import operatorimport redebug = Truedef process_category(data, context, session):    for view in data.xpath("//a[@class='list-spacing d-flex justify-content-between forum-item padding-left-10px padding-right-10px forum-click']"):         url = view.xpath("(.)/@href").string()          name = view.xpath("(.)/following-sibling::div[1]//text()[string-length(normalize-space(.))>1]").join("")        if url:           ssid = re_search_once("\?id\=(\d+)", url)           if not ssid:              ssid = url           session.queue(Request(url), process_product, {'url' : url, 'name' : name, 'ssid' : ssid})def process_product(data, context, session):       product = Product()      product.name =context['name']     product.url = context['url']     product.ssid =context['ssid']     product.category = 'headphone && hardware'      review = Review()      review.product = product.name       review.url = product.url       review.ssid = product.ssid     review.type = "pro"     review.date = data.xpath("//div[@class='main-svar-info-bar rounded-corners']/span[1]//text()[string-length(normalize-space(.))>1]").join("")    avt_n = data.xpath("//span[@class='main-svar-sub-content']/a//text()[string-length(normalize-space(.))>1]").join("")    avt_u = data.xpath("//span[@class='main-svar-sub-content']/a/@href").join("")    if avt_n and avt_u:       review.authors.append(Person(name = avt_n, profile_url = avt_u, ssid = review.ssid))       for list in data.xpath("//body[p[@class='MsoNormal']]//img[@class='img-fluid']"):        src = list.xpath("@src").string()        if src:           product.properties.append(ProductProperty(type="image" , value = {'src': src}))    excerpt = data.xpath("/html/body[2]/following-sibling::html[1]/body[1]/p[text()[string-length(normalize-space(.))>100] or *//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>100]").join("")    if excerpt:         review.properties.append(ReviewProperty(type="excerpt", value = excerpt))    next = data.xpath("//span[@id='ContentPlaceHolder_ContentPlaceHolder_lblnavpage']/a[last()-1]/@href").string()    if next:       session.do(Request(next), process_concl, {'review' : review})    if not next:       conclusion = data.xpath("/html/body[2]/following-sibling::html[1]/body[1]/p[text()[string-length(normalize-space(.))>100] or *//text()[string-length(normalize-space(.))>100]][last()]//text()[string-length(normalize-space(.))>100]").join("")       if conclusion:            review.properties.append(ReviewProperty(type="conclusion", value = conclusion))       for lisp in data.xpath("/html/body[2]/following-sibling::html[1]/body[1]/*[*[contains(text(), 'Positivt') or contains(text(), 'positivt') or contains(text(), 'plus')] or */*[contains(text(), 'Positivt') or contains(text(), 'positivt') or contains(text(), 'plus')]]/following-sibling::ul[1]"):           pros = lisp.xpath("text()[string-length(normalize-space(.))>1]").join("")           if pros:              review.properties.append(ReviewProperty(type="pros", value = pros))       for lisc in data.xpath("/html/body[2]/following-sibling::html[1]/body[1]/*[*[contains(text(), 'Positivt') or contains(text(), 'positivt') or contains(text(), 'plus')] or */*[contains(text(), 'Positivt') or contains(text(), 'positivt') or contains(text(), 'plus')]]/following-sibling::ul[1]"):           cons = lisc.xpath("text()[string-length(normalize-space(.))>1]").join("")           if cons:              review.properties.append(ReviewProperty(type="cons", value = cons))    if excerpt:       product.reviews.append(review)          session.emit(product)def process_concl(data, context, session):    review = context['review']    for lisp in data.xpath("/html/body[2]/following-sibling::html[1]/body[1]/*[*[contains(text(), 'Positivt') or contains(text(), 'positivt') or contains(text(), 'plus')] or */*[contains(text(), 'Positivt') or contains(text(), 'positivt') or contains(text(), 'plus')]]/following-sibling::ul[1]"):        pros = lisp.xpath("text()[string-length(normalize-space(.))>1]").join("")        if pros:           review.properties.append(ReviewProperty(type="pros", value = pros))    for lisc in data.xpath("/html/body[2]/following-sibling::html[1]/body[1]/*[*[contains(text(), 'Positivt') or contains(text(), 'positivt') or contains(text(), 'plus')] or */*[contains(text(), 'Positivt') or contains(text(), 'positivt') or contains(text(), 'plus')]]/following-sibling::ul[1]"):        cons = lisc.xpath("text()[string-length(normalize-space(.))>1]").join("")        if cons:           review.properties.append(ReviewProperty(type="cons", value = cons))    conclusion = data.xpath("/html/body[2]/following-sibling::html[1]/body[1]/p[text()[string-length(normalize-space(.))>100] or *//text()[string-length(normalize-space(.))>100]][last()]//text()[string-length(normalize-space(.))>100]").join("")    if conclusion:         review.properties.append(ReviewProperty(type="conclusion", value = conclusion))def run(context, session):        session.queue(Request('http://www.hardwareonline.dk/artikler.aspx'), process_category, {})