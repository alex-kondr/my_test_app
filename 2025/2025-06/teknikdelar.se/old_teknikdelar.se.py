from agent import *from models.products import *import operatorimport redebug = Truedef process_category(data, context, session):    for view in data.xpath("//div[@id='nav-collapse']/ul/li/a"):         url = view.xpath("(.)/@href").string()          name = view.xpath("(.)//text()[string-length(normalize-space(.))>1]").join("")        if url and name:           session.queue(Request(url), process_category1, {'cat' : name, 'url' : url})def process_category1(data, context, session):    cat = context['cat']    for view in data.xpath("//div[@class='grid']/div[@class='details']"):         url = view.xpath("(.)/preceding-sibling::a[1]/@href").string()          name = view.xpath("(.)/div[@class='name']/h3//text()[string-length(normalize-space(.))>1]").join("")        val = view.xpath("(.)/div[@class='score']/i/@data-score").string()        if url:           ssid = url           session.do(Request(url), process_product, {'cat' : cat, 'name' : name, 'ssid' : ssid, 'url' : url, 'val' : val})def process_product(data, context, session):       val_g = context['val']    for list in data.xpath("//div[@class='review-content']/div/div[@class='review']"):        date = list.xpath("div[@class='author']/div/div[@class='date']//text()[string-length(normalize-space(.))>1]").string()        avt_n = list.xpath("div[@class='author']/div/div[@class='name']//text()[string-length(normalize-space(.))>1]").join("")        val = list.xpath("div[2]/div[@class='stars']/i/@data-score").string()        if date :           product = Product()             product.name =context['name']            product.url =  context['url']            product.ssid = context['ssid']            product.category = context['cat']           product.sku = data.xpath("//span[@class='number']//text()[string-length(normalize-space(.))>0]").string()                        review = Review()             review.product = product.name              review.url = product.url              review.ssid = product.ssid            review.type = "pro"            review.date = date            if avt_n:              review.authors.append(Person(name = avt_n, profile_url = review.url, ssid = review.ssid))            else:              avt_n = 'user'             for list_src in data.xpath("//div[@class='hooper-list']/ul[@class='hooper-track']/li[img]/img"):               src = list_src.xpath("@src").string()               if src:                  product.properties.append(ProductProperty(type="image" , value = {'src': src}))           excerpt = data.xpath("//div[@class='description-wrapper']/div/p[text()[string-length(normalize-space(.))>100] or *//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>100]").join("")           if excerpt:                review.properties.append(ReviewProperty(type="excerpt", value = excerpt))           #else:           #   excerpt = data.xpath("//div[@itemprop='description']//text()[string-length(normalize-space(.))>20]").join("")           #   if excerpt:             #      review.properties.append(ReviewProperty(type="excerpt", value = excerpt))           #   else:           #      excerpt = data.xpath("//div[@class='product-description']//text()[string-length(normalize-space(.))>20][1]").join("")           #      if excerpt:             #         review.properties.append(ReviewProperty(type="excerpt", value = excerpt))           if val_g:              review.grades.append(Grade(type = 'overall', value = val_g, worst = 0,  best = 5))           if val:              review.grades.append(Grade(name = avt_n, value = val, worst = 0,  best = 5))            product.reviews.append(review)              session.emit(product)def run(context, session):        session.queue(Request('https://www.teknikdelar.se'), process_category, {})