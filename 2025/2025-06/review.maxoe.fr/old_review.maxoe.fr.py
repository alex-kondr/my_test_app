from agent import *from models.products import *import redebug = Truedef process_revlist(data, context, session):   for rev in data.xpath("//a[@rel='bookmark' and img]"):      url = rev.xpath("@href").string()      title = rev.xpath("@title").string(multiple=True)      if url and title:         session.queue(Request(url), process_review, dict(context, url=url, title=title))   nexturl = data.xpath("//a[regexp:test(normalize-space(.),'Suivante')]/@href").string()   if nexturl:      session.queue(Request(nexturl), process_revlist, dict(context))def process_review(data, context, session):   product = Product()   product.name = data.xpath("//div[@class='titlefiche']//text()").string()   product.url = context['url']   product.ssid = re_search_once('(\d+)', data.xpath("//div[@class='post-ratings']/@id").string())   product.category = data.xpath("//span[@id='breadcrumbs']/span/descendant::a[last()]/text()").string()   review = Review()   review.type = 'pro'   review.title = context['title']   review.url = context['url']   review.ssid = product.ssid   product.reviews.append(review)   datetxt = data.xpath("//meta[@itemprop='datePublished']/@content").string()   if datetxt:      review.date = datetxt.split('T')[0]   author = data.xpath("/descendant::img[contains(@src, 'date.png')]/following::a[1]").first()   if author:      name = author.xpath("descendant::text()").string(multiple=True)      profile_url=author.xpath("@href").string()      if name and profile_url:         review.authors.append(Person(name=name, profile_url=profile_url, ssid=name))   excerpt = data.xpath("//descendant::div[@class='fullsingle linkgames']/p[normalize-space(text())]//text()").string(multiple=True)   if excerpt:      review.properties.append(ReviewProperty(type='excerpt', value=excerpt))   for pro in data.xpath(u"//span[@class='text-success']/following-sibling::div/text()"):      line = pro.string()      if line:         fixedline = re_search_once("^-(.*)$", line)         if fixedline:            review.properties.append(ReviewProperty(type='pros', value=fixedline.strip()))   for con in data.xpath(u"//span[@class='text-danger']/following-sibling::div/text()"):      line = con.string()      if line:         fixedline = re_search_once("^-(.*)$", line)         if fixedline:            review.properties.append(ReviewProperty(type='cons', value=fixedline.strip()))   summary = data.xpath("/descendant::div[@class='cadregris'][1]//text()").string(multiple=True)   if summary:      review.properties.append(ReviewProperty(type='summary', value=summary))   conclusion = data.xpath("/descendant::div[@class='cadregris'][2]//text()").string(multiple=True)   if conclusion:      review.properties.append(ReviewProperty(type='conclusion', value=conclusion))   score = data.xpath("//div[@class='cadrenote']//div[regexp:test(text(),'Appr√©ciation de MaXoE')]/following-sibling::div//img/@alt").string()   if score:      review.grades.append(Grade(type='overall', name='Note', value=float(score), best=10.0))   session.emit(product)def run(context, session):   session.queue(Request('http://www.maxoe.com/category/games/jeux-articles/'), process_revlist, {})