from agent import *from models.products import *import redebug = Truedef process_category(data, context, session):    for categoryline in data.xpath("//div[@class='filterMenu']//div[@class='filterItems show']//a[@class='filterItem']"):        context['category_url'] = categoryline.xpath("@href").string()        context['c1'] = categoryline.xpath("text()[string-length(normalize-space(.))>1]").string()        if context['c1']:          session.queue(Request(context['category_url']), process_category2, context)def process_category2(data, context, session):    for categoryline in data.xpath("//div[@class='filterMenu']//div[@class='filterItems show']//a[contains(@class,'filterItem subItem')]"):        context['category_url'] = categoryline.xpath("@href").string()        c2 = categoryline.xpath("text()[string-length(normalize-space(.))>1]").string()        if c2:          context['category_name'] = context['c1'] + '|' + c2          session.queue(Request(context['category_url']), process_view_category, context)          #session.emit(Product(name = 'product_name', url = category_url, category = category_name))def process_view_category(data, context, session):    for view_categoryline in data.xpath("//div[@class='skuResult']/div"):        #context['brand'] = view_categoryline.xpath(".//div[@class='brand']//text()[string-length(normalize-space(.))>1]").string()        context['product_url'] = view_categoryline.xpath(".//a/@href[not(regexp:test(.,'é|ö|%C3%B6'))]").string()        context['product_name'] = view_categoryline.xpath(".//div[contains(@class,'Name')]//text()[string-length(normalize-space(.))>1]").join(" ")        if context['product_url'] and context['product_name']:            session.queue(Request(context['product_url'], ignore_errors=True), process_product, context)    next = data.xpath("//a[contains(text(),'Nästa sida')]/@href").string()    if next:        session.queue(Request(next, ignore_errors=True), process_view_category, context)def process_product(data, context, session):     product = Product()    product.url = context['product_url']     product.ssid = re_search_once('-s(\d+)', context['product_url'])    product.name = context['product_name']    product.category = data.xpath("//body[div[@class='separator']]//a[@itemprop='item']/span/text()[string-length(normalize-space(.))>0]").join("|")    product.manufacturer = data.xpath("//td[@itemprop='brand']//text()[string-length(normalize-space(.))>0]").string()    url_image = data.xpath("//div[@id='prodImg']//img/@src").string()    if url_image:        product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    i = 0    for u in data.xpath("//body[div[@class='reviewTitle']]"):      i = i + 1      review = Review()      review.type = 'user'      review.url = context['product_url']      review.ssid = product.ssid + '/' + str(i)      review.date = u.xpath("div[@class='reviewAge']//text()[string-length(normalize-space(.))>0]").string()      review.title = u.xpath("div[@class='reviewTitle']//text()[string-length(normalize-space(.))>0]").string()      username = u.xpath("div[@class='reviewAuthor']//text()[string-length(normalize-space(.))>0]").string()      if username:        review.authors = Person(name = username, ssid = username)      summary = u.xpath("div[@class='reviewContent']//text()[string-length(normalize-space(.))>0]").join(" ")      if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))            grade1 = u.xpath("preceding-sibling::head[1]/meta/@value").string()      if grade1:          rating_value = re_search_once('(\d+)', grade1)        if rating_value and rating_value != '0':            review.grades.append(Grade(name= 'Rating', value = rating_value, worst = 0,  best = 5, type = 'overall'))      if review.ssid and summary:         product.reviews.append(review)    if product.reviews:      session.emit(product)def run(context, session):    #session.browser.use_new_parser = "True"    sb = SessionBreak()    sb.max_requests = 25000    session.sessionbreakers = [ sb ]    session.queue(Request('https://www.parfym-klick.se/c/Unisex/'), process_category, {})    #session.queue(Request('https://www.parfym-klick.se/c/Unisex/', ignore_errors=True), process_category, {})    #session.queue(Request('https://www.parfym-klick.se/Nail-Stregthener-d12967/', ignore_errors=True), process_view_category, {'category_name': 'e'})    #session.queue(Request('https://www.parfym-klick.se/c/F%25C3%25B6r-Honom/', ignore_errors=True), process_view_category, {'category_name': 'e'})