#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import timedebug = Truedef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://droidsans.com/category/reviews/'), process_productlist, {})def process_productlist(data, context, session):    for link in data.xpath('//li//a[@rel="bookmark"][not(img)]'):        url=link.xpath('@href').string()        name=link.xpath('following::node()[regexp:test(name(),"h\d")][1]//text()').string()        if url and name:# and not session.seen(url):            name = url.split('.com/')[1]            bad_list2 = ['preview-','-preview','review-','-review','unbox-','-unbox',            'hands-on-','-hands-on','-specs','-spec-','-comparison','comparison-','mini-',            'what-is-inside-','-compare-','-features-']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            name = name.replace('-',' ')[:-1].capitalize()            session.queue(Request(url), process_product, dict(context, url=url, name=name))    # Next page    next = data.xpath('//a[text()="Next ›"]//@href').string()    if next:        session.queue(Request(next), process_productlist, dict(context))def process_product(data, context, session):    product=Product()    product.url=context['url']    product.name=context['name']    # Category    category = data.xpath('//a[@rel="tag"]//text()').join('|')    if category:        product.category = category    else:        product.category = 'unknown'    # Ssid    ssid = data.xpath('//span[contains(@id,"more-")]//@id').string() or data.xpath('//article/@class').string()    if ssid:        if 'post-' in ssid: ssid = ssid.split('post-')[1].split(' ')[0]        if 'more-' in ssid: ssid = ssid[5:]        product.ssid = ssid    else:        product.ssid = product.name + product.url    review=Review()    review.product=product.name    review.url=product.url    review.ssid=product.ssid + ' review'    review.type='pro'    # Title    title = data.xpath('//meta[@property="og:title"]//@content').string()    if title:        review.title = title    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]/@content').string()    if pub_date:        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//span[contains(@class,"author-name")]//a//text()').string()    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    over_list = [    '//div[@class="news-assessment__circle-value"]//text()']    for item in over_list:        overall=data.xpath(item).string()        if overall:            overall = overall.replace(',','.')            review.grades.append(Grade(name='Overall Rating', type='overall', value=float(overall), best=10))    # Conclusion    conclusion = data.xpath('//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(สรุป)")]/following-sibling::p//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    # Excerpt    exce_list = [    '//meta[@property="og:description"]//@content',    '//div[contains(@class,"post-cont")]//p//text()']    for item in exce_list:        excerpt=data.xpath(item).string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:111]+'...'))            break    product.reviews.append(review)    if product.reviews:        session.emit(product)    time.sleep(5)