from agent import *from models.products import *import simplejsonXCAT = ['Shop', 'FAQs', 'Deals', 'Contact']def run(context, session):    session.queue(Request('https://www.shop-beurer.com/', use='curl', force_charset='utf-8'), process_frontpage, dict())def process_frontpage(data, context, session):    cats = data.xpath('//li[contains(., "Shop")]/ul/li/a')    for cat in cats:        url = cat.xpath('@href').string()        name = cat.xpath('.//text()').string()        if name not in XCAT:            session.queue(Request(url), process_prodlist, dict(cat=name))def process_prodlist(data, context, session):    prods = data.xpath('//li[@data-product-item="data-product-item"]')    for prod in prods:        url = prod.xpath('.//h2[@class="productitem--title"]/a/@href').string()        name = prod.xpath('.//h2[@class="productitem--title"]/a//text()').string()        session.queue(Request(url, use='curl', force_charset='utf-8'), process_product, dict(context, url=url, name=name))    next_url = data.xpath('//link[@rel="next"]/@href').string()    if next_url:        session.queue(Request(next_url, use='curl', force_charset='utf-8'), process_prodlist, dict(context))def process_product(data, context, session):    product = Product()    product.name = context['name']    product.category = context['cat']    product.url = context['url']    product.ssid = data.xpath('//span[@class="shopify-product-reviews-badge"]/@data-id').string()    try:        prod_json = simplejson.loads(data.xpath('''//script[contains(text(), '"@type": "Product"')]//text()''').string())        product.sku = prod_json.get('sku')        product.manufacturer = prod_json.get('brand', {}).get('name')        ean = prod_json.get('mpn')        if ean and ean.isdigit() == True and len(ean) > 11:            product.add_property(type='id.ean', value=ean)    except:        pass    revs_url = "https://judge.me/reviews/reviews_for_widget?url=shop-beurer.myshopify.com&shop_domain=shop-beurer.myshopify.com&platform=shopify&page=1&per_page=5&product_id=" + product.ssid    session.do(Request(revs_url, use='curl', force_charset='utf-8', max_age=0), process_reviews, dict(product=product))def process_reviews(data, context, session):    product = context['product']    try:        resp = simplejson.loads(data.content)    except:        if product.reviews:            session.emit(product)        return    new_data = data.parse_fragment(resp['html'])    revs = new_data.xpath("//div[@class='jdgm-rev jdgm-divider-top']")    for rev in revs:        review = Review()        review.type = 'user'        review.url = product.url        review.title = rev.xpath(".//b[@class='jdgm-rev__title']/text()").string()        review.ssid = rev.xpath("@data-review-id").string()        date = rev.xpath(".//span[@class='jdgm-rev__timestamp jdgm-spinner']/@data-content").string()        if date:            review.date = date.split()[0]        author = rev.xpath(".//span[@class='jdgm-rev__author']/text()").string()        if author:            review.authors.append(Person(name=author, ssid=author))        is_verified = rev.xpath('@data-verified-buyer').string()        if is_verified and is_verified == 'true':            review.add_property(type='is_verified_buyer', value=True)        grade_overall = rev.xpath(".//span[@class='jdgm-rev__rating']/@data-score").string()        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        excerpt = rev.xpath(".//div[@class='jdgm-rev__body']//text()").string(multiple=True)        if excerpt:            review.add_property(type='excerpt', value=excerpt)            product.reviews.append(review)    next_page = new_data.xpath('//a[@rel="next"]/@data-page').string()    if next_page:        next_url = "https://judge.me/reviews/reviews_for_widget?url=shop-beurer.myshopify.com&shop_domain=shop-beurer.myshopify.com&platform=shopify&page=" + next_page + "&per_page=5&product_id=" + product.ssid        session.do(Request(next_url), process_reviews, dict(product=product))    elif product.reviews:        session.emit(product)