from agent import *from models.products import *import simplejsonXCAT = ['Clearance', 'View All']def run(context, session):    session.queue(Request('https://www.wowbbq.co.uk/'), process_frontpage, dict())def process_frontpage(data, context, session):    cats = data.xpath('//li[contains(@class, "nav-item level0")]')    for cat in cats:        name = cat.xpath('a//text()').string(multiple=True)        if name not in XCAT:            cats1 = cat.xpath('.//div[contains(@class, "nav-item level1")]')            for cat1 in cats1:                url = cat1.xpath('a/@href').string()                cat1_name = cat1.xpath('a//text()').string(multiple=True)                if 'All ' not in cat1_name:                    subcats = cat1.xpath('.//div[contains(@class, "nav-item level2")]/a')                    if subcats:                        for subcat in subcats:                            url = subcat.xpath('@href').string()                            subcat_name = subcat.xpath('span//text()').string()                            if 'All ' not in subcat_name:                                session.queue(Request(url), process_prodlist, dict(cat=name + '|' + cat1_name + '|' + subcat_name))                    else:                        session.queue(Request(url), process_prodlist, dict(cat=name + '|' + cat1_name))def process_prodlist(data, context, session):    prods = data.xpath('//li[@class="item product product-item"]')    for prod in prods:        url = prod.xpath('.//a[@class="product-item-link"]/@href').string()        name = prod.xpath('.//a[@class="product-item-link"]//text()').string()        ssid = prod.xpath('.//div/@data-product-id').string()        rating = prod.xpath('.//div[@class="rating-result"]')        if rating:            session.queue(Request(url), process_product, dict(context, url=url, name=name, ssid=ssid))def process_product(data, context, session):    product = Product()    product.name = context['name']    product.category = context['cat']    product.manufacturer = 'Weber'    product.url = context['url']    product.ssid = context['ssid']    product.sku = data.xpath('//form/@data-product-sku').string()    ean = data.xpath('//span[contains(., "Barcode")]//text()').string(multiple=True)    if ean:        ean = ean.split('Barcode: ')[-1].split()[0]        product.add_property(type='id.ean', value=ean)    if product.sku:        revs_url = "https://api.reviews.co.uk/timeline/data?type=product_review&store=wowbbq&sort=date_desc&page=1&per_page=10&sku=" + product.sku + "&lang=en&enable_avatars=true&include_subrating_breakdown=1"        session.do(Request(revs_url, force_charset='utf-8'), process_reviews, dict(product=product))def process_reviews(data, context, session):    product = context['product']    revs_json = simplejson.loads(data.content)    revs = revs_json.get('timeline', [])    for rev in revs:        review = Review()        review.type = 'user'        review.url = product.url        review.ssid = rev['_id'].split('-')[-1]        review.title = rev.get('_source', {}).get('review_title')        date = rev.get('_source', {}).get('date_created')        if date:            review.date = date.split()[0]        author = rev.get('_source', {}).get('author')        if author.strip():            review.authors.append(Person(name=author, ssid=author))        grade_overall = rev.get('_source', {}).get('rating')        if grade_overall:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        is_verified = rev.get('_source', {}).get('order_id')        if is_verified:            review.add_property(type='is_verified_buyer', value=True)        hlp_yes = rev.get('_source', {}).get('helpful')        if hlp_yes:            review.add_property(type='helpful_votes', value=int(hlp_yes))        is_recommended = rev.get('_source', {}).get('would_recommend_product')        if is_recommended:            review.add_property(value=True, type='is_recommended')        excerpt = rev.get('_source', {}).get('comments')        if excerpt:            review.add_property(type='excerpt', value=excerpt)            product.reviews.append(review)    if product.reviews:        session.emit(product)    revs_cnt = context.get('revs_cnt', revs_json.get('stats', {}).get('review_count'))    offset = context.get('offset', 0) + 10    if revs_cnt and int(revs_cnt) > offset:        next_page = context.get('page', 1) + 1        next_url = "https://api.reviews.co.uk/timeline/data?type=product_review&store=wowbbq&sort=date_desc&page=" + str(next_page) + "&per_page=10&sku=" + product.sku + "&lang=en&enable_avatars=true&include_subrating_breakdown=1"        session.do(Request(next_url, force_charset='utf-8'), process_reviews, dict(product=product, revs_cnt=revs_cnt, offset=offset, page=next_page))