from agent import *from models.products import *import simplejsondef run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=6000)]    session.queue(Request("https://www.digitalkamera.de/Testbericht/0", use="curl"), process_category, dict())def process_category(data, context, session):    cats = data.xpath("//div[contains(@class, 'search-filter')][1]/div")    for cat in cats:        name = cat.xpath("label/text()").string()        url = "https://www.digitalkamera.de/Testbericht/0?Typ=" + cat.xpath("input/@value").string()        session.queue(Request(url, use="curl"), process_revlist, dict(cat=name))def process_revlist(data, context, session):    revs = data.xpath("//div[contains(@class, 'searchresult')]//h2/a")    for rev in revs:        name = rev.xpath("text()").string()        url = rev.xpath("@href").string()        session.queue(Request(url, use="curl"), process_review, dict(context, name=name, url=url))    next_url = data.xpath("//a[@class='jscroll']/@href").string()    if next_url:        session.queue(Request(next_url, use="curl"), process_revlist, dict(context))def process_review(data, context, session):    rev_urls = data.xpath("//div[@class='toc']/ol[not(descendant::li[strong])]/li")    for rev_url in rev_urls:        name = rev_url.xpath("a/text()").string()        url = rev_url.xpath("a/@href").string()        session.do(Request(url, use="curl"), process_review, dict(context, name=name, url=url))    product = Product()    product.name = context["name"].split("Testbericht: ")[-1]    product.ssid = context["url"].split('/')[-1].split('.')[0]    product.url = context["url"]    product.category = context["cat"]    brand = data.xpath("//script[contains(., \"dataLayer.push({'brand':\")]/text()").string()    if brand:        product.manufacturer = brand.split("dataLayer.push({'brand': '")[-1].split("'")[0]    review = Review()    review.type = "pro"    review.title = context["name"]    review.url = context["url"]    review.ssid = product.ssid    info = data.xpath("//script[contains(., 'dateModified')]/text()").string()    if info:        info = simplejson.loads(info)        review.date = info["dateModified"]        authors = info.get("author", {})        if type(authors) is list:            for author in authors:                name = author["name"]                review.authors.append(Person(name=name, ssid=name))        else:            author_name = authors.get("name")            if author_name:                review.authors.append(Person(name=author_name, ssid=author_name))    pros = data.xpath("//ul[@class='kurzbew-vorteil']/li/text()").strings()    for pro in pros:        if pro:            review.add_property(type="pros", value=pro)    cons = data.xpath("//ul[@class='kurzbew-nachteil']/li/text()").strings()    for con in cons:        if con:            review.add_property(type="cons", value=con)    summary = data.xpath("//div[@class='teaser']/p/text()[not(self::strong)]").string(multiple=True)    if summary:        review.add_property(type="summary", value=summary)    conclusion = data.xpath("//h3[contains(.,'Fazit')]/following-sibling::p//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//div[contains(@class, 'info-bereich')]//p[regexp:test(., '^fazit:?', 'i')]//text()").string(multiple=True)    excerpt = data.xpath("//div[contains(@class, 'info-bereich')]/p//text() | //div[contains(@class, 'info-bereich')]/text()").string(multiple=True)    if excerpt:        if conclusion:            excerpt = excerpt.split(conclusion.strip())[0]            conclusion = conclusion.split("Fazit:")[-1].strip()            review.add_property(type="conclusion", value=conclusion)        excerpt = excerpt.strip()        review.add_property(type="excerpt", value=excerpt)        product.reviews.append(review)        session.emit(product)