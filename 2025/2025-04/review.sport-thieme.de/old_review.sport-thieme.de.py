from agent import *from models.products import *def strip_namespace(data):    tmp = data.content_file + ".tmp"    out = file(tmp, "w")    for line in file(data.content_file):        line = line.replace('<ns0', '<')        line = line.replace('ns0:', '')        line = line.replace(' xmlns', ' abcde=')        out.write(line + "\n")    out.close()    os.rename(tmp, data.content_file)def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=5000)]    session.browser.use_new_parser = True    session.queue(Request('http://www.sport-thieme.de/'), process_frontpage, {})def process_frontpage(data, context, session):    strip_namespace(data)    cats = data.xpath('//div[contains(@class, "category allCategories")]//div[@class="category"]/a')    for cat in cats:        name = cat.xpath('.//span/text()').string()        url = cat.xpath('@href').string()        session.queue(Request(url), process_subcategory, dict(cat=name))def process_subcategory(data, context, session):    strip_namespace(data)    cats = data.xpath('//section[@data-name="Kategorien"]/nav/a')    if not cats:        process_prodlist(data, context, session)        return    for cat in cats:        name = cat.xpath('text()').string()        url = cat.xpath('@href').string()        session.queue(Request(url), process_subcategory, dict(cat=context['cat']+'|'+name))def process_prodlist(data, context, session):    strip_namespace(data)    prods = data.xpath('//section[contains(@class, "productListing")]/article[div[@class="stars"]]')    for prod in prods:        name = prod.xpath('h3//span/text()').string()        url = prod.xpath('h3/a/@href').string()        sku = prod.xpath('meta[@itemprop="sku"]/@content').string()        session.queue(Request(url), process_product, dict(context, name=name, url=url, sku=sku))    next_url = data.xpath('//a[img[@alt="Weiter"]]/@href').string()    if next_url:        session.queue(Request(next_url), process_prodlist, dict(context))def process_product(data, context, session):    strip_namespace(data)    product = Product()    product.name = context['name']    product.manufacturer = data.xpath('//span[@itemprop="brand"]/meta[@itemprop="name"]/@content').string()    product.url = context['url']    product.category = context['cat']    product.ssid = context['sku']    product.sku = product.ssid    ean = data.xpath('//meta[@itemprop="gtin14" or @itemprop="gtin13"]/@content').string()    if ean:        product.properties.append(ProductProperty(type='id.ean', value=ean))    revs = data.xpath('//div/article[@itemprop="review"]')    for rev in revs:        review = Review()        review.url = product.url        review.type = 'user'        review.date = rev.xpath('.//meta[@itemprop="datePublished"]/@content').string()        author = rev.xpath('.//strong[@itemprop="author"]/span/text()').string()        if author:            review.authors.append(Person(name=author, ssid=author))        is_verified = rev.xpath('.//div/p[contains(., "Gekauft am:")]')        if is_verified:            review.add_property(type='is_verified_buyer', value=True)        grade_overall = rev.xpath('.//meta[@itemprop="ratingValue"]/@content').string()        if grade_overall:            if float(grade_overall) > 5:                grade_overall = '5'            review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        grades = rev.xpath('.//ul[@class="ratingAttributes"]/li')        for grade in grades:            name = grade.xpath('text()').string(multiple=True).strip()            value = grade.xpath('div/@rel').string()            if float(value) > 5:                value = '5'            review.grades.append(Grade(name=name, value=float(value), best=5.0))        excerpt = rev.xpath('span[@itemprop="description"]/text()').string(multiple=True)        title = rev.xpath('span[@class="title"]/text()').string()        if excerpt and title:            review.title = title.replace('&#34;', '"')        elif title:            excerpt = title        if excerpt:            excerpt = excerpt.replace('&#34;', '"')            review.properties.append(ReviewProperty(type="excerpt", value=excerpt.strip()))            review.ssid = review.digest() if author else review.digest(excerpt)            product.reviews.append(review)    if product.reviews:        session.emit(product)