from agent import *from models.products import *XCAT = ['Home',  'Neuheiten', 'Sale', 'Marken']def strip_namespace(data):    tmp = data.content_file + ".tmp"    out = file(tmp, "w")    for line in file(data.content_file):        line = line.replace('<ns0', '<')        line = line.replace('ns0:', '')        line = line.replace(' xmlns', ' abcde=')        out.write(line + "\n")    out.close()    os.rename(tmp, data.content_file)def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=3000)]    session.browser.use_new_parser = True    session.queue(Request('https://www.reiterladen24.de/'), process_frontpage, dict())def process_frontpage(data, context, session):    strip_namespace(data)    cats = data.xpath('//div[@class="navigation--list-wrapper"]/ul/li/a')    for cat in cats:        name = cat.xpath('span/text()').string().replace('Zur Kategorie', '').strip()        url = cat.xpath('@href').string()        if name not in XCAT:            session.queue(Request(url), process_category, dict(cat=name))def process_category(data, context, session):    strip_namespace(data)    subcats = data.xpath('//div[contains(@class, "sidebar--categories")]/ul/li[contains(@class, "sub-categories")]/ul/li/a')    for subcat in subcats:        name = subcat.xpath('text()').string().strip()        url = subcat.xpath('@href').string().strip()        session.queue(Request(url+'?n=96'), process_prodlist, dict(cat=context['cat']+'|'+name))def process_prodlist(data, context, session):    strip_namespace(data)    prods = data.xpath('//div[contains(@class, "product--box")]')    for prod in prods:        name = prod.xpath('.//a[@class="product--title"]/@title').string()        url = prod.xpath('.//a[@class="product--title"]/@href').string()        sku = prod.xpath('@data-ordernumber').string()        is_reviewed = prod.xpath('.//span[@class="product--rating"]')        if is_reviewed:            session.queue(Request(url), process_product, dict(context, name=name, url=url, sku=sku))    next_url = data.xpath('//a[contains(@title, "NÃ¤chste")][contains(@class, "next")]/@href').string()    if next_url:        session.queue(Request(next_url+'&n=96'), process_prodlist, dict(context))def process_product(data, context, session):    strip_namespace(data)    product = Product()    product.name = context['name']    product.url = context['url']    product.category = context['cat']    product.manufacturer = data.xpath('//div[@itemprop="brand"]/meta/@content').string()    product.ssid = data.xpath('//meta[@itemprop="productID"]/@content').string()    product.sku = context.get('sku')    ean = data.xpath('//meta[contains(@itemprop, "gtin")]/@content').string()    if ean:        product.properties.append(ProductProperty(type='id.ean', value=ean))    mpn = data.xpath('//li[contains(., "Hersteller-Nr")]/span/text()').string()    if mpn:        product.properties.append(ProductProperty(type='id.manufacturer', value=mpn))    revs = data.xpath('//div[@itemprop="review"]')    for rev in revs:        review = Review()        review.type = 'user'        review.url = product.url        review.date = rev.xpath('.//meta[@itemprop="datePublished"]/@content').string()        author = rev.xpath('.//span[@itemprop="author"]/span/text()').string()        if author:            review.authors.append(Person(name=author, ssid=author))        grade_overall = rev.xpath('.//meta[@itemprop="ratingValue"]/@content').string()        if grade_overall:            review.grades.append(Grade(type="overall", value=float(grade_overall), best=5.0))        excerpt = rev.xpath('.//p[@itemprop="reviewBody"]/text()').string(multiple=True)        title = rev.xpath('.//h4[@class="content--title"]/text()').string()        if excerpt:            review.title = title        elif title:            excerpt = title        if excerpt:            review.properties.append(ReviewProperty(type="excerpt", value=excerpt))            review.ssid = review.digest() if author else review.digest(excerpt)            product.reviews.append(review)    if product.reviews:        session.emit(product)