from agent import *from models.products import *import simplejsondef strip_namespace(data):    tmp = data.content_file + ".tmp"    out = file(tmp, "w")    for line in file(data.content_file):        line = line.replace('<ns0', '<')        line = line.replace('ns0:', '')        line = line.replace(' xmlns', ' abcde=')        out.write(line + "\n")    out.close()    os.rename(tmp, data.content_file)def run(context, session):    session.browser.use_new_parser = True    session.sessionbreakers = [SessionBreak(max_requests=10000)]    session.queue(Request('https://www.lookfantastic.com/'), process_catlist, dict())def process_catlist(data, context, session):    strip_namespace(data)    cats = data.xpath('(//ul[@aria-label=" Discover"])[position() > 2]/li[2]')    for cat in cats:        url = cat.xpath('.//a/@href').string() + "?pageNumber=1&sortOrder=reviewCount_auto_int"        session.queue(Request(url), process_prodlist, dict(url=url, page=1))def process_prodlist(data, context, session):    strip_namespace(data)    prods = data.xpath('//li[@class="productListProducts_product "]/div[@class="productBlock"]')    for prod in prods:        cat = prod.xpath('@data-product-category').string().split(' / ')        cat = cat[0] + '|' + cat[1]        url = prod.xpath('.//a[@class="productBlock_link"]/@href').string()        brand = prod.xpath('@data-product-brand').string()        revs_count = prod.xpath('.//span[@class="productBlock_reviewCount"]//text()').string()        if revs_count and int(revs_count) > 0:            session.queue(Request(url, max_age=0), process_reviews, dict(cat=cat, brand=brand, url=url, revs_count=revs_count))    last_page = data.xpath('//li/button[contains(@title, "Next page")]/@disabled').string()    if not last_page:        page = context['page'] + 1        next_url = context['url'].split('?')[0] + '?pageNumber={page}&sortOrder=reviewCount_auto_int'.format(page=page)        session.queue(Request(next_url), process_prodlist, dict(url=next_url, page=page))def process_reviews(data, context, session):    strip_namespace(data)    product = context.get('product')    if not product:        prod_content = data.xpath('//script[@id="productSchema"]//text()').string()        if not prod_content:            return        prod_json = simplejson.loads(prod_content)        product = Product()        product.name = prod_json['name']        product.ssid = prod_json['@id']        product.sku = prod_json['sku']        product.category = context['cat']        product.url = context['url']        product.manufacturer = prod_json.get('brand', {}).get('name')        if not product.manufacturer:            product.manufacturer = context['brand']        mpn = prod_json.get('mpn')        if mpn:            product.add_property(type='id.manufacturer', value=mpn)    revs = data.xpath('//div[@class="athenaProductReviews_topReviewSingle"]')    if not revs:        revs = data.xpath('//div[@class="athenaProductReviews_review"]')    for rev in revs:        review = Review()        review.type = 'user'        review.ssid = rev.xpath('.//a[@class="athenaProductReviews_report"]/@href').string().split('reviewId=')[-1]        review.url = product.url        review.date = rev.xpath('.//span[@data-js-element="createdDate"]//text()').string()        title = rev.xpath('.//h3[contains(@class, "eviewTitle")]//text()').string()        if title:            title = title.replace("’", " apostrophe ").encode("ascii", errors="ignore").replace(" apostrophe ", "’")            if title.isspace() is not True and title != "":                review.title = title        author = rev.xpath('(.//div[@class="athenaProductReviews_footerDateAndName"]//span[not(@data-js-element)])[position() = last()]//text()').string()        if author:            author = author.replace("’", " apostrophe ").encode("ascii", errors="ignore").replace(" apostrophe ", "’")            if author.isspace() is not True and author != "":                review.authors.append(Person(name=author, ssid=author))        is_verified = rev.xpath('.//div[@class="athenaProductReviews_footerVerified"]//text()').string()        if is_verified == "Verified Purchase":            review.add_property(type='is_verified_buyer', value=True)        hlp_yes = rev.xpath('.//a[@class="athenaProductReviews_voteYes"]//text()').string(multiple=True).split('es (')[-1].rstrip(')')        if hlp_yes:            review.add_property(type='helpful_votes', value=int(hlp_yes))        hlp_no = rev.xpath('.//a[@class="athenaProductReviews_voteNo"]//text()').string(multiple=True).split('o (')[-1].rstrip(')')        if hlp_no:            review.add_property(type='not_helpful_votes', value=int(hlp_no))        grade_overall = rev.xpath('.//div[contains(@class, "RatingStarsContainer")]/@aria-label').string()        if grade_overall:            grade_overall = float(grade_overall.split(' Star')[0])            review.grades.append(Grade(type='overall', value=grade_overall, best=5.0))        excerpt = rev.xpath('p[@class="athenaProductReviews_topReviewsExcerpt"]//text()').string(multiple=True)        if not excerpt:            excerpt = rev.xpath('p[@class="athenaProductReviews_reviewContent"]//text()').string(multiple=True)        if excerpt:            excerpt = excerpt.replace("’", " apostrophe ").encode("ascii", errors="ignore").replace(" apostrophe ", "’")            if excerpt.isspace() is not True and excerpt != "":                review.add_property(type='excerpt', value=excerpt)                product.reviews.append(review)    if data.response_url.split('.')[-1] != 'html':        next_url = data.xpath('//a[@rel="next"]/@href').string()        if next_url:            session.do(Request(next_url, max_age=0), process_reviews, dict(context, product=product))        else:            session.emit(product)    elif int(context['revs_count']) < 11:            session.emit(product)    else:        revs_url = product.url.replace('html', 'reviews?pageNumber=2')        session.do(Request(revs_url, max_age=0), process_reviews, dict(context, product=product))