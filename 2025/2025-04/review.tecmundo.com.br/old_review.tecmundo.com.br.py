from agent import *from models.products import *def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=5000)]    session.queue(Request('https://www.tecmundo.com.br/review/'), process_revlist, dict())def process_revlist(data, context, session):    revs = data.xpath("//div[@class='tec--list__item']")    for rev in revs:        name = rev.xpath(".//a[@class='tec--card__title__link']//text()").string()        url = rev.xpath(".//a[@class='tec--card__title__link']//@href").string()        if url and name:            session.queue(Request(url), process_review, dict(context, url=url, name=name))    next_url = data.xpath("//link[@rel='next']//@href").string()    if next_url:        session.queue(Request(next_url), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.ssid = context['url'].split('/analise')[0].split("/")[-1].split(".html")[0].split(".htm")[0]    product.url = context['url']    product.category = data.xpath("//div[@id='js-categories']/a[1]//text()").string() or 'Reviews'    prod_info = data.xpath('//div[@class="tec--game__info"]').first()    if prod_info:        product.name = prod_info.xpath('.//h1/text()').string()    else:        product.name = context['name'].split('- Análise')[0].split(" Review -")[-1].split(" Review")[0].split(" review")[0].split("Review:")[-1].split(":")[0]    review = Review()    review.type = 'pro'    review.title = context['name']    review.url = context['url']    review.ssid = product.ssid    date = data.xpath('//time[@id="js-article-date"]/@datetime').string()    if date:        review.date = date.split('T')[0]    author = data.xpath("//div[@class='tec--author__info z--min-w-none z--flex z--flex-col']/p").first()    author_name = ''    author_url = ''    if author:        author_name = author.xpath('text()').string()        author_url = author.xpath('@href').string()        if not author_name and not author_url:            author_name = author.xpath('a/text()').string()            author_url = author.xpath('a/@href').string()    if not author:        author = data.xpath('//div[@class="tec--timestamp__item z--font-bold"]/a').first()        if author:            author_name = author.xpath('text()').string()            author_url = author.xpath('@href').string()    if not author:        author = data.xpath('//div[@class="tec--author"]//p/text()').string()        if author:            author_name = author    if author_name:        if author_url:            author_ssid = author_url.split("/")[-1]            review.authors.append(Person(name=author_name, ssid=author_ssid, profile_url=author_url))        else:            review.authors.append(Person(name=author_name, ssid=author_name))    pros = data.xpath("//div[@class='tec--pros-cons__col tec--pros-cons__col--pros']//li[@class='tec--pros-cons__item']")    for pro in pros:        if pro:            pro = pro.xpath(".//text()").string(multiple=True)            review.add_property(type='pros', value=pro)    cons = data.xpath("//div[@class='tec--pros-cons__col tec--pros-cons__col--cons']//li[@class='tec--pros-cons__item']//text()")    for con in cons:        if con:            con = con.xpath(".//text()").string(multiple=True)            review.add_property(type='cons', value=con)    grade_overall = data.xpath("//h3[.//text()[contains(.,'Nota')]]//text()").string(multiple=True)    if not grade_overall:        grade_overall = data.xpath("//div[@class='tec--game-rating__value']//text()").string()    if not grade_overall:        grade_overall = data.xpath("//h2[.//text()[contains(.,'Nota')]]//text()").string(multiple=True)    if grade_overall:        grade_overall = grade_overall.split("Nota")[-1].split(":")[-1]        if ',' in grade_overall:            grade_overall = grade_overall.replace(',', '')        if float(grade_overall) <= 10.0:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=10.0))        else:            review.grades.append(Grade(type='overall', value=float(grade_overall), best=100.0))    summary = data.xpath('//div[contains(@class, "tec--article__body")]/p[@dir="ltr"][1]//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))    conclusion = data.xpath("//h2[contains(., 'Vale a pena?')]/following-sibling::p//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//h2[contains(., 'VALE A PENA?')]/following-sibling::p[1]//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//h2[contains(., 'Veredito')]/following-sibling::p[1]//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//h2[contains(., 'Conclusão')]/following-sibling::p[1]//text()").string(multiple=True)    if conclusion:        conclusion = conclusion.split('---')[0]        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    excerpt = data.xpath('//div[contains(@class, "tec--article__body")]/p[not(span/@data-fonte)][not(.//@data-src)][not(.//img)]//text() | /descendant::ul/li[@dir="ltr"]//text()').string(multiple=True)    if not excerpt:        excerpt = data.xpath('//div[contains(@class, "tec--article__body")]//p[not(contains(@class, "font-semibold"))]//text()').string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@align='justify']//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath('//div[@class="tec--article__body"]//div[not(.//img)]//text()').string(multiple=True)    if not excerpt:        excerpt = data.xpath('//div[@class="tec--article__body"]//text()').string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@style='text-align:justify']//text()").string(multiple=True)    if excerpt:        if summary:            excerpt = excerpt.replace(summary, '')        if conclusion:            excerpt = excerpt.replace(conclusion, '')        if author_name and author_url:            excerpt = excerpt.replace(author_name, '').replace(author_url, '')        excerpt = excerpt.split('---')[0]        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))        product.reviews.append(review)        session.emit(product)