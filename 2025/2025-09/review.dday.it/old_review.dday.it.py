from agent import *from models.products import *import simplejsondef run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=3000)]    session.queue(Request('https://www.dday.it/prove'), process_productlist, dict())def process_productlist(data, context, session):    for prod in data.xpath("//article[@class='preview']/following-sibling::section"):        context['name'] = prod.xpath("following-sibling::h2[1]/text()").string()        context['url'] = prod.xpath("following-sibling::a[1]/@href").string()        context['author'] = prod.xpath("following-sibling::span[1]//a/text()").string()        context['author_url'] = prod.xpath("following-sibling::span[1]//a/@href").string()        context['date'] = prod.xpath("following-sibling::span[2]/text()").string()        context['cat'] = prod.xpath("following-sibling::span[3]/a/text()").string()        session.queue(Request(context['url']), process_product, dict(context))    next_page = data.xpath("//a[@rel='next']/@href").string()    if next_page:        session.queue(Request(next_page), process_productlist, dict())def process_product(data, context, session):    product = Product()    product.url = context['url']    product.ssid = context['url'].split('/')[-2]    product.category = context['cat']    brand = data.xpath("//span[@class='brand']/text()").string()    if brand:        product.manufacturer = brand        product.name = data.xpath("//h3[@class='aside-text']//text()").string()    else:        product.name = data.xpath("//section[@class='product-summary']/following-sibling::div[1]/h3/text()").string() or context['name']    review = Review()    review.title = context['name']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    review.date = context['date'].split(' ')[0]    review.authors.append(Person(name=context['author'], ssid=context['author'], profile_url=context['author_url']))    summary = data.xpath("//h2[1]/text()").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))    conclusion = data.xpath("//section[@class='product-summary']/following-sibling::div[2]/p//text()").string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    excerpt = data.xpath("//section[@class='article-body']/following-sibling::p//text()").string(multiple=True)    if excerpt:        if '©' in excerpt:            excerpt = excerpt.split('©')[0]        if conclusion:            excerpt = excerpt.replace(conclusion, '')        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    grade_overall = data.xpath("//li[@class='total swiper-slide']/div/text()").string()    if grade_overall:        review.grades.append(Grade(type='overall', value=float(grade_overall), best=10.0))    grades = data.xpath("//li[@class='swiper-slide']")    for grade in grades:        name = grade.xpath("label/text()").string()        value = float(grade.xpath("div/text()").string())        review.grades.append(Grade(name=name, value=value, best=10.0))    pros = data.xpath("//section[@class='rating']/following-sibling::div[1]/p//text()")    for pro in pros:        review.add_property(name="Cosa ci piace", type="pros", value=pro.string())    cons = data.xpath("//section[@class='rating']/following-sibling::div[2]/p//text()")    for con in cons:        review.add_property(name="Cosa non ci piace", type="cons", value=con.string())    widget = data.xpath("//widget/@data_id").string()    if widget:        widget_url = 'https://www.dday.it/widgets/product/' + str(widget)        session.do(Request(widget_url), process_review, dict(context, product=product, review=review))    if excerpt or summary:        product.reviews.append(review)    if product.reviews:        session.emit(product)def process_review(data, context, session):    product = context['product']    review = context['review']    resp = simplejson.loads(data.content)    revs_html = data.parse_fragment(resp['html'])    product.name = revs_html.xpath("//h3/text()").string()    conclusion = revs_html.xpath("//article/following-sibling::p//text()").string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    grade_overall = revs_html.xpath("//li[@class='total swiper-slide']/div/text()").string()    if grade_overall:        review.grades.append(Grade(type='overall', value=float(grade_overall), best=10.0))    grades = revs_html.xpath("//li[@class='swiper-slide']")    for grade in grades:        name = grade.xpath("label/text()").string()        value = float(grade.xpath("div/text()").string())        review.grades.append(Grade(name=name, value=value, best=10.0))    pros = revs_html.xpath("//section[@class='rating']/following-sibling::div[1]/p//text()")    for pro in pros:        review.add_property(name="Cosa ci piace", type="pros", value=pro.string())    cons = revs_html.xpath("//section[@class='rating']/following-sibling::div[2]/p//text()")    for con in cons:        review.add_property(name="Cosa non ci piace", type="cons", value=con.string())