from agent import *from models.products import *def run(context, session):    session.queue(Request('https://mobilarena.hu/tesztek/index.html'), process_revlist, {})def process_revlist(data, context, session):    for rev in data.xpath("//ul//div[@class='media-body']/h4/a"):        name = rev.xpath("text()").string()        url = rev.xpath("@href").string()        if url and name:            session.queue(Request(url), process_review, dict(name=name, rev_url=url))    nexturl = data.xpath("//a[@rel='next']/@href").string()    if nexturl:        session.queue(Request(nexturl), process_revlist, context)def process_review(data, context, session):    product = Product()    product.name = context['name'].split(' - ')[0]    product.category = data.xpath("(//div[@id='top']//ol//text())[last()]").string()    product.url = context['rev_url']    product.ssid = product.url.split('/')[-2]    review = Review()    review.title = context['name']    review.type = 'pro'    review.url = product.url    review.ssid = product.ssid    author = data.xpath("//a[@itemprop='author']").first()    if author:        name = author.xpath("./span/text()").string(multiple=True)        url = author.xpath("@href").string(multiple=True)        if name and url:            review.authors.append(Person(name=name, ssid=name, profile_url=url))     date = data.xpath("//li[@class='list-inline-item' and .//time]/text()").string(multiple=True)    if date:        review.date = date.split(' ')[0]    summary = data.xpath("//p[@itemprop='description about']/text()").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))    else:        excerpt = data.xpath("//div[@class='content-body']//p//text()").string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    next_page = data.xpath("//a[@rel='next']/@href").string()    if next_page:        session.do(Request(next_page), process_review_page, {'review': review, 'url': next_page, 'conclusion': ''})    product.reviews.append(review)    session.emit(product)def process_review_page(data, context, session):    review = context['review']    title = data.xpath("//div[@class='content-body']/h2/text()").first().string()    review.properties.append(ReviewProperty(type='pages', value={'url': context['url'], 'title': title}))        table_rev = data.xpath("//table[@class='tabla trating']//tr[@class='subhead subhead-pro']/following-sibling::tr//text()")    if table_rev:        flag = False        for elem in table_rev:            if elem.string() == 'Kontra':                flag = True                continue            if flag:                review.add_property(type='cons', value=elem.string())            else:                review.add_property(type='pros', value=elem.string())    grade_table = data.xpath("//table[@class='tabla trating']//tr[@class='subhead']/following-sibling::tr")    if grade_table:        for elem in grade_table:            grade_name = elem.xpath("th/text()").string()            grade = elem.xpath("td/text()").string()            if grade_name and grade and grade_name.find('Indul칩치r')==-1:                try:                    review.grades.append(Grade(name=grade_name, value=float(grade.split(' ')[0].replace(',', '.')), best=10.0))                except:                    pass        if data.xpath("//div[@class='content-body' and ./h2[contains(., 'Specifik치ci칩')]]"):        if context['conclusion']:            review.properties.append(ReviewProperty(type='conclusion', value=context['conclusion']))    else:        next_page = data.xpath("//a[@rel='next']/@href").string()        if next_page:            conclusion = data.xpath("//div[@class='content-body']//p//text()").string(multiple=True)            session.do(Request(next_page), process_review_page, {'review':review, 'url': next_page, 'conclusion': conclusion})