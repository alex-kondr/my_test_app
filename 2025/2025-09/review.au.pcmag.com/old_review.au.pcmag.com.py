from agent import *from models.products import *def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=10000)]    session.queue(Request("https://au.pcmag.com/reviews", use="curl", force_charset="utf-8"), process_frontpage, dict())def process_frontpage(data, context, session):    for rev in data.xpath("//ul[@class='blogroll']//li"):        name = rev.xpath("div[@class='articlecontainer']//a/text()").string()        url = rev.xpath("div[@class='articlecontainer']//a/@href").string()        if url:            session.queue(Request(url), process_reviews, dict(context, name=name, url=url))    next_url = data.xpath("//section[contains(@class,'broll')]/@data-pagenum").string()    total_pag = data.xpath("//section[contains(@class,'broll')]/@data-total").string()    if int(next_url) < int(total_pag):        url = "https://au.pcmag.com/reviews?page="+ str(int(next_url)+1)        session.queue(Request(url), process_frontpage, dict())def process_reviews(data, context, session):    product = Product()    product.name = context['name'].split("Review")[0].replace("'", "’")    product.url = context['url']    product.ssid = context['url'].split('/')[-2]    category = data.xpath("//div[@class='breadcrumbs']//a[last()]//text()").string().strip().replace("'", "’")    if category == "Reviews" or category == "reviews" or category == "First Looks" or category == "Editors’ Choice":        category = "Teсh"    product.category = category.replace("'", "’")    review = Review()    review.title = context['name'].replace("'", "’")    review.url = context['url']    review.ssid = product.ssid    review.type = 'pro'    date = data.xpath("//div[@class='article-info']//time/@datetime").string()    if date:        review.date = date.split("T")[0]    author_name = data.xpath("//span[contains(@class,'hcard')]//a//text()").string()    if not author_name:        author_name = data.xpath("//span[contains(@class,'hcard')]//text()").string()    author_name = author_name.replace("'", "’")    author_url = data.xpath("//span[contains(@class,'hcard')]//a/@href").string()    if author_url:        review.authors.append(Person(name=author_name, ssid=author_name, profile_url=author_url))    else:        review.authors.append(Person(name=author_name, ssid=author_name))    pros = data.xpath("//li[@class='pros']//ul[@class='pros-cons-list']//li")    for pro in pros:        pro = pro.xpath("text()").string().replace("'", "’")        review.add_property(type='pros', value=pro)    cons = data.xpath("//li[@class='cons']//ul[@class='pros-cons-list']//li")    for con in cons:        con = con.xpath("text()").string().replace("'", "’")        review.add_property(type='cons', value=con)    grade_overall = data.xpath("//div[@class='review_bottomline']//div[contains(@class,'editor_rating')]//b//text()").string()    if grade_overall:        grade_overall = grade_overall.split(" ")[0]        if float(grade_overall) >= 10:            grade_overall = float(grade_overall)/10        review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))    summary = data.xpath("//h2[@id='id_deck']//text()").string(multiple=True)    if summary:        summary = summary.replace("'", "’")        review.add_property(type='summary', value=summary)    conclusion = data.xpath("//div[@class='summarygrey']//div[contains(@id,'__bottomline')]//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//h2[contains(.,'Conclusion') or contains(.,'conclusions') or contains(.,'verdict') or contains(.,'Verdict')]/following-sibling::p//text()").string(multiple=True)    if conclusion:        conclusion = conclusion.replace("'", "’")        review.add_property(type='conclusion', value=conclusion)    excerpt = data.xpath("//div[@id='id_text']//p//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@id='id_text']//text()").string(multiple=True)    if excerpt:        if summary:            excerpt = excerpt.replace(summary.strip(), '')        if conclusion:            excerpt = excerpt.replace(conclusion.strip(), '')        excerpt = excerpt.replace("'", "’")        if excerpt == "":            return        review.add_property(type='excerpt', value=excerpt)        product.reviews.append(review)        session.emit(product)