from agent import *from models.products import *def run(context, session):    url = "http://www.lemondenumerique.com/tests/"    session.queue(Request(url), process_revlist, dict(url=url))def process_revlist(data, context, session):    page = context.get("page", 1)    last_page = context.get("last_page", None)    if page == 1:        last_page = int(data.xpath("//a[@class='last']/@href").string().split('/')[-2])    try:        revs = data.xpath("//div[@class='search-product']//h4//a")        for rev in revs:            url = rev.xpath("@href").string()            name = rev.xpath("text()").string(multiple=True)            session.queue(Request(url, use="curl"), process_review, dict(url=url, name=name))    except:        print("Can't load page " + str(page))    finally:        next_url = context["url"] + "page/" + str(page + 1)        if page < last_page:            session.queue(Request(next_url, use="curl"), process_revlist, dict(context, page=page+1, last_page=last_page))def process_review(data, context, session):    product = Product()    product.url = context["url"]    product.ssid = product.url.split('/')[-2]    product.category = data.xpath("//span[@class='byline']/following-sibling::a/text()").string()    product.name = data.xpath("//div[@id='ts-prices']/h2//text()").string()    if not product.name:        product.name = context["name"]    review = Review()    review.type = "pro"    review.title = context["name"]    review.ssid = product.ssid    review.date = data.xpath("//span[@class='posted-on']/time/@datetime").string().split('T')[0]    review.url = product.url    author = data.xpath("//span[@class='author vcard']").first()    if author:        name = author.xpath(".//text()").string()        url = author.xpath("a/@href").string()        ssid = url.split('/')[-2]        review.authors.append(Person(name=name, ssid=ssid, profile_url=url))    content = data.xpath("//div[@class='article-content']").first()    summary = content.xpath("p[1]//text()").string(multiple=True)    if summary:        review.add_property(type="summary", value=summary)    excerpt = content.xpath("p[position() > 1]//span/text()").string(multiple=True)    if excerpt:        if summary:            excerpt = excerpt.replace(summary, '')        excerpt = excerpt.strip()        review.add_property(type="excerpt", value=excerpt)    conclusion = content.xpath("div[@class='content_test']/div[@class='avis_test']/span//text()").string(multiple=True)    if conclusion:        review.add_property(type="conclusion", value=conclusion)    grade_info = content.xpath("span[descendant::script]//script/text()").string()    if grade_info:        class_data = content.xpath(".//p[contains(@class, 'globalnotestars')]/@class").string().split()[-1]        overall = grade_info.split("jQuery('." + class_data + "').raty({")[-1].split("score:", 1)[-1].split("});", 1)[0].strip()        overall = float(overall)        review.grades.append(Grade(type="overall", value=overall, best=5.0))        grades = content.xpath(".//div[@class='note']/h5")        for grade in grades:            name = grade.xpath(".//text()").string()            class_data = grade.xpath("following-sibling::p[1]/@class").string().split()[-1]            grade = grade_info.split("jQuery('." + class_data + "').raty({")[-1].split("score:", 1)[-1].split("});", 1)[0].strip()            grade = float(grade)            review.grades.append(Grade(name=name, value=grade, best=5.0))    pros = content.xpath(".//span[i[contains(@class, 'fa-check')]]")    for pro in pros:        pro = pro.xpath("text()").string()        review.add_property(type="pros", value=pro)    cons = data.xpath(".//span[i[contains(@class, 'fa-close')]]")    for con in cons:        con = con.xpath("text()").string()        review.add_property(type="cons", value=con)    if summary or excerpt or conclusion:        product.reviews.append(review)        session.emit(product)