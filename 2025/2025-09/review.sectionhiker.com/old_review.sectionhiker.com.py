import stringfrom agent import *from models.products import *import refrom Ft.Xml import ReaderExceptiondebug = Truedef run(context, session):     session.browser.use_new_parser = True    session.queue(Request('https://sectionhiker.com/category/gear-reviews-2/', use='curl'), process_frontpage, {})def process_frontpage(data, context, session):    for p in data.xpath("//div[@class[regexp:test(., 'post-listing')]]/article//h2/a[regexp:test(., 'Review')]"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url'], use='curl'), process_product, context)    next = data.xpath("//link[@rel='next']/@href").string()    if next:        session.queue(Request(next, use='curl'), process_frontpage, {})def process_product(data, context, session):    product = Product()    product.name = context['name'].replace('Review', '').strip()    product.url = context['url']    category = data.xpath("//p[@class='post-meta']/span[@class='post-cats']/a/text()[regexp:test(., '.+Reviews')]").string()    if category:        category = category.replace('Reviews', '').strip()    if not category:        category = "Backpacking Gear"    product.category = Category(name = category)    product.ssid = re_search_once('\/([^\/]+)\/*$', product.url)    review = Review()    review.title = context['name']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    date = data.xpath("//meta[@property='article:published_time']/@content").string()    if date:        review.date = re_search_once('(\d+\-\d+\-\d+)T', date)    user_data = data.xpath("//p[@class='post-meta']/span[@class='post-meta-author']/a").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/author\/([^\/]+)', user.profile_url)        review.authors.append(user)    excerpt = data.xpath("//div[@class='entry']/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    conclusion = data.xpath("//div[@class='entry']/h2[regexp:test(., 'Recommendation')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='conclusion'), value=conclusion, name = "Conclusion"))    summary = data.xpath("//div[@class='review-short-summary']/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary))    for pros in data.xpath("//ul[preceding-sibling::*[1][self::h3 or self::p][regexp:test(., 'Likes')]]/li"):        p_value = pros.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if p_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "Likes"))    for cons in data.xpath("//ul[preceding-sibling::*[1][self::h3 or self::p][regexp:test(., 'Dislikes')]]/li"):        c_value = cons.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if c_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "Dislikes"))    for g in data.xpath("//div[@id='review-box']/div[@class='review-item']"):        g_name = g.xpath("h5/text()[string-length(normalize-space(.))>0]").string()        g_value = g.xpath("span/span/@style").string()        if g_name and g_value:            value = re_search_once('width\:(\d+)', g_value)            if value:                g_value = str(float(value)/20)                review.grades.append(Grade(name = g_name, value = g_value, worst = 0, best = 5))    tgrade = data.xpath("//div[@class='review-final-score']/span/span/@style").string()    if tgrade:        grade = re_search_once('width\:(\d+)', tgrade)        if grade:            grade = str(float(grade)/20)            if grade:                review.grades.append(Grade(name="Overall", value = grade, worst = 0, best = 5, type = 'overall'))    product.reviews.append(review)    session.emit(product)