from agent import *from models.products import *import redef run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=6000)]    session.queue(Request('https://gamepod.hu/tesztek/index.html'), process_revlist, dict())def process_revlist(data, context, session):    for rev in data.xpath("//li[contains(@class, 'media')]"):        category = rev.xpath(".//p[@class='content-info']//span[@class='badge']//text()").string()        name = rev.xpath(".//h4[@class='media-heading']//a//text()").string()        url = rev.xpath(".//a/@href").string()        if url and name and category != 'Mobilarena':            session.queue(Request(url), process_review, dict(name=name, url=url))    next_url = data.xpath("//li[@class='nav-arrow']/a[@rel='next']/@href").string()    if next_url:        session.queue(Request(next_url), process_revlist, dict())def process_review(data, context, session):    product = Product()    product.name = context['name'].split('teszt')[0].split('beszámoló')[0].split('bemutató')[0]    product.url = context['url']    product.ssid = product.url.split('/')[-2]    product.category = 'Videogames'    review = Review()    review.type = 'pro'    review.title = context['name']    review.url = context['url']    review.ssid = product.ssid    review.date = data.xpath("//meta[@property='article:published_time']/@content").string().split('T')[0]    author = data.xpath("//li[contains(@class, 'mr-md-auto')]//a").first()    if author:        url = author.xpath("@href").string()        name = author.xpath("span/text()").string(multiple=True)        if url and name:            review.authors.append(Person(name=name, ssid=name, profile_url=url))    summary = data.xpath("//p[@itemprop='description about']//text()").first()    if summary:        review.add_property(type='summary', value=summary.string())    next_url = data.xpath("(//div[@class='dropdown d-flex flex-wrap justify-content-between']/div[@class='dropdown-menu']/a/@href)[last()]").string()    if next_url:        pages = data.xpath("//div[@class='dropdown d-flex flex-wrap justify-content-between']/div[@class='dropdown-menu']/a")        for page in pages:            title = ' '.join(page.xpath(".//text()").string().split('.')[1:]).strip()            url = page.xpath("@href").string()            review.add_property(type='pages', value=dict(url=url, title=title))        session.do(Request(next_url), process_lastpage, dict(context, product=product, review=review, summary=summary))        return    excerpt = data.xpath("//p[contains(.//text(), 'Összegzés:')]//preceding-sibling::p//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//p[contains(text(), 'Pro') or contains(text(), 'legjobb')]//preceding-sibling::p//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[@class='content-body']//text()").string(multiple=True)    if excerpt:        review.add_property(type='excerpt', value=excerpt)    conclusion = data.xpath("//p[contains(.//text(), 'Összegzés:')]//following-sibling::p[1]//text()").string(multiple=True)    if conclusion:        review.add_property(type='conclusion', value=conclusion)    if summary or excerpt or conclusion:        process_lastpage(data, dict(context, product=product, review=review, excerpt=excerpt), session)def process_lastpage(data, context, session):    product = context['product']    review = context['review']    conclusion = context.get('conclusion')    if not any((conclusion, context.get('excerpt'))):        conclusion = data.xpath("//p[contains(.//text(), 'Összefoglalás')]//following-sibling::p[1]//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//div[@class='content-body']//p//text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//div[@class='content-body']//div//text()").string(multiple=True)    grade = data.xpath("//div[@class='content-body']//p//text()")    if len(grade) > 1:        grade = grade[-2].string()        if grade != '' and re.search('^[0-9]*$', grade):            review.grades.append(Grade(type='overall', value=float(grade), best=100.0))            if conclusion:                conclusion = conclusion.replace(grade, '')    pros = data.xpath("//p[contains(text(), 'Pro') or contains(text(), 'legjobb')]//following-sibling::ul[1]//li//text()")    if not pros:        pros = data.xpath("//p//b[contains(text(), 'Pro') or contains(text(), 'legjobb')]//parent::p//following-sibling::ul[1]//li//text()")    for pro in pros:        pro = pro.string()        if pro:            review.add_property(type='pros', value=pro)            if conclusion:                conclusion = conclusion.replace(pro, '')    cons = data.xpath("//p[contains(text(), 'Kontra') or contains(text(), 'leggyengébb')]//following-sibling::ul[1]//li//text()")    if not cons:        cons = data.xpath("//p//b[contains(text(), 'Kontra') or contains(text(), 'leggyengébb')]//parent::p//following-sibling::ul[1]//li//text()")    if not cons:        cons = data.xpath("//p[contains(text(), 'Pro') or contains(text(), 'legjobb')]//parent::p//following-sibling::ul[1]//following-sibling::ul[1]//li//text()")    if not cons:        cons = data.xpath("//p//b[contains(text(), 'Pro') or contains(text(), 'legjobb')]//parent::p//following-sibling::ul[1]//following-sibling::ul[1]//li//text()")    for con in cons:        con = con.string()        if con:            review.add_property(type='cons', value=con)            if conclusion:                conclusion = conclusion.replace(con, '')    if conclusion:        conclusion = conclusion.replace('Pro:', '').replace('Kontra:', '')        if context.get('excerpt'):            conclusion = conclusion.replace(context['excerpt'], '')        conclusion = conclusion.strip()        if conclusion:            review.add_property(type='conclusion', value=conclusion)    product.reviews.append(review)    session.emit(product)