#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import HTMLParserh = HTMLParser.HTMLParser()def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.pcgamer.com/reviews/'), process_productlist, dict(category='Games|PC'))    session.queue(Request('https://www.pcgamer.com/hardware/reviews/'), process_productlist, dict(category='Hardware'))    session.queue(Request('https://www.pcgamer.com/reviews/archive/'), process_archive, dict(category='Games|PC'))def process_archive(data, context, session):    for link in data.xpath('//ul[contains(@class,"basic-list")]//li//a[contains(@href,"archive")]'):        url=link.xpath('@href').string()        if url:            session.queue(Request(url), process_archiveproductlist, dict(context))def process_archiveproductlist(data, context, session):    for link in data.xpath('//li[@class="day-article"]//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name:#and not session.seen(url):            bad_list2 = ['review','','','','']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url), process_product, dict(context,url=url,name=name))def process_productlist(data, context, session):    for p in data.xpath("//div[@class='listingResults']/div[@class[regexp:test(., 'listingResult')]]"):        context['name'] = p.xpath(".//h3//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("span/a/@href[regexp:test(., '[^p]review')]").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, dict(context))    next = data.xpath("//div[@class[regexp:test(., 'pagination')]]//a[regexp:test(., 'Next')]/@href").string()    if next:        session.queue(Request(next), process_productlist, dict(context))def process_product(data, context, session):    product = Product()    product.name = data.xpath('//div[@itemprop="itemReviewed"]//text()[string-length(normalize-space(.))>0]').string()    if not product.name:        product.name = context['name'].replace('review', '').strip()    product.url = context['url']    product.category = context['category']    product.ssid = data.xpath('//article[@class="review-article"]/@data-id').string()    if not product.ssid:        print 'no SSID'        return    review = Review()    review.title = h.unescape(context['name'])    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    review.date = data.xpath('//meta[@property="article:published_time"]/@content').string()    if review.date:        if 'T' in review.date: review.date = review.date.split('T')[0]    user_data = data.xpath("//a[@rel='author']").first()    if user_data:        user = Person()        user.name = h.unescape(user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string())        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/author\/([^\/]+)', user.profile_url)        review.authors.append(user)    grade = data.xpath('//span[@class="score score-long"]//text()').string()    if grade:        review.grades.append(Grade(name="Rating", value = grade, worst = 0, best = 100, type = 'overall'))    excerpt = data.xpath('//meta[@name="description"]//@content').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=h.unescape(excerpt)))    summary = data.xpath('//p[@class="game-verdict"]//text()[string-length(normalize-space(.))>0]').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=h.unescape(summary), name = "The Verdict"))    product.reviews.append(review)    session.emit(product)