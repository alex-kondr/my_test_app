from agent import *from models.products import *import operatorimport redebug = Truedef process_category(data, context, session):    for view in data.xpath("//h2[@class='b2c-tyre-list-results-card__item-brandname']/a"):         url = view.xpath("(.)/@href").string()          name = view.xpath("(.)//text()[string-length(normalize-space(.))>1]").join("")        if url:           session.queue(Request(url), process_product, {'url' : url, 'name' : name, 'ssid' : url})def process_product(data, context, session):       product = Product()      product.name =context['name']     product.url = context['url']     product.ssid =context['ssid']     product.category = 'Tires'      review = Review()      review.product = product.name       review.url = product.url       review.ssid = product.ssid     review.type = "pro"     excerpt = data.xpath("//div[@class='b2c-product-claim__infodetail-text-wrapper']//text()[string-length(normalize-space(.))>4]").join("")    if excerpt:         review.properties.append(ReviewProperty(type="excerpt", value = excerpt))    product.reviews.append(review)       session.emit(product)    for list in data.xpath("//body[div[@class='bvseo-review']]/div"):        avt_n = list.xpath("span[@itemprop='author']//text()[string-length(normalize-space(.))>0]").join("")        date = list.xpath("div[@class='bvseo-pubdate']//text()[string-length(normalize-space(.))>1]").join("")        desc = list.xpath("span[@itemprop='description']//text()[string-length(normalize-space(.))>1]").join("")        vals = list.xpath("span[1]/span[@itemprop='ratingValue']//text()[string-length(normalize-space(.))>0]").join("")        if avt_n:           product = Product()             product.name =context['name']            product.url = context['url']            product.ssid =context['ssid']            product.category = context['cat']             review = Review()             review.product = product.name              review.url = product.url              review.ssid = product.ssid            review.type = "pro"            review.date = re_search_once("Date published: (.+)", date)           review.authors.append(Person(name = avt_n, profile_url = review.url, ssid = review.ssid))              for list_src in data.xpath("//div[@class='carousel-inner']//img"):               src = list_src.xpath("@data-src").string()               if src:                  product.properties.append(ProductProperty(type="image" , value = {'src': src}))           excerpt = data.xpath("//div[@class='product-short-desc']//text()[string-length(normalize-space(.))>1]").join("")           if excerpt:                review.properties.append(ReviewProperty(type="excerpt", value = excerpt))           if vals:              review.grades.append(Grade(name = avt_n, value = vals, worst = 0,  best = 5))            product.reviews.append(review)              session.emit(product)def run(context, session):        session.queue(Request('https://www.michelinman.com/auto/browse-tires/all-tires'), process_category, {})