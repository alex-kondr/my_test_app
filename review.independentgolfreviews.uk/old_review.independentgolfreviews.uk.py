# -*- coding: utf8 -*-from agent import *from models.products import *debug = Truedef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.independentgolfreviews.com/index.html', use="curl"), process_first_page, {})def process_first_page(data, context, session):    for link in data.xpath('//ul[contains(@id,"menu-1")]//li//a'):        url=link.xpath('@href').string()        cat=link.xpath('descendant::text()[string-length(normalize-space(.))>1]').string()        if url and cat:            bad_cats = ['Woods','About','News','2015 PGA Show','Authors','Interviews','Course',            'Wedge/Putter']            if cat not in bad_cats:                session.queue(Request(url, use="curl"), process_productlist, dict(category=cat))def process_productlist(data, context, session):    for link in data.xpath('//node()[@class="elementor-post__title"]//a'):        url=link.xpath('@href').string()        name=link.xpath('descendant::text()[string-length(normalize-space(.))>1]').string()        if url and name:            session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid = re_search_once('postid-(\d+)', data.xpath('//body[contains(@class,"postid-")]/@class').string()) or product.name + product.url    product.category=context['category']    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid    # Publish date    pub_date=data.xpath('//meta[@property="og:updated_time"]//@content').string()    if pub_date:        if 'T' in pub_date: pub_date = pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    review.authors.append(Person(name='independentgolfreviews.com', ssid='independentgolfreviews.com'))    # Summary    summ_list = [    '//u[contains(descendant::text(),"Quick Hits")]/../preceding-sibling::text()[string-length(normalize-space(.))>30]',    '//u[contains(descendant::text(),"Quick Hits")]/../../../../../../text()',    '//span[contains(descendant::text(),"Quick Hits")]/../../preceding-sibling::text()[string-length(normalize-space(.))>30]',    '//u[contains(descendant::text(),"Quick")]/../preceding-sibling::div[string-length(normalize-space(.))>30][1]//text()',    '//span[contains(descendant::text(),"Quick Hits")]/../preceding-sibling::text()[string-length(normalize-space(.))>30]',    '//span[contains(descendant::text(),"Quick Hits")]/../../preceding-sibling::div[string-length(normalize-space(.))>30][1]//text()']    summary=False    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    # Excerpt    excerpt=data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        if summary: excerpt = excerpt.split(summary)[0]        review.properties.append(ReviewProperty(type='excerpt',value=excerpt))    # Pros    pro=False    for p in data.xpath('//u[contains(descendant::text(),"Quick Hits")]/../..//span[contains(text(),"+")]'):        pros=p.xpath('text()').string(multiple=True)        if pros and len(pros)>1:            pro = True            pros = pros.replace('+','')            review.properties.append(ReviewProperty(type='pros',value=pros))    if not pro:        for p in data.xpath('//u[contains(descendant::text(),"Quick Hits")]/../following-sibling::text()[contains((.),"+")]'):            pros=p.xpath('(.)').string(multiple=True)            if pros and len(pros)>1:                pro = True                pros = pros.replace('+','')                review.properties.append(ReviewProperty(type='pros',value=pros))    if not pro:        for p in data.xpath('//span[contains(descendant::text(),"Quick Hits")]/..//span[contains(text(),"+")]'):            pros=p.xpath('text()').string(multiple=True)            if pros and len(pros)>1:                pro = True                pros = pros.replace('+','')                review.properties.append(ReviewProperty(type='pros',value=pros))    if not pro:        for p in data.xpath('//u[contains(descendant::text(),"Quick")]/following-sibling::text()[contains((.),"+")]'):            pros=p.xpath('(.)').string(multiple=True)            if pros and len(pros)>1:                pro = True                pros = pros.replace('+','')                review.properties.append(ReviewProperty(type='pros',value=pros))    if not pro:        for p in data.xpath('//span[contains(descendant::text(),"Quick Hits")]/../following-sibling::span[contains((.),"+")]'):            pros=p.xpath('text()').string(multiple=True)            if pros and len(pros)>1:                pro = True                pros = pros.replace('+','')                review.properties.append(ReviewProperty(type='pros',value=pros))    if not pro:        for p in data.xpath('//span[contains(descendant::text(),"Quick Hits")]/../following-sibling::text()[contains((.),"+")]'):            pros=p.xpath('(.)').string(multiple=True)            if pros and len(pros)>1:                pro = True                pros = pros.replace('+','')                review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    con = False    for c in data.xpath('//u[contains(descendant::text(),"Quick Hits")]/../..//span[contains(text(),"--")]'):        cons=c.xpath('text()').string(multiple=True)        if cons and len(cons)>1:            con = True            cons = cons.replace('--','')            review.properties.append(ReviewProperty(type='cons',value=cons))    if not con:        for c in data.xpath('//u[contains(descendant::text(),"Quick Hits")]/../following-sibling::text()[contains((.),"--")]'):            cons=c.xpath('(.)').string(multiple=True)            if cons and len(cons)>1:                con = True                cons = cons.replace('--','')                review.properties.append(ReviewProperty(type='cons',value=cons))    if not con:        for c in data.xpath('//span[contains(descendant::text(),"Quick Hits")]/..//span[contains(text(),"--")]'):            cons=c.xpath('text()').string(multiple=True)            if cons and len(cons)>1:                con = True                cons = cons.replace('--','')                review.properties.append(ReviewProperty(type='cons',value=cons))    if not con:        for c in data.xpath('//u[contains(descendant::text(),"Quick")]/following-sibling::text()[contains((.),"--")]'):            cons=c.xpath('(.)').string(multiple=True)            if cons and len(cons)>1:                con = True                cons = cons.replace('--','')                review.properties.append(ReviewProperty(type='cons',value=cons))    if not con:        for c in data.xpath('//span[contains(descendant::text(),"Quick Hits")]/../following-sibling::span[contains((.),"--")]'):            cons=c.xpath('text()').string(multiple=True)            if cons and len(cons)>1:                con = True                cons = cons.replace('--','')                review.properties.append(ReviewProperty(type='cons',value=cons))    if not con:        for c in data.xpath('//span[contains(descendant::text(),"Quick Hits")]/../following-sibling::text()[contains((.),"--")]'):            cons=c.xpath('(.)').string(multiple=True)            if cons and len(cons)>1:                con = True                cons = cons.replace('--','')                review.properties.append(ReviewProperty(type='cons',value=cons))    if summary or excerpt:        product.reviews.append(review)    if product.reviews:        session.emit(product)