# -*- coding: utf8 -*-from agent import *from models.products import *import time, randomdef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.mirrorlessons.com/reviews/camera-reviews/'), process_first_page, {})    session.queue(Request('http://www.mirrorlessons.com/reviews/lens-reviews/'), process_first_page, {})    session.queue(Request('http://www.mirrorlessons.com/reviews/accessory-reviews/'), process_first_page, {})def process_first_page(data, context, session):    for link in data.xpath('//div[@class="entry-content"]//ul'):        category = link.xpath('preceding-sibling::h4[1]//text()').string()        links = link.xpath('.')        if category and links:            m_cat = link.xpath('./preceding-sibling::h4[1]/preceding-sibling::h3[1]//text()').string()            if m_cat:                category = m_cat + ' | ' + category            for l in link.xpath('.//li//a'):                name = l.xpath('text()').string()                url = l.xpath('@href').string()                if name and url:                    session.queue(Request(url),process_product,dict(category=category, name=name, url=url))    time.sleep(random.randint(10,20))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    product.category=context['category']    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]//@content').string()    if pub_date:        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//div[@class="headingTxt"]/p/text()[2]').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Type    review.type='pro'    # Ssid    review.ssid=product.ssid    # Conclusion    conclusion = data.xpath('//div[@class="entry-content"]//h3[contains(descendant::text(),"Conclusion")]/following-sibling::p[not(img) and not(@style)]//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    # Summary    summary=data.xpath('//div[@class="entry-content"]/p[not(img) and not(em) and not(strong)]//text()').string(multiple=True)    if summary:        if conclusion: summary = summary.split(conclusion)[0]        review.properties.append(ReviewProperty(type='summary',value=summary))    # Pros    for p in data.xpath('//div[@class="entry-content"]/p[contains(img//@src,"thumb-up.png")]/following-sibling::ul[1]//li'):        pros=p.xpath('text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for c in data.xpath('//div[@class="entry-content"]/p[contains(img//@src,"thumb-down.png")]/following-sibling::ul[1]//li'):        cons=c.xpath('text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    if conclusion or summary:        product.reviews.append(review)    if product.reviews:        session.emit(product)    time.sleep(random.randint(20,30))