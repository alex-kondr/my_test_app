from agent import *from models.products import *import reimport yamlfrom Ft.Xml import ReaderExceptiondebug = Truedef run(context, session):   session.browser.agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:26.0) Gecko/20100101 Firefox/26.0"   session.queue(Request("http://www.golfalot.com/EquipmentReviews.aspx"), process_category, {})def process_category(data, context, session):   for cat in data.xpath("//div[@class='category-group']/ul/li/a"):      category = cat.xpath("descendant::text()").string()      url = cat.xpath("@href").string()      if url and category:         session.queue(Request(url), process_getrevlisturl, dict(url=url, category=category))def process_getrevlisturl(data, context, session):   catid = data.xpath("//input[@id='current-category-id']/@value").string()   if catid:      nexturl = 'http://www.golfalot.com/DesktopModules/EquipmentSearch/Api.aspx?action=GetReviews&category=%s&keyword=&manufacturer=&pageNumber=1&pageSize=36'%(catid)      session.do(Request(nexturl), process_revlist, dict(context, url=nexturl, page=1))def process_revlist(data, context, session):   page = context['page']   jstxt = data.content   jstxt1 = jstxt.replace('\/', '')   revs = yaml.load(jstxt1)   cnt = 0   for rev in revs['ReviewList']:      cnt += 1      print cnt, rev      title = rev['Title']      url = data.resolve_url(rev['RelativeBlogUrl'])      ssid = '%s'%(rev['BlogId'])      date = rev['Created']      author = rev['AuthorName']      score = rev['OverallRating']      summary = rev['BestBuyText']      if not(summary):         summary = rev['SynopsisShort']      session.queue(Request(url), process_review, dict(context, url=url, title=title, ssid=ssid, date=date, author=author, score=score, summary=summary))   if cnt == 36:      nexturl = context['url'].replace('pageNumber=1', 'pageNumber=%s'%(page+1))       session.do(Request(nexturl), process_revlist, dict(context, page=page+1))def process_review(data, context, session):   product = Product()   product.name = context['title']   product.category = context['category']   product.url = context['url']   product.ssid = context['ssid']   content = data.xpath("//div[regexp:test(@itemtype,'Review')]").first()   if content:      review = Review()      product.reviews.append(review)      review.type = 'pro'      review.title = product.name      review.url = product.url      review.ssid = product.ssid       review.date = content.xpath("descendant::div[@class='date-time']/text()").string()      author = context['author']      if author:         review.authors.append(Person(name=author, ssid=author))      summary = context['summary']      if summary:         review.properties.append(ReviewProperty(type='summary', value=summary))      excerpt = content.xpath(" article/following-sibling::p[following-sibling::node()[regexp:test(normalize-space(.),'Verdict')]]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath(" article/following-sibling::p//text()").string(multiple=True)      if excerpt:         review.properties.append(ReviewProperty(type='excerpt', value=excerpt))      conclusion = content.xpath(" article/following-sibling::p[preceding-sibling::node()[regexp:test(normalize-space(.),'Verdict')]]//text()").string(multiple=True)      if conclusion:         review.properties.append(ReviewProperty(type='conclusion', value=conclusion))      score = context['score']      if score:         review.grades.append(Grade(name='Golfalot Rating', type='overall', value=float(score), best=5.0))   if product.reviews:      session.emit(product)