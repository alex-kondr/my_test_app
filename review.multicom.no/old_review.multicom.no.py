from agent import *from models.products import *import simplejsonXCAT = ['Kampanjer', 'Gavekort', 'Gjenbruksbutikken', 'Outlet', 'Vis alle']# Prune gets stuck on these pages and doesn't continue parsingXPROD = [    'https://www.multicom.no/pc-produksjon-stromkabel-fra-feks-vegguttak/cat-p/c100874/p10508324']def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=4000)]    session.queue(Request('https://www.multicom.no/', use='curl', force_charset='utf-8'), process_frontpage, {})def process_frontpage(data, context, session):    cats1 = data.xpath('//ul[contains(@class, "submenu-0")]/li')    for cat1 in cats1:        name1 = cat1.xpath('a/span[@class="elipsis"]/text()').string()        if name1 not in XCAT:            cats2 = cat1.xpath('ul/li[contains(@class, "submenu-1")]')            for cat2 in cats2:                name2 = cat2.xpath('a/span[@class="elipsis"]/text()').string()                if name2 not in XCAT:                    cats3 = cat2.xpath('ul/li[contains(@class, "submenu-2")]')                    if not cats3:                        url = cat2.xpath('a/@href').string()                        session.queue(Request(url, use='curl', force_charset='utf-8'), process_category, dict(cat=name1+'|'+name2))                    for cat3 in cats3:                        name3 = cat3.xpath('a/span[@class="elipsis"]/text()').string()                        if name3 not in XCAT:                            cats4 = cat3.xpath('ul/li[contains(@class, "submenu-3")]')                            if not cats4:                                url = cat3.xpath('a/@href').string()                                session.queue(Request(url, use='curl', force_charset='utf-8'), process_category, dict(cat=name1+'|'+name2+'|'+name3))                            for cat4 in cats4:                                name4 = cat4.xpath('a/span[@class="elipsis"]/text()').string()                                if name4 and name4 not in XCAT:                                    url = cat4.xpath('a/@href').string()                                    session.queue(Request(url, use='curl', force_charset='utf-8'), process_category, dict(cat=name1+'|'+name2+'|'+name3+'|'+name4))def process_category(data, context, session):    prods = data.xpath('//div[@class="b-product-list__item__rating"]')    for prod in prods:        url = prod.xpath('a/@href').string()        revs_count = prod.xpath('div[@class="tp-rating"]//span[@style]/text()').string()        if revs_count:            revs_count = int(revs_count.split()[0])            if revs_count > 0:                url = url.replace('#trustbox', '')                if url not in XPROD:                    session.queue(Request(url, use='curl', force_charset='utf-8'), process_product, dict(context, url=url))    next_url = data.xpath('//link[@rel="next"]/@href').string()    if next_url:        session.queue(Request(next_url, use='curl', force_charset='utf-8', max_age=0), process_category, dict(context))def process_product(data, context, session):    product = Product()    product.name = data.xpath('//span[contains(@class, "item_current")]/text()').string()    product.url = context['url']    product.category = context['cat']    sku = data.xpath('//div[@class="b-product-sku"][contains(., "Varenummer")]/div[@class="b-product-sku__value"]/text()').string()    if sku:        product.sku = sku        product.ssid = sku    ean = data.xpath('//div[@class="b-product-sku"][contains(., "EAN")]/div[@class="b-product-sku__value"]/text()').string()    if ean:        product.add_property(type='id.ean', value=ean)    if product.sku:        rev_url = 'https://widget.trustpilot.com/trustbox-data/5717796816f630043868e2e8?businessUnitId=46db331e00006400050113a8&locale=nb-NO&sku={}&reviewsPerPage=10000&reviewStars=4%2C5'.format(product.sku)        session.do(Request(rev_url, use='curl', force_charset='utf-8', max_age=0), process_reviews, dict(product=product))    if product.reviews:        session.emit(product)def process_reviews(data, context, session):    product = context['product']    try:        resp = simplejson.loads(data.content)        reviews = resp.get('productReviews', {}).get('reviews')    except:        return    for rev in reviews:        review = Review()        review.type = 'user'        review.url = product.url        review.ssid = rev.get('id')        date = rev.get('createdAt')        if date:            review.date = date.split('T')[0]        author = rev.get('consumer', {}).get('displayName')        if author:            review.authors.append(Person(name=author, ssid=author))        grade_overall = rev.get('stars')        if grade_overall:            review.grades.append(Grade(type="overall", value=float(grade_overall), best=5.0))        grades = rev.get('attributes')        for grade in grades:            value = float(grades.get(grade))            review.grades.append(Grade(name=grade, value=value, best=5.0))        excerpt = rev.get('content')        if excerpt:            review.properties.append(ReviewProperty(type="excerpt", value=excerpt))            product.reviews.append(review)            if not review.ssid:                review.ssid = review.digest() if author else review.digest(excerpt)