from agent import *from models.products import *import reXCAT = ["Все статьи", "FAQ", "Институт оверклокинга", "Руководства", "События", "Сайт"]def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=10000)]    session.queue(Request('https://overclockers.ru/lab'), process_category, dict())def process_category(data, context, session):    cats = data.xpath("//div[contains(@class, 'content-menu')]//div[@class='ui horizontal list']/a")    for cat in cats:        name = cat.xpath("text()").string()        url = cat.xpath("@href").string()        if name not in XCAT:            session.queue(Request(url), process_revlist, dict(cat=name))def process_revlist(data, context, session):    for rev in data.xpath("//div[@class='item article-wrap']/div[@class='content']"):        url = rev.xpath("a/@href").string()        name = rev.xpath("a//text()").string(multiple=True)        date = rev.xpath(".//span[@class='date']//text()").string()        excerpt = rev.xpath("div[@class='description']//text()").string()        if url and name:            session.queue(Request(url), process_review, dict(context, url=url, name=name, date=date, excerpt=excerpt))    next = data.xpath("//div[@class='ui pagination menu']/a[@class='item next']/@href").string()    if next:        session.queue(Request(next), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    product.category = context['cat']    product.ssid = re_search_once('\/(\d+)\/', product.url)    product.manufacturer = data.xpath("//*[h3]//*[contains(text(),'азработчик:')]/following-sibling::text()[1]").string()    review = Review()    review.type = 'pro'    review.title = context['name']    review.url = product.url    review.ssid = product.ssid    review.date = context['date']    author = data.xpath("//span[@class='material-author']/a").first()    if author:        name = author.xpath("span/text()").string()        url = author.xpath("@href").string()        review.authors.append(Person(name=name, ssid=name, profile_url=url))    content = data.xpath("//div[@class='sixteen wide column'][@itemprop='articleBody']").first()    pages = data.xpath("//div[@id='pagingOnTop']//a")    lasturl = ''    for page in pages:        url = page.xpath('@href').string()        title = page.xpath('text()').string()        if title and url:            review.properties.append(ReviewProperty(type='pages', value=dict(title=title, url=url)))            lasturl = url        elif title:            review.properties.append(ReviewProperty(type='pages', value=dict(title=title, url=product.url)))    menu = content.xpath("*[self::*[contains(local-name(), 'h')]][contains(.//span/text(), 'Оглавление')]/following-sibling::ul[1]//a")    summary = ''    excerpt = ''    conclusion = ''    for item in menu:        url = item.xpath("@href").string()        id = url.split('#')[-1]        title = item.xpath("text()").string()        if any(False for word in ['вступление'] if not word in title.lower()):            summary = content.xpath("*[preceding-sibling::*[@id=" + id + "] and not(preceding-sibling::*[@id=" + str(int(id) + 1) + "])][self::p or self::ul]//text()")        elif any(False for word in ['заключение'] if not word in title.lower()) and not pages:            conclusion = content.xpath("*[preceding-sibling::*[@id=" + id + "] and not(preceding-sibling::*[@id=" + str(int(id) + 1) + "])][self::p or self::ul][following-sibling::*[.//span/b[regexp:test(text(), '" + review.authors[0].name + "', 'i')]]]//text()")    if not summary:        summary = content.xpath("(//div[@class='sixteen wide column'][@itemprop='articleBody']//*[self::p and not(.//script) and normalize-space()])[1]//text()").string(multiple=True)    if summary:        summary = summary.strip()        review.properties.append(ReviewProperty(type='summary', value=summary))    if not pages:        if conclusion:            conclusion = conclusion.strip()            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))        excerpt = content.xpath("//*[(self::p or self::ul) and not(.//script) and not(.//a[contains(@href, '#')]) and not(.//text()= 'Приложения')][following-sibling::*[.//span/b[regexp:test(text(), '" + review.authors[0].name + "', 'i')]]]//text()").string(multiple=True)        if not excerpt:            excerpt = context["excerpt"]        if excerpt:            if summary:                excerpt = excerpt.replace(summary, '')            if conclusion:                excerpt = excerpt.split(conclusion.split('.')[0])[0]            excerpt = excerpt.strip()            review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    if lasturl:        session.do(Request(lasturl, max_age=0), process_lastpage, dict(review=review))    if summary or (pages and excerpt) or conclusion:        product.reviews.append(review)        session.emit(product)def process_lastpage(data, context, session):    review = context['review']    content = data.xpath("//div[@class='sixteen wide column'][@itemprop='articleBody']").first()    if content:        conclusion = content.xpath("//*[(self::p or self::ul) and not(.//script) and not(.//a[contains(@href, '#')]) and not(.//text()= 'Приложения')][following-sibling::*[.//span/b[regexp:test(text(), '" + review.authors[0].name + "', 'i')]]]//text()").string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))