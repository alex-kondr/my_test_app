import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     session.queue(Request('http://www.projectorreviews.com/projector-reviews/'), process_frontpage, {})def process_frontpage(data, context, session):    for man in data.xpath("//ul[@class='reviews-list'][not(preceding-sibling::h2[1][regexp:test(., 'Comparisons')])]"):        context['manufacturer'] = man.xpath("preceding-sibling::h2[1]//text()[string-length(normalize-space(.))>0]").string()        for p in man.xpath("li/a"):            context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()            context['url'] = p.xpath("@href").string()            if context['name'] and context['url']:                session.queue(Request(context['url']), process_product, context)def process_product(data, context, session):    product = Product()    product.name = context['name']    name = data.xpath("//th[@class='sec-header']/text()[regexp:test(., 'Specs')]").string()    if name:        product.name = name.replace('Specs', '').strip()    product.url = context['url']    product.category = Category(name = "Projectors")    product.ssid = product.name    product.manufacturer = context['manufacturer']    review = Review()    review.title = context['name']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    info = data.xpath("//p[@class[regexp:test(., 'post-date')]]/text()[string-length(normalize-space(.))>0]").string()    if info:        review.date = re_search_once('Posted on.(.+).By', info)        user = re_search_once('By.(.+)', info)        if user:            review.authors.append(Person(name = user, ssid = user))    ex_data = data.xpath("//div[@id='primary']//p[.//text()[string-length(normalize-space(.))>100]][1]").first()    if ex_data:        excerpt = ex_data.xpath(".//text()[string-length(normalize-space(.))>0]").string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    for page in data.xpath("//select[@id='dropdown-nav-top']/option[@value[not(regexp:test(., '\#'))]]"):        title = page.xpath(".//text()[string-length(normalize-space(.))>0]").string()        url = page.xpath("@value").string()        if title and url:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pages'), value = {'url': url, 'title': title}))    summary_url = data.xpath("//select[@id='dropdown-nav-top']/option[@value[not(regexp:test(., '\#'))][regexp:test(., 'summary')]]/@value").string()    if summary_url:        session.queue(Request(summary_url), process_summary_page, dict(product=product, review=review))    else:        product.reviews.append(review)        session.emit(product)def process_summary_page(data, context, session):    product = context['product']    review = context['review']    c_data = data.xpath("//div[@id='primary']//p[.//text()[string-length(normalize-space(.))>100]][1]").first()    if c_data:        conclusion = c_data.xpath(".//text()[string-length(normalize-space(.))>0]").string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='conclusion'), value=conclusion, name = "Conclusion"))    for pros in data.xpath("//div[@class='wpb_wrapper'][h2[regexp:test(., 'Pros')]]//ul/li"):        p_value = pros.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if p_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "Pros"))    for cons in data.xpath("//div[@class='wpb_wrapper'][h2[regexp:test(., 'Cons')]]//ul/li"):        c_value = cons.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if c_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "Cons"))    product.reviews.append(review)    session.emit(product)