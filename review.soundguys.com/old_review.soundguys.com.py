from agent import *from models.products import *import simplejson# Home page - http://www.soundguys.com/reviews/, needed json link for load all revsdef run(context, session):     session.browser.use_new_parser = True    url = "https://sgatlas.wpengine.com/wp-json/api/pages/reviews/?page={}&per_page=12&ts=1664188753105"    page = 1    session.queue(Request(url.format(page)), process_revlist, dict(url=url))def process_revlist(data, context, session):    resp = simplejson.loads(data.content)    revs = resp['data']['content']['posts']    if revs == []:        return    for rev in revs:        ssid = str(rev["ID"])        url = "https://www.soundguys.com/" + rev['slug'] + "/"        title = rev['title']        date = rev['date']        rate = rev['score']        author = rev['author_name']        author_ssid = rev['author_slug']        session.queue(Request(url), process_review, dict(ssid=ssid, url=url, title=title, date=date, rate=rate, author=author, author_ssid=author_ssid))    next_page = str(resp['data']['content']['current_page'] + 1)    session.queue(Request((context['url'].format(next_page))), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.name = data.xpath('//div[@class="-_-1d"]//text()').string()    product.ssid = context['ssid']    product.url = context['url']    product.manufacturer = data.xpath('(//a[contains(@href, "brands")]//text())[position() = last()]').string()    if product.manufacturer == "Brands":        product.manufacturer = data.xpath('//a[contains(@href, "brands")]//text()').string()    if product.manufacturer == "Brands":        product.manufacturer = data.xpath('//a[@class="-_-wc"]//text()').string()    if not product.name or product.url == "https://www.soundguys.com/adv-sound-993-review-8673/":        product.name = context['title'].replace(' review', '').replace(' Review', '').replace(' - Which are right for you?', '')    cats = data.xpath('//a[@class="-_-sc"]')    for cat in cats:        if "brands" not in cat.xpath("@href").string() and "Reviews" not in cat.xpath("text()").string():            product.category = cat.xpath('text()').string()    if not product.category:        product.category = "Sound"    review = Review()    review.title = context['title']    review.ssid = product.ssid    review.type = 'pro'    review.date = context['date']    review.url = product.url    author = context['author']    author_ssid = context['author_ssid']    review.authors.append(Person(name=author, ssid=author_ssid))    grade_overall = context['rate']    if grade_overall:        review.grades.append(Grade(type='overall', value=grade_overall, best=10.0))        grades = data.xpath('//div[@class="-_-ue"]')    for grade in grades:        name = grade.xpath('text()').string()        value = grade.xpath('following-sibling::div[1]//text()').string()        review.grades.append(Grade(name=name, value=float(value), best=10.0))    pros = data.xpath('//div[@class="-_-1 -_-db"]/div[@class="-_-7d"]')    if pros:        for pro in pros:            pro = pro.xpath('text()').string().replace('<br>', '')            review.add_property(type="pros", value=pro)        cons = data.xpath('//div[@class="-_-1 -_-cb"]/div[@class="-_-7d"]')    if cons:        for con in cons:            con = con.xpath('text()').string().replace('<br>', '')            review.add_property(type="cons", value=con)    summary = data.xpath('//div[@class="-_-5d"]//text()').string(multiple=True)    if summary:        review.add_property(type="summary", value=summary)        conclusion = data.xpath('(//span[@class="-_-Lh"]/div[contains(@id, "id-verdict")]/parent::span/following-sibling::div[@class="-_-D -_-L"])[position() = 1]//text()').string(multiple=True)    conclusion_content = data.xpath('//span[@class="-_-Lh"]/div[contains(@id, "id-verdict")]/parent::span/following-sibling::div[@class="-_-D -_-L"][position() > 1]')    if conclusion_content:        for content in conclusion_content:            if content.xpath('p/em'):                continue            if content.xpath('h2'):                break            if content.xpath('p//text()'):                conclusion += content.xpath('p//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//h2[contains(text(), "Conclusion")]/parent::div/following-sibling::div[@class="-_-D -_-L"]/p//text()').string(multiple=True)    excerpt = ""    excerpt_content = data.xpath('//div[@class="-_-D -_-L"]/h2 | //div[@class="-_-D -_-L"]/p')    for content in excerpt_content:        if content.xpath('.//text()').string():            if "requently asked questions about" in content.xpath('.//text()').string():                break            excerpt += content.xpath('.//text()').string(multiple=True)    if excerpt != "":        excerpt = excerpt.replace('. ', '.').replace('? ', '?').replace('.', '. ').replace('?', '? ').split("<span")[0]        if conclusion:            conclusion = conclusion.replace('. ', '.').replace('? ', '?').replace('.', '. ').replace('?', '? ')            excerpt = excerpt.replace(conclusion, ' ')            review.add_property(type="conclusion", value=conclusion)        review.add_property(type="excerpt", value=excerpt)        product.reviews.append(review)        session.emit(product)