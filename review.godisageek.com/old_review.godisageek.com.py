import stringfrom agent import *from models.products import *import redef process_all_page(data, context, session):    max_page = '120'    page = int(max_page) + 1    for i in range(1, page):        i_str = str(i)        page_url = 'http://www.godisageek.com/category/reviews/page/' + i_str        session.queue(Request(page_url), process_view_category, context)def process_view_category(data, context, session):    for view_categoryline in data.xpath("//div[@class='content-inner']//h2/a"):        context['product_url'] = view_categoryline.xpath("@href[contains(.,'godisageek.com/reviews')]").string()        context['product_name'] = view_categoryline.xpath("text()[string-length(normalize-space(.))>1]").join(" ")        if context['product_url'] and context['product_name']:            session.queue(Request(context['product_url']), process_product, context)            #session.emit(Product(name = context['product_name'], url = context['product_url'], category = context['category_name']))def process_product(data, context, session):     product = Product()    product.url = context['product_url']     product.ssid = context['product_url']    product.name = context['product_name']    product.category = data.xpath("//span[contains(text(),'Reviewed On')]/following-sibling::span//text()[string-length(normalize-space(.))>1]").string()    if not product.category:      category = data.xpath("//strong[contains(text(),'Reviewed on')]/following-sibling::text()[string-length(normalize-space(.))>1]").string()      if category:        product.category = category.replace(':','')    for imageline in data.xpath("//div[@class='gallery-icon']//a[img]"):        url_image = imageline.xpath("@href").string()        if url_image:            product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.url = context['product_url']     review.ssid = context['product_url']     review.title = context['product_name']    review.type = 'pro'    review.date = data.xpath("//div[@class='authorship']/span[@class='date']/text()[string-length(normalize-space(.))>4]").string()    username = data.xpath("//div[@class='authorship']/span/a//text()[string-length(normalize-space(.))>0]").string()    if username:        profile = data.xpath("//div[@class='authorship']/span/a/@href").string()        review.authors = Person(name = username, ssid = username, profile_url = profile) 		    excerpt = data.xpath("//meta[@name='twitter:description']/@content").string()    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value = excerpt))    for prosline in data.xpath("//div[@class='procon pro']//text()[string-length(normalize-space(.))>1][not(contains(.,'Positives'))]"):        pros = prosline.string()        if pros:            review.properties.append(ReviewProperty(name='Positives', type='pros', value=pros))            for consline in data.xpath("//div[@class='procon con']//text()[string-length(normalize-space(.))>1][not(contains(.,'Negatives'))]"):        cons = consline.string()        if cons:            review.properties.append(ReviewProperty(name='Negatives',type='cons', value=cons))              grade1 = data.xpath("//div[@itemprop='reviewRating']//div[@class='rating-label' and contains(text(),'OUR SCORE')]/following-sibling::div[@class='rating-value']/div/text()[string-length(normalize-space(.))>0]").string() 			    if grade1:   			       rating_value = re_search_once('(\d+[.]\d+|\d+)', grade1) 			       if rating_value and rating_value != '0': 			            review.grades.append(Grade(name= 'OUR SCORE', value = rating_value, worst = 0,  best = 10, type = 'overall'))    u_rating_all = data.xpath("//div[contains(@class,'post-')]//img[contains(@src,'uploads/Score-')]/@src").string()         if u_rating_all:        u_rating = re_search_once('Score-(\d)', u_rating_all)        if u_rating and u_rating:            review.grades.append(Grade(name='Score', value = u_rating, worst = 0, best = 10, type = 'overall'))    summary = data.xpath("//strong[contains(text(),'VERDICT')]/following-sibling::text()[string-length(normalize-space(.))>1]").join(" ")    if summary:        review.properties.append(ReviewProperty(name='Verdict', type='summary', value=summary))          product.reviews.append(review)    if product.category:      session.emit(product)def run(context, session):    session.browser.use_new_parser = "True"    sb = SessionBreak()    sb.max_requests = 7000    session.sessionbreakers = [ sb ]    session.queue(Request('http://www.godisageek.com/category/reviews/'), process_all_page, {}) 