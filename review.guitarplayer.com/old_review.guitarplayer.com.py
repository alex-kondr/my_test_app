from agent import *from models.products import *def run(context, session):    session.queue(Request('https://www.guitarplayer.com/reviews/archive'), process_archivelist, dict())def process_archivelist(data, context, session):    for archive in data.xpath("//ul[@class='smaller indented basic-list']/li//a"):        url = archive.xpath("@href").string()        session.queue(Request(url), process_archive, dict(context))def process_archive(data, context, session):    for review in data.xpath("//li[@class='day-article']//a"):        url = review.xpath("@href").string()        title = review.xpath("text()").string()        if url and title:            session.queue(Request(url), process_review, dict(context, url=url, title=title))def process_review(data, context, session):    product = Product()    product.name = context['title'].replace(" Review", "")    product.url = context['url']    product.ssid = product.url.split('/')[-1]    product.category = 'Guitars and guitar equipment'    review = Review()    review.type = 'pro'    review.title = context['title']    review.url = context['url']    review.ssid = product.ssid    date = data.xpath("//time[@class='no-wrap relative-date date-with-prefix']/@datetime").string()    if date:        review.date = date.split('T')[0]    author_name = data.xpath("//a[@rel='author']/span/text()").string()    author_url = data.xpath("//a[@rel='author']/@href").string()    if author_name and author_url:        review.authors.append(Person(name=author_name, profile_url=author_url, ssid=author_name))    stars = data.xpath("//p[@class='byline']//span[@class='chunk rating']/span")    if stars:        grade = float(len(stars))        if stars[-1].xpath("@class='icon icon-star half'"):            grade = grade - 0.5        if grade > 5:            grade /= 2        review.grades.append(Grade(type='overall', value=grade, best=5.0))    pros = data.xpath("//h4[@class='icon icon-plus_circle']/following-sibling::ul/li")    for pro in pros:        pro = pro.xpath(".//text()").string()        if pro:            review.add_property(type='pros', value=pro)    cons = data.xpath("//h4[@class='icon icon-minus_circle']/following-sibling::ul/li")    for con in cons:        con = con.xpath(".//text()").string()        if con:            review.add_property(type='cons', value=con)    summary = data.xpath("//div[@class='header-sub-container']/h2//text()").string(multiple=True)    if summary:        review.add_property(type='summary', value=summary)    conclusion = data.xpath("//div[@class='box contrast less-space verdict']//p//text()").string(multiple=True)    if conclusion:        review.add_property(type='conclusion', value=conclusion)    excerpt = data.xpath("//div[@id='article-body']/p//text()").string(multiple=True)    if excerpt:        if summary:            excerpt = excerpt.replace(summary, '')        if conclusion:            excerpt = excerpt.replace(conclusion, '')        specifications = data.xpath("//h2[@id='specifications-2']/following-sibling::p//text()").string(multiple=True)        if specifications:            excerpt = excerpt.replace(specifications, '')        review.add_property(type='excerpt', value=excerpt)        product.reviews.append(review)        session.emit(product)