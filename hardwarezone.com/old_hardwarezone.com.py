from agent import *from models.products import *debug = Trueimport redef process_frontpage(data, context, session):   for link in data.xpath("//div[@id='allcat']//a"):      url = link.xpath("@href").string()      category = link.xpath("descendant::text()").string(multiple=True)      if url and category:         session.queue(Request(url), process_category, dict(category=category))def process_category(data, context, session):   for link in data.xpath("//div[@class='product-listing-rating rating-bar']/preceding::h3[1]//a"):      url = link.xpath("@href").string()      title = link.xpath("descendant::text()").string(multiple=True)      excerpt = link.xpath("following::p[@class='excerpt'][1]//text()").string(multiple=True)      if url and title and excerpt:         session.queue(Request(url), process_review, dict(context, url=url, title=title, excerpt=excerpt))   nexturl = data.xpath("//div[@class='paginate']//a[@class='next-page']/@href").string()   if nexturl:      session.queue(Request(nexturl), process_category, context)def process_review(data, context, session):   product = Product()   product.name = context['title']   product.url = context['url']   product.ssid = product.name   product.category = context['category']   review = Review()   review.type = 'pro'   review.title = context['title']   review.url = context['url']   review.ssid = review.title   product.reviews.append(review)   byline = data.xpath("/descendant::span[@class='byline'][1]//text()").string(multiple=True)   review.date = re_search_once("(\d{1,2} \S+ \d{4})", byline)   author = re_search_once("Reviewed by (.*) on ", byline)   if author:      review.authors.append(Person(name=author, ssid=author))   review.add_property(type='excerpt', value=context['excerpt'])   rate = data.xpath("//div[@id='overall-rating-box']//text()[regexp:test(normalize-space(self::text()), 'HWZ.s Overall Rating:')]/following::text()[normalize-space(self::text())][1]").string()   if rate:      review.grades.append(Grade(type='overall', name='Overall Rating', value=float(rate), best=10.0))   for g in data.xpath("//span[@class='rating-bar']"):      name = g.xpath("preceding::text()[normalize-space(self::text())][1]").string()      value = g.xpath("following::text()[normalize-space(self::text())][1]").string()      if name and value:         review.grades.append(Grade(name=name, value=float(value), best=10.0))   for pro in data.xpath("//div[@class='prosncons good']//div[@class='detail']"):      line = pro.xpath("descendant::text()").string(multiple=True)      if line:         review.add_property(type='pros', value=line)   for con in data.xpath("//div[@class='prosncons bad']//div[@class='detail']"):      line = con.xpath("descendant::text()").string(multiple=True)      if line:         review.add_property(type='cons', value=line)   session.emit(product)def run(context, session):   session.queue(Request('http://www.hardwarezone.com/product-guide/all/reviews'), process_frontpage, {})