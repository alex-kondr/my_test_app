from agent import *from models.products import *def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=3000)]    session.queue(Request('https://www.androidpit.com/reviews'), process_revlist, dict())def process_revlist(data, context, session):    revs = data.xpath('//div[@class="article-teaser__link"]/a')    for rev in revs:        title = rev.xpath('text()').string()        url = rev.xpath('@href').string()        if '[Video' not in title and 'Video]' not in title and 'video review' not in title.lower():            session.queue(Request(url), process_review, dict(title=title, url=url))    next_url = data.xpath('//li[contains(@class, "page--next")]/a/@href').string()    if next_url:        session.queue(Request(next_url), process_revlist, dict())def process_review(data, context, session):    product = Product()    product.name = data.xpath('//div[@class="deviceLinkText" or contains(@class, "__headline") or @class="np-product__header"]/*[self::h2 or self::h3 or self::span]/text()').string() or data.xpath('//span[@class="articleInstallAppTitle"]/text()').string()    if not product.name:        product.name = context['title'].split('Durability test: ')[-1].split('[Test]')[-1].split(' test:')[0].split(' Test:')[-1].split(' First Look: ')[0].split('First Look: ')[-1].split(' Review: ')[0].split(' review: ')[0].strip()    product.ssid = data.xpath('//input[@name="articleId"]/@value').string()    product.url = data.xpath('//span[contains(@class, "np-offer__link")]/@data-href').string() or context['url']    product.category = 'Tech'    cats = data.xpath('//div[@class="articleContentWrapper"]/ul/li/a[not(contains(., "Home") or contains(., "Manufac") or contains(., "More") or contains(., "Master your"))]/text()').strings()    for cat in cats:        product.category += '|' + cat    review = Review()    review.title = context['title']    review.type = 'pro'    review.url = context['url']    review.ssid = product.ssid    date = data.xpath('//time[@class="articlePublishedDate"]/@datetime').string()    if date:        review.date = date.split('T')[0]    author_name = data.xpath('//span[@class="articleAuthorName"][not(contains(., "Deactivated Account"))]/text()').string()    author_url = data.xpath('//div[@class="authorBox__content"]/a/@href').string()    if author_name and author_url:        author_ssid = author_url.strip('/').split('/')[-1]        review.authors.append(Person(name=author_name, ssid=author_ssid, profile_url=author_url))    elif author_name:        review.authors.append(Person(name=author_name, ssid=author_name))    grade_overall = data.xpath('//span[@class="ratingStars"]/use/@href').string()    if grade_overall:        grade_overall = float(grade_overall.split('stars-')[-1]) / 2        review.grades.append(Grade(type='overall', value=grade_overall, best=5.0))    pros = data.xpath('//ul[@class="goodList"]/li/span[@class="goodBadContent"]/text()').strings()    for pro in pros:        pro = pro.strip('- ')        if pro:            review.add_property(type='pros', value=pro)    cons = data.xpath('//ul[@class="badList"]/li/span[@class="goodBadContent"]/text()').strings()    for con in cons:        con = con.strip('- ')        if con:            review.add_property(type='cons', value=con)    summary = data.xpath('//div[@class="articlePartIntroContent"]/p//text()').string(multiple=True)    if summary:        review.add_property(type='summary', value=summary)    conclusion = data.xpath('//div[@class="finalVerdictDesc"]/p//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//div[contains(@class, "articlePartContent")]/p[preceding-sibling::h2[regexp:test(., "conclusion", "i") or regexp:test(., "final thoughts", "i") or regexp:test(., "bottom line", "i")]]//text()').string(multiple=True)    if conclusion:        review.add_property(type='conclusion', value=conclusion)    excerpt = data.xpath('//div[contains(@class, "articlePartContent")]/p[not(preceding-sibling::h2[regexp:test(., "conclusion", "i") or regexp:test(., "final thoughts", "i") or regexp:test(., "bottom line", "i")])]//text()').string(multiple=True)    if excerpt:        review.add_property(type='excerpt', value=excerpt)        product.reviews.append(review)        session.emit(product)