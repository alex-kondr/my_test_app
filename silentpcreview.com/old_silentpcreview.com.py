import stringfrom agent import *from models.products import *import refrom Ft.Xml import ReaderExceptiondebug = TrueXCAT = ['About Us', 'Benchmarks', 'Do-It-Yourself Systems', 'Donations|Giveaways', 'How To', 'Internet News', "MikeC's Audio Craft", 'News', 'Popular Guides', 'Reference|Recommended', 'Silent PC Build Guides', 'Site News', 'The Silent Front', 'Uncategorized']def run(context, session):     session.queue(Request('https://silentpcreview.com/categories/'), process_frontpage, {})def process_frontpage(data, context, session):    for cat in data.xpath("//div[@class='entry-content']//h3/a"):        context['category'] = cat.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if context['category'] in XCAT:            continue        cat_url = cat.xpath("@href").string()        if context['category'] and cat_url:            session.queue(Request(cat_url), process_category, context)def process_category(data, context, session):    for p in data.xpath("//div[@class[regexp:test(., 'catogerypage')]]//div[@class='category_single_cont']//h3/a"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url'] and context['category']:            session.queue(Request(context['url']), process_product, context)def process_product(data, context, session):    try:        date = data.xpath("//ul[@class='entry-meta']/li[last()]/text()[regexp:test(., '\d{4}')]").string()    except ReaderException:        return    product = Product()    product.name = context['name']    product.url = context['url']    product.category = Category(name = context['category'].replace('|', ', '))    product.ssid = re_search_once('\/([^\/]+)\/*$', product.url)    review = Review()    review.ssid = product.ssid    review.url = product.url    review.type = 'pro'    review.date = date    user_data = data.xpath("//ul[@class='entry-meta']/li/a").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/author\/([^\/]+)', user.profile_url)        review.authors.append(user)    ex_data = data.xpath("//div[@class='blog-details-content']/p[.//text()[string-length(normalize-space(.))>100]][1]").first()    if not ex_data:        ex_data = data.xpath("//body/p[.//text()[string-length(normalize-space(.))>10]][1]").first()    if ex_data:        excerpt = ex_data.xpath(".//text()[string-length(normalize-space(.))>0]").string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    summary = data.xpath("//p[regexp:test(., 'FINAL THOUGHTS')]/following-sibling::p[.//text()[string-length(normalize-space(.))>10]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Final Thoughts"))    product.reviews.append(review)    session.emit(product)