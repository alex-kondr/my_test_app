from agent import *from models.products import *import simplejsonimport redef remove_emoji(string):    emoji_pattern = re.compile("["                               u"\U0001F600-\U0001F64F"  # emoticons                               u"\U0001F300-\U0001F5FF"  # symbols & pictographs                               u"\U0001F680-\U0001F6FF"  # transport & map symbols                               u"\U0001F1E0-\U0001F1FF"  # flags (iOS)                               u"\U00002500-\U00002BEF"  # chinese char                               u"\U00002702-\U000027B0"                               u"\U00002702-\U000027B0"                               u"\U000024C2-\U0001F251"                               u"\U0001f926-\U0001f937"                               u"\U00010000-\U0010ffff"                               u"\u2640-\u2642"                               u"\u2600-\u2B55"                               u"\u200d"                               u"\u23cf"                               u"\u23e9"                               u"\u231a"                               u"\ufe0f"  # dingbats                               u"\u3030"                               "]+", flags=re.UNICODE)    return emoji_pattern.sub(r'', string)def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=8000)]    url = 'https://www.gameblog.fr/api/posts/load_more_posts/controller/components_controller/method/search_post_items/view_mode/full/sort_order/desc/offset/0/ppp/10/search_filters/Jeu-video%2CTests%2Call%2Call%2C%2C%2C%2C%2C%2C%2C%2C%2C/limit/gameblog/'    session.queue(Request(url, force_charset='utf-8'), process_revlist, {})def process_revlist(data, context, session):    revs = data.xpath('//div[contains(@class, "item full")]')    if not revs:        return    for rev in revs:        title = rev.xpath('.//h2[@class="title"]/text()').string()        url = rev.xpath('.//a[contains(@class, "title-link")]/@href').string()        ssid = rev.xpath('@id').string()        session.queue(Request(url, use='curl', force_charset='utf-8'), process_review, dict(title=title, url=url, ssid=ssid))    offset = context.get('offset', 0) + 10    next_url = 'https://www.gameblog.fr/api/posts/load_more_posts/controller/components_controller/method/search_post_items/view_mode/full/sort_order/desc/offset/{}/ppp/10/search_filters/Jeu-video%2CTests%2Call%2Call%2C%2C%2C%2C%2C%2C%2C%2C%2C/limit/gameblog'.format(offset)    session.queue(Request(next_url, force_charset='utf-8'), process_revlist, dict(offset=offset))def process_review(data, context, session):    product = Product()    product.name = data.xpath('//h3[contains(@class, "title ")]/a/text()').string() or context['title'].split('TEST de ')[-1].split('TEST ')[-1].split(' : ', 1)[0]    product.url = context['url']    product.manufacturer = data.xpath('//div[@class="developers"]/span/a/text()').string()    product.ssid = context['ssid']    category = ('Hardware' if 'Tech' in data.xpath('//div[@class="post-tags"]/a/text()').strings() else 'Jeu vidéo') + '|'    platforms = data.xpath('//div[@class="platforms"]/div/a/text()').strings()    for platform in platforms:        category += platform.strip() + '/'    product.category = category.strip('| /')    review = Review()    review.title = context['title']    review.url = context['url']    review.ssid = product.ssid    review.type = 'pro'    date = data.xpath('//meta[@property="article:published_time"]/@content').string()    if date:        review.date = date.split('T')[0]    author = data.xpath('//div[@class="author"]//div[@class="author-name"]/a').first()    if author:        author_name = author.xpath('text()').string()        author_url = author.xpath('@href').string()        author_ssid = author_url.split('/')[-1]        review.authors.append(Person(name=author_name, profile_url=author_url, ssid=author_ssid))    conclusion_url = 'https://www.gameblog.fr/v5/review_summary_component?ct=content_block_8&user_presence=false&id={}&spf=load&incoming_page_type=review_page'.format(product.ssid)    session.do(Request(conclusion_url, force_charset='utf-8', max_age=0), process_conclusion, dict(review=review))    summary = data.xpath('//div[@class="post-excerpt"]/p//text()').string(multiple=True)    if summary:        summary = remove_emoji(summary).strip()        review.add_property(type="summary", value=summary)    excerpt = data.xpath('//div[@class="post-content"]/p//text()').string(multiple=True)    if excerpt:        excerpt = remove_emoji(excerpt).strip()        review.add_property(type="excerpt", value=excerpt)        product.reviews.append(review)        session.emit(product)def process_conclusion(data, context, session):    review = context['review']    resp = simplejson.loads(data.content).get('body', {}).get('content_block_8')    if not resp:        return    new_data = data.parse_fragment(resp)    pros = new_data.xpath('//div[@class="good-points"]//div[@class="point"]/text()').strings()    for pro in pros:        pro = pro.replace('…', '').strip(' .\n\t')        if pro:            review.properties.append(ReviewProperty(type='pros', value=pro))    cons = new_data.xpath('//div[@class="bad-points"]//div[@class="point"]/text()').strings()    for con in cons:        con = con.replace('…', '').strip(' .\n\t')        if con:            review.properties.append(ReviewProperty(type='cons', value=con))    grade_overall = new_data.xpath('//div[contains(@class, "review-bar")]//text()').string(multiple=True)    if grade_overall:        grade_overall = grade_overall.replace('\n', '').replace('\t', '').strip().split()[0]        if grade_overall.isdigit():            review.grades.append(Grade(type='overall', value=float(grade_overall), best=10.0))    conclusion = new_data.xpath('//div[@class="review-content"]/div[@class="review-text"]//text()').string(multiple=True)    if conclusion:        conclusion = remove_emoji(conclusion).strip()        review.add_property(type="conclusion", value=conclusion)