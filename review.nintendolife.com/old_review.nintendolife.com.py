import stringfrom agent import *from models.products import *import refrom Ft.Xml import ReaderExceptiondebug = Truedef run(context, session):     session.browser.use_new_parser = True    session.sessionbreakers = [SessionBreak(max_requests=7000)]    session.queue(Request('http://www.nintendolife.com/reviews', use='curl'), process_frontpage, {'page': 1})def process_frontpage(data, context, session):    has_p = False    for p in data.xpath("//div[@class[regexp:test(., 'ui-listing-body')]]/ul[@class[regexp:test(., 'items')]]/li//a[@class[regexp:test(., 'title')]]"):        context['name'] = p.xpath(".//span[@class[regexp:test(., 'title')]]//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url'], use='curl'), process_product, context)            has_p = True    if has_p:        page = context['page'] + 1        session.queue(Request('http://www.nintendolife.com/reviews?page='+str(page), use='curl'), process_frontpage, dict(page=page))def process_product(data, context, session):    try:       name = data.xpath("//div[@class='info']//p[@class='title']//text()[string-length(normalize-space(.))>0]").string()    except ReaderException:       return    product = Product()    product.name = name    if product.name:        product.name = context['name']    product.url = context['url']    category = "Games"    subcat = data.xpath("//h1[@class='title']/a/span[@class='sub']/text()[string-length(normalize-space(.))>0]").string()    if subcat:        category += '|' + subcat.replace('(', '').replace(')', '')    product.category = Category(name = category)    product.ssid = re_search_once('\/([^\/]+)$', product.url)    review = Review()    review.ssid = product.ssid    review.url = product.url    review.type = 'pro'    review.date = data.xpath("//section[@class='byline']//time/@datetime").string()    if review.date:        review.date = re_search_once('^(\d{4}\-\d{2}\-\d{2})', review.date)    user_data = data.xpath("//section[@class='byline']//a[@class[regexp:test(., 'author-name')]]").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/users\/([^\/]+)', user.profile_url)        review.authors.append(user)    ex_data = data.xpath("//section[@class='text']/p[.//text()[string-length(normalize-space(.))>100]][1]").first()    if ex_data:        excerpt = ex_data.xpath(".//text()[string-length(normalize-space(.))>0]").string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    summary = data.xpath("//section[@id='conclusion']/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='summary'), value=summary, name = "Conclusion"))    grade = data.xpath("//p[@class='score']/span[@class[regexp:test(., 'value')]]/text()[regexp:test(., '\d')]").string()    if grade:        review.grades.append(Grade(name="Score", value = grade, worst = 0, best = 10, type = 'overall'))    product.reviews.append(review)    session.emit(product)