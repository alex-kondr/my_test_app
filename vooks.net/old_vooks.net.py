import stringfrom agent import *from models.products import *import redef process_category(data, context, session):    for categoryline in data.xpath("//div[@class='section-menu-mobile']/ul/li[not(ul)]/a[not(.//text()[regexp:test(.,'Release Dates')])]"):        context['category_url'] = categoryline.xpath("@href").string()        context['category_name'] = categoryline.xpath("span[@class='category-title']/text()").string()        if context['category_name']:          session.queue(Request(context['category_url']), process_view_category, context)          #session.emit(Product(name = 'product_name', url = category_url, category = category_name))    for categoryline in data.xpath("//div[@class='section-menu-mobile']/ul/li/ul/li/a"):        context['category_url'] = categoryline.xpath("@href").string()        c1 = categoryline.xpath("parent::li/parent::ul/preceding-sibling::a[1]/span[@class='category-title']/text()[string-length(normalize-space(.))>1]").string()        c2 = categoryline.xpath("text()[string-length(normalize-space(.))>1]").string()        if c1 and c2:          context['category_name'] = c1 + '|' + c2          session.queue(Request(context['category_url']), process_view_category, context)          #session.emit(Product(name = 'product_name', url = category_url, category = category_name))def process_view_category(data, context, session):    for view_categoryline in data.xpath("//div[contains(@class,'content-inner')]//div[@class='loop']/div[contains(@class,'loop-panel') and a[@class='loop-link']/@href[contains(.,'review')]]"):        context['product_url'] = view_categoryline.xpath("a[@class='loop-link']/@href[contains(.,'review')]").string()        context['product_name'] = view_categoryline.xpath(".//h2[@class='article-title']//text()[string-length(normalize-space(.))>1]").string()        context['date'] = view_categoryline.xpath(".//span[@class='date']/text()[string-length(normalize-space(.))>1]").string()        if context['product_url'] and context['product_name']:            context['product_name'] = context['product_name'].replace('Review','')            session.queue(Request(context['product_url']), process_product, context)            #session.emit(Product(name = context['product_name'], url = context['product_url'], category = '2'))    next = data.xpath("//link[@rel='next']/@href").string()    if next:        session.queue(Request(next), process_view_category, context)def process_product(data, context, session):    product = Product()    product.name = context['product_name']    product.url = context['product_url']    product.ssid = context['product_url']    product.category = context['category_name']    for imageline in data.xpath("//meta[@property='og:image']"):        url_image = imageline.xpath("@content").string()        if url_image:            product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.type = 'pro'    review.ssid = product.ssid    review.title = product.name    review.date = context['date']    username = data.xpath("//span[@class='author vcard']/a/span/text()[string-length(normalize-space(.))>1]").string()    if username:        profile = data.xpath("//span[@class='author vcard']/a/@href").string()        u_ssid = username        review.authors = Person(name = username, ssid = u_ssid, profile_url = profile)     excerpt = data.xpath("//div[@id='content-anchor-inner']//text()[string-length(normalize-space(.))>100]").string()    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value = excerpt))    for ratingline in data.xpath("//div[@class='rating user_rating stars_wrapper']/div[span[contains(@class,'theme-icon-star')]]"):        value = 0        for grade in ratingline.xpath("span[@class='theme-icon-star-full']"):            value = value + 1        for grade in ratingline.xpath("span[@class='theme-icon-star-half']"):            value = value + 0.5        rating_value = value        review.grades.append(Grade(name= 'User Rating', value = rating_value, worst = 0, best = 5, type = 'overall'))    for ratingline in data.xpath("//div[@class='rating-value']/div[span[contains(@class,'theme-icon-star')]]"):        value = 0        for grade in ratingline.xpath("span[@class='theme-icon-star-full']"):            value = value + 1        for grade in ratingline.xpath("span[@class='theme-icon-star-half']"):            value = value + 0.5        rating_value = value        review.grades.append(Grade(name= 'Our Rating', value = rating_value, worst = 0, best = 5, type = 'overall'))    summary = data.xpath("//div[text()[regexp:test(.,'Final Thoughts')]]/following-sibling::p//text()[string-length(normalize-space(.))>0]").join(" ")    if summary:        review.properties.append(ReviewProperty(name='Final Thoughts', type='summary', value=summary))          product.reviews.append(review)    session.emit(product)def run(context, session):    session.queue(Request('https://www.vooks.net/'), process_category, {})     session.queue(Request('https://www.vooks.net/category/nintendo-switch/'), process_view_category, {'category_name':'Switch'}) 