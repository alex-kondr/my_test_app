#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://www.svenskgolf.se/tagg/test/'), process_category, dict(category="Utrustning"))def process_category(data, context, session):    for link in data.xpath('//div[contains(@class,"articleCard ")]'):        url=link.xpath('descendant::a//@href').string()        name=link.xpath('node()[@class="categoryArticleHeadline"]//text()').string()        if url and name:            bad_list2 = ['Testat:','TESTAT SEN SIST:','','','']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url),process_product,dict(context,url=url,name=name))    # Next page    next=data.xpath('//a[@class="next page-numbers"]//@href').string()    if next:        session.queue(Request(next), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    # Category    category = data.xpath('//ul[@class="article-tags"]//a[not(contains(@href,"/test"))]//text()').join('|')    category2 = data.xpath('//div[@class="articleSingleTag"]//a[not(contains(descendant::text(),"Test"))]//text()').join('|')    if category:        product.category=category    elif category2:        if category:            product.category=category + category2        else:            product.category=category2    else:        product.category=context['category']    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.ssid=product.ssid + ' review'    review.type='pro'    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]//@content').string()    if pub_date:        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//span[@class="author"]//text()').string() or 'Svensk Golf'    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    overall=data.xpath('//node()[regexp:test(descendant::text(),"(TOTALT:)")]/following-sibling::text()[contains((.),"/")]').string()    if overall:        score = overall.split('/')[0]        best = overall.split('/')[1].replace('.','')        if ' ' in best: best = best.split(' ')[0]        review.grades.append(Grade(name='Overall Rating', type='overall', value=score, best=best))    for g in data.xpath('//node()[regexp:test(descendant::text(),"(BETYG:)")]/following-sibling::p[strong[contains(descendant::text(),":")]]'):        name =g.xpath('strong//text()').string()        value=g.xpath('text()[1]').string()        if value and name:            if ':' in name: name = name.replace(':','')            if '.' in value: value = value.replace('.','')            try:                int(value)                review.grades.append(Grade(name=name, value=value, best=10))            except:                pass    excerpt=data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:135]+'...'))    # Summary    summ_list = [    '//p[regexp:test(descendant::text(),"(SÅ GICK PANELSNACKET|Så gick panelsnacket)")]//text()',    '//div[@class="article-meta"]/following-sibling::p//text()[string-length(normalize-space(.))>100]',    '//div[@class="entry-content clear"]//p//text()']    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            summary = summary.replace('"','')            review.properties.append(ReviewProperty(type='summary',value=summary))            break    # Pros    pros=data.xpath('//p[descendant::node()[regexp:test(descendant::text(),"(PLUS:)")]]/text()[string-length(normalize-space(.))>1]').string(multiple=True)    if pros:        review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    cons=data.xpath('//p[descendant::node()[regexp:test(descendant::text(),"(MINUS:)")]]/text()[string-length(normalize-space(.))>1]').string(multiple=True)    if cons:        review.properties.append(ReviewProperty(type='cons',value=cons))    if excerpt or summary or pros or cons:        product.reviews.append(review)    if product.reviews:        session.emit(product)