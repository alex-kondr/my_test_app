import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     session.browser.use_new_parser = True    session.sessionbreakers = [SessionBreak(max_requests=5000)]    session.queue(Request('http://www.gamepro.de/tests/'), process_frontpage, {})def process_frontpage(data, context, session):    for p in data.xpath("//div[@class[regexp:test(., 'maincontent')]]//h2/a"):        context['name'] = p.xpath(".//text()[string-length(normalize-space(.))>0]").string()        context['url'] = p.xpath("@href").string()        if context['name'] and context['url']:            session.queue(Request(context['url']), process_product, context)    next = data.xpath("//a[@class[regexp:test(., 'do-loadmore')]]/@href").string()    if next:        session.queue(Request(next), process_frontpage, {})def process_product(data, context, session):    product = Product()    product.name = data.xpath("//div[@id='breadcrumbs']/ul/li[2]/a//text()[string-length(normalize-space(.))>0]").string() or context['name'].replace('im Test', '').strip()    product.url = data.xpath("//div[@id='breadcrumbs']/ul/li[2]/a/@href").string() or context['url']    product.ssid = re_search_once('(\d+)\.htm', product.url)    category = ""    categories = []    txt = data.xpath("//p[@class='info']/text()[regexp:test(., 'Release')]").string()    if txt:        cats = re_search_once('\(([^\)]+)\)', txt)        if cats:            categories = cats.split(',')             category = categories[0]            if len(categories) > 1:                product.also_in = categories[1:]    if not category:        category = "Games"    product.category = Category(name = category)    review = Review()    review.title = data.xpath("//h1[@class='article']/text()[string-length(normalize-space(.))>0]").string() or context['name']    review.url = context['url']    review.ssid = re_search_once('(\d+)\.htm', review.url)    review.type = 'pro'    review.date = data.xpath("//div[@class='row'][div/h1]//p[@class[regexp:test(., 'info')]]/text()[regexp:test(., '\d+\.\d+\.\d+')]").string()    user_data = data.xpath("//div[@class='row'][div/h1]//p[@class[regexp:test(., 'info')]]/a").first()    if user_data:        user = Person()        user.name = user_data.xpath(".//text()[string-length(normalize-space(.))>0]").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('(\d+)\/*$', user.profile_url)        review.authors.append(user)    excerpt = data.xpath("//p[@class='intro']//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='excerpt'), value=excerpt))    summary_url = data.xpath("//a[regexp:test(., 'Fazit')]/@href").string()    if summary_url:        session.queue(Request(summary_url), process_summary_page, dict(product=product, review=review))    else:        rating_url = data.xpath("//a[regexp:test(., 'Wertung')]/@href").string()        if rating_url:            session.browser.use_new_parser = False            session.queue(Request(rating_url), process_rating_page, dict(product=product, review=review))        else:            product.reviews.append(review)            session.emit(product)def process_summary_page(data, context, session):    product = context['product']    review = context['review']    conclusion = data.xpath("//h2[regexp:test(., 'Fazit')]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>100]").string()    if conclusion:        review.properties.append(ReviewProperty(type=ReviewPropertyType(name='conclusion'), value=conclusion, name = "Fazit"))    rating_url = data.xpath("//a[regexp:test(., 'Wertung')]/@href").string()    if rating_url:        session.browser.use_new_parser = False        session.queue(Request(rating_url), process_rating_page, dict(product=product, review=review))    else:        product.reviews.append(review)        session.emit(product)def process_rating_page(data, context, session):    product = context['product']    review = context['review']    for pros in data.xpath("//div[@class[regexp:test(., 'pro-contra')]]//li[i[@class[regexp:test(., 'positive')]]]"):        p_value = pros.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if p_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='pros'), value=p_value, name = "Pros"))    for cons in data.xpath("//div[@class[regexp:test(., 'pro-contra')]]//li[i[@class[regexp:test(., 'negative')]]]"):        c_value = cons.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if c_value:            review.properties.append(ReviewProperty(type=ReviewPropertyType(name='cons'), value=c_value, name = "Cons"))    for g in data.xpath("//div[@class='wertungskasten-title']"):        g_name = g.xpath("text()[string-length(normalize-space(.))>0]").string()        g_value = len(g.xpath("following-sibling::div[@class[regexp:test(., 'star-rating')]]/i[@class[regexp:test(., 'active')]]"))        if g_name and g_value:            review.grades.append(Grade(name = g_name, value = g_value, worst = 0, best = 5))    for aw in data.xpath("//div[@class[regexp:test(., 'wertungskasten-box-item')]][div[regexp:test(., 'Awards')]]//img"):        src = aw.xpath("@src").string()        if src:            product.properties.append(ProductProperty(type=ProductPropertyType(name="awards"), value = {'image_src': src}))    product.reviews.append(review)    session.emit(product)