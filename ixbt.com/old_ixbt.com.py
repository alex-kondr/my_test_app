from agent import *from models.products import *import redef process_category(data, context, session):    for categoryline in data.xpath("//div[@class='slide_menu__common']//div[@class='mainmenu__list __menulist']/ul/li[position()>1]/a"):        context['category_url'] = categoryline.xpath("@href").string()        context['category_name'] = categoryline.xpath("text()[string-length(normalize-space(.))>1]").string()        if context['category_name'] and context['category_url']:            #context['category_url'] = context['category_url'] + 'archive/'            session.queue(Request(context['category_url']), process_view_category, context)def process_view_category(data, context, session):    for view_categoryline in data.xpath("//div[@class='newsblocks__items']//div[@class='item__text']"):        context['product_url'] = view_categoryline.xpath("a[@class='item__text--title']/@href").string()        context['product_name'] = view_categoryline.xpath("a[@class='item__text--title']/text()[string-length(normalize-space(.))>1]").string()        context['date'] = view_categoryline.xpath(".//div[@class='info__date']/text()[string-length(normalize-space(.))>1]").string()        context['excerpt'] = view_categoryline.xpath("p[@class='item__text--text desktop-show']//text()[string-length(normalize-space(.))>1]").string()        context['username'] = view_categoryline.xpath(".//p[@class='author']//text()[string-length(normalize-space(.))>1]").join(", ")        if  context['username'] and context['excerpt'] and context['product_url'] and context['product_name'] and context['date']:            session.queue(Request(context['product_url']), process_product, context)    next = data.xpath("//div[@class='b-pagination']/a[@class='btn btn-default btn-default__gray active-pgen']/following-sibling::a[1]/@href").string()    if next:        session.queue(Request(next), process_view_category, context)def process_product(data, context, session):     product = Product()    product.url = context['product_url']     product.ssid = context['product_url']     product.name = context['product_name']    product.category = context['category_name']    url_image = data.xpath("//div[@itemprop='articleBody']//img/@src").string()    if url_image:        product.properties.append(ProductProperty(type='image' , value = {'src': url_image, 'type': 'product'}))    review = Review()    review.type = 'pro'    review.ssid = product.ssid    review.url = product.url    review.title = product.name    review.date = context['date']    review.authors = Person(name = context['username'], ssid = context['username'])    review.properties.append(ReviewProperty(name = product.name, type='excerpt', value=context['excerpt']))    for prosline in data.xpath("//*[.//text()[string-length(normalize-space(.))<15][regexp:test(.,'люсы|остоинства')]]/following-sibling::ul[1]/li"):        pros = prosline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if pros:            review.properties.append(ReviewProperty(name='Плюсы', type='pros', value=pros))              for consline in data.xpath("//*[.//text()[string-length(normalize-space(.))<15][regexp:test(.,'инусы|едостатки')]]/following-sibling::ul[1]/li"):        cons = consline.xpath(".//text()[string-length(normalize-space(.))>0]").string()        if cons:            review.properties.append(ReviewProperty(name='Минусы', type='cons', value=cons))              summary = data.xpath("//h3[text()[regexp:test(.,'Вывод|Итог|Заключение')]]/following-sibling::p[.//text()[string-length(normalize-space(.))>100]]//text()").join("\n")    if summary:        review.properties.append(ReviewProperty(name='Заключение', type='summary', value=summary))          product.reviews.append(review)    if summary or data.xpath("//*[.//text()[string-length(normalize-space(.))<15][regexp:test(.,'люсы|остоинства')]]/following-sibling::ul[1]/li") or data.xpath("//*[.//text()[string-length(normalize-space(.))<15][regexp:test(.,'инусы|едостатки')]]/following-sibling::ul[1]/li"):       session.emit(product)def run(context, session):     sb = SessionBreak()    sb.max_requests = 30000    session.sessionbreakers = [ sb ]    session.queue(Request('http://www.ixbt.com/'), process_category, {})    #session.queue(Request('http://www.ixbt.com/mobilepc/archive/'), process_view_category, {'category_name': '4'})