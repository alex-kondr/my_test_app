from agent import *from models.products import *import refrom Ft.Xml import ReaderExceptiondebug = Truedef run(context, session):   session.queue(Request("http://www.cliquenabend.de/spiele.html"), process_revlist, {})def process_revlist(data, context, session):   for rev in data.xpath("//table[@class='grid']/tr/td[3]/a"):      newcontext = dict(context)      name = rev.xpath("descendant::text()").string(multiple=True)      url = rev.xpath("@href").string(multiple=True)      grade = rev.xpath("following::td[3]/text()").string(multiple=True)      grade = re_search_once("(\d+)", grade)      date = rev.xpath("preceding::td[2]/text()").string(multiple=True)      if url and name and grade and date:         newcontext['name'] = name         newcontext['url'] = url         newcontext['grade'] = grade         newcontext['date'] = date         session.queue(Request(url), process_review, newcontext)   next = data.xpath("//img[@style='margin-left:5px;']/ancestor::a[1]/@href").string()   if next:      fnext = next.replace('#tablelist', '')      session.do(Request(fnext), process_revlist, context) def process_review(data, context, session):   product = Product()   product.name = context['name']   #product.manufacturer = data.xpath("//b[regexp:test(text(),'Verlage/Autoren')]/following-sibling::ul[1]/li//text()[normalize-space(.)]").join(' & ')   product.category = data.xpath("//*[text()='Genres:']/following::ul[1]/li//text()").join(" | ")   product.url = context['url']   product.ssid = product.name   for cnt, rev in enumerate(data.xpath("//span[@itemprop='author']/ancestor::body[1]")):       review = Review()       product.reviews.append(review)       review.type = 'pro'       review.title = product.name       review.url = product.url       review.ssid = '%s-%s'%(product.ssid, cnt+1)       review.date = context['date']       author = rev.xpath("descendant::span[@itemprop='author'][1]/text()").string(multiple=True)       if author:          review.authors.append(Person(name=author, ssid=author))       conclusion = rev.xpath("descendant::em[1]//text()").string(multiple=True)       if conclusion:          review.properties.append(ReviewProperty(type='conclusion', value=conclusion))       score = rev.xpath("following::span[@itemprop='ratingValue'][1]/text()").string(multiple=True)       if score:          review.grades.append(Grade(name='GESAMT', value=score, best=10))       review.grades.append(Grade(type='overall', value=context['grade'], best=10))   session.emit(product)