from agent import *from models.products import *import simplejsonimport timedef process_frontpage(data, context, session):    resp = simplejson.loads(data.content)['results']    for rev in resp:        name = rev['title']        url = 'https://www.ukclimbing.com' + rev['slug']        date = time.strftime('%d %b %Y',time.gmtime(rev['post_date']))        ssid = rev['id']        if url and name:            session.queue(Request(url), process_review, dict(url=url, name=name, date=date, id=ssid))def process_review(data, context, session):    try:        data.xpath("/")    except:        return    product = Product()    product.name = context['name']    product.ssid = str(context['id'])    product.manufacturer = data.xpath("//div[@id='has_sidebar']//a[@shape='rect']/child::strong/text()").string()    prod_url = data.xpath("//*[self::p or self::li or self::strong or self::b][regexp:test(text(), 'For more info')]/child::a").first()    if prod_url:        product.url = prod_url.xpath("@href").string()    else:        product.url = context['url']    cats = []    catsx = data.xpath("//li[@class='breadcrumb-item']//span[@itemprop='name']")    for cat in catsx[2:]:        cats.append(cat.xpath("text()").string())    product.category = '|'.join(cats)    review = Review()    review.type = 'pro'    review.title = context['name']    review.url = context['url']    review.date = context['date']    review.ssid=product.ssid    author_name = data.xpath("//div[@class='clearfix']//a[not(@role='button')]/text()").string(multiple=True)    author_url = data.xpath("//div[@class='clearfix']//a[not(@role='button')]/@href").string(multiple=True)    if author_name and author_url:        review.authors.append(Person(name= author_name, ssid= author_name, profile_url= author_url))    # elif data.xpath("//div[@class='clearfix']/text()|//div[@class='clearfix']/span[@itemprop='name']/text()")[1].string(multiple=True):    elif author_name:        author_name = data.xpath("//div[@class='clearfix']/text()|//div[@class='clearfix']/span[@itemprop='name']/text()")[1].string(multiple=True)        review.authors.append(Person(name= author_name, ssid= author_name))	    excerpt = data.xpath("//*[self::h3 or self::p][regexp:test(normalize-space(.),'^(summary|conclusion|overall|the verdict|in conclusion)', 'i')]/preceding-sibling::p/text()|//p/b[regexp:test(normalize-space(.),'summary|conclusion|overall|the verdict', 'i')]/preceding::p/text()|//h3[regexp:test(normalize-space(.),'^(summary|conclusion|overall|the verdict)', 'i')]/preceding-sibling::p/span/text()").string(multiple=True)    summ_temp = data.xpath("//div[@class='content']//strong/text()|//div[@class='content']//b/text()|//div[@class='content']//strong/span[not(@class='dropcap')]/text()")    first_letter = data.xpath("//div[@class='content']//*[self::strong or self::b]/span[@class='dropcap']/text()").string()    if first_letter and summ_temp:        summary = first_letter + summ_temp[0].string(multiple=True)    elif summ_temp:        summary = summ_temp[0].string(multiple=True)    else:        summary = ''			    conclusion = data.xpath("//*[self::h3 or self::p][regexp:test(normalize-space(.),'^(summary|conclusion|overall|the verdict)', 'i')]//following-sibling::p/text()|//b[regexp:test(normalize-space(.),'^(summary|conclusion|overall|the verdict)', 'i')]/following-sibling::text()|//h3[regexp:test(normalize-space(.),'^(summary|conclusion|overall|the verdict)', 'i')]/following-sibling::p/span/text()|//p[regexp:test(normalize-space(.),'^(in conclusion)', 'i')]/self::p/text()").string(multiple=True)	    box = data.xpath("//div[@class='content']//div[@class='box']")    if not excerpt:        if box:            excerpt = data.xpath("//div[@class='content']//div[@class='box']/preceding-sibling::p/text()").string(multiple=True)        else:            excerpt = data.xpath("//div[@class='content']//p/text()").string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))	    product.reviews.append(review)    session.emit(product)def run(context, session):    session.browser.use_new_parser = True    session.sessionbreakers = [SessionBreak(max_requests=3000)]    # This is the link to all reviews from https://www.ukclimbing.com/gear/reviews/    session.queue(Request('https://api.ukclimbing.com/site/gear/v1/channel_posts/1/4'), process_frontpage, {})