import stringfrom agent import *from models.products import *import redebug = Truedef run(context, session):     session.queue(Request('https://www.slashgear.com/category/reviews/'), process_revlist, {})def process_revlist(data, context, session):    for rev in data.xpath("//ul[@id='article-container']/li//h3/a"):        title = rev.xpath("descendant::text()").string(multiple=True)        url = rev.xpath("@href").string()        if url and title:            name = re_search_once('^(.*) [Rr]eview', title)            if not(name):                name = re_search_once('The (.*) is my', title)            if not(name):                name = re_search_once('Review ?: (.*)$', title)            if not(name):                name = title            session.queue(Request(url), process_review, dict(url=url, title=title, name=name))    next = data.xpath("//a[@id='next-page']/@href").string()    if next:        session.queue(Request(next), process_revlist, {})def process_review(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    category = data.xpath("//div[@class='breadcrumbs']/a/text()[string-length(normalize-space(.))>0]").join('|') or "Unknown"    product.category = Category(name = category)    product.ssid = re_search_once('\/(\d+)\/', product.url)    if not product.ssid:        product.ssid = re_search_once('(\d+)\/*$', product.url)    review = Review()    review.title = context['title']    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    review.date = data.xpath("//div[@class='byline-container']/span[@class='byline-timestamp']/text()[string-length(normalize-space(.))>0]").string()    user_data = data.xpath("//div[@class='byline-container']/a").first()    if user_data:        user = Person()        user.name = user_data.xpath("descendant::text()").string()        user.profile_url = user_data.xpath("@href").string()        user.ssid = re_search_once('\/author\/([^\/]+)', user.profile_url)        review.authors.append(user)    tgrade = data.xpath("//div[@class='score']/span[@class='score-number']/text()[regexp:test(., '\d+\.*\d*\s*\/\s*\d*')]").string()    if tgrade:        grade = re_search_once('(\d+\.?\d?)\s*\/', tgrade)        if grade:            review.grades.append(Grade(name="Editors\' Rating", value=grade, worst=0, best=10, type='overall'))    for pro in data.xpath("//div[@class='procon']/ul[preceding-sibling::figure[1][@class='pro']]/li"):        line = pro.xpath("descendant::text()").string()        if line:            review.properties.append(ReviewProperty(type='pros', value=line, name="Pros"))    for con in data.xpath("//div[@class='procon']/ul[preceding-sibling::figure[1][@class='con']]/li"):        line = con.xpath("descendant::text()").string()        if line:            review.properties.append(ReviewProperty(type='cons', value=line, name="Cons"))    excerpt = data.xpath("//div[@class='article']/div[@class='news-article'][1]/div[@class='columns-holder'][p][1]/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    conclusion = data.xpath("//h2[regexp:test(., 'Conclusion')]/following-sibling::div[@class='columns-holder'][p][1]/p[.//text()[string-length(normalize-space(.))>100]][1]//text()[string-length(normalize-space(.))>0]").string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    product.reviews.append(review)    session.emit(product)