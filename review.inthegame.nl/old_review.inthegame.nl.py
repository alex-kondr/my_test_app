# -*- coding: utf8 -*-from agent import *from models.products import *def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://inthegame.nl/category/nieuws/reviews/', use="curl"), process_category, {})def process_category(data, context, session):    for link in data.xpath('//node()[regexp:test(name(),"h\d")][@class="entry-title"]//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name:            bad_list2 = ['Review:','','','','']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name))    # Next page    next=data.xpath('//a[@class="next page-numbers"]//@href').string()    if next:        session.queue(Request(next, use="curl"), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    # Category    category = data.xpath('//a[@rel="tag"]//text()').join(' | ')    if category:        product.category='Games | ' + category    else:        product.category='Games'    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.ssid=product.ssid + 'review'    review.type='pro'    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]//@content').string()    if pub_date:        if 'T' in pub_date: pub_date = pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//span[@class="author vcard"]//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    if '"ratingValue": ' in data.content:        overall = data.content.split('"ratingValue": ')[1].split(',')[0]        if overall:            review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=10))    for g in data.xpath('//ul[@class="review-list"]//li/span[string-length(normalize-space(.))>1]/span'):        name =g.xpath('text()').string()        value=g.xpath('span//text()').string()        if value and name:            if '-' in name: name = name.replace('-','')            if '/' in value: value = value.split('/')[0]            review.grades.append(Grade(name=name, value=value, best=10))    # Summary    summ_list = [    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Verdict|verdict|Samengevat|samengevat)")]/following-sibling::p[text()][not(strong)]//text()',    '//p[regexp:test(descendant::text(),"(Verdict|verdict|Samengevat|samengevat)")]/following-sibling::p[text()][not(strong)]//text()']    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    # Excerpt    excerpt=data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        if summary: excerpt = ''.join(excerpt.split(summary))        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    # Pros    for p in data.xpath('//p[regexp:test(descendant::text(),"(Pluspunten:|Pluspunten)")]//strong'):        pros=p.xpath('following-sibling::text()[string-length(normalize-space(.))>1][1]').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for c in data.xpath('//p[regexp:test(descendant::text(),"(Minpunten:|Minpunten)")]//strong'):        cons=c.xpath('following-sibling::text()[string-length(normalize-space(.))>1][1]').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    product.reviews.append(review)    if product.reviews:        session.emit(product)