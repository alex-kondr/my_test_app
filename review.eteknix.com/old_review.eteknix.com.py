from agent import *from models.products import *def run(context, session):   session.browser.agent = 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36'   session.sessionbreakers = [SessionBreak(max_requests=10000)]   session.queue(Request('http://www.eteknix.com/', use="curl"), process_frontpage, {})def process_frontpage(data, context, session):   for cat in data.xpath("//li[regexp:test(normalize-space(.),'^Reviews')]/ul/li/a"):      url = cat.xpath("@href").string()      category = cat.xpath("descendant::text()").string()      if url and category:         session.queue(Request(url, use="curl"), process_revlist, dict(context, category=category))def process_revlist(data, context, session):   for rev in data.xpath("//div[@class='entry']/h3"):      url = rev.xpath("descendant::a/@href").string()      title = rev.xpath("descendant::text()").string(multiple=True)      date = rev.xpath("following-sibling::span[@class='newsdate']/text()").string()      author = rev.xpath("following-sibling::span[@class='newsdate']//a[regexp:test(@href,'author')]").first()      if url and title:         date = re_search_once('^(.* \d{4})', date)         name = re_search_once('^(.*) Review', title)         if not(name):            name = title         session.queue(Request(url, use="curl"), process_review, dict(context, url=url, title=title, name=name, date=date, author=author) )   nxtLink = data.xpath("//li[@class='active_page']/following-sibling::li[1][regexp:test(normalize-space(.),'^\d+$')]//a/@href").string()   if nxtLink:      session.queue(Request(nxtLink, use="curl"), process_revlist, dict(context))def process_review(data, context, session):   excerpt = None   conclusion = None   summary = None   product = Product()   product.name = context['name']   product.url = context['url']   product.category = context['category']   product.ssid = product.name   content = data.xpath("//div[@id='main']").first()   if content:      review = Review()      review.type = "pro"      review.title = context['title']      review.url = context['url']      review.ssid = review.title      product.reviews.append(review)      review.date = context['date']      author = context['author']      if author:         name = author.xpath("descendant::text()").string()         url = author.xpath("@href").string()         if url and name:            review.authors.append(Person(name=name,ssid=name,url=url))      excerpt = content.xpath(" p[preceding-sibling::h2[1][regexp:test(normalize-space(.),'Introduction')]][normalize-space(text())]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("p[count(preceding-sibling::p[strong])=0][normalize-space(text())]//text()").string(multiple=True)      if excerpt:         review.properties.append(ReviewProperty(type="excerpt", value=excerpt))      lasturl = ''      for page in content.xpath(" descendant::select[1]/option[not(regexp:test(@value,'\/all'))]"):         title = page.xpath("descendant::text()").string()         url = page.xpath("@value").string()         if url and title:            review.properties.append(ReviewProperty(type="pages", value=dict(url=url, title=title)))            lasturl = url      if lasturl:         session.do(Request(lasturl, use="curl"), process_conclusion, dict(context,review=review, excerpt=excerpt))      else:         process_conclusion(data, dict(context,review=review, excerpt=excerpt), session)   if excerpt or conclusion or summary:      session.emit(product)def process_conclusion(data, context, session):   review = context['review']   content = data.xpath("//div[@id='main']").first()   if content:      # Summary      summ_list = [      '//div[@id="main"]//p[strong][regexp:test(descendant::text(),"(“|”|eTeknix says)")]//text()',      '//div[@id="main"]//p[em][regexp:test(descendant::text(),"(“|”)")]//text()']      for item in summ_list:          summary = data.xpath(item).string(multiple=True)          if summary:             summary = summary.replace('eTeknix says:','')             summary = summary.replace('“','').replace('”','')             review.properties.append(ReviewProperty(type="summary",value=summary))             break      conclusion = content.xpath("p[preceding-sibling::h2[1][regexp:test(normalize-space(.),'Final Thoughts')] and preceding-sibling::p[strong][1][regexp:test(normalize-space(.),'Overview')]][normalize-space(text())]//text()").string(multiple=True)      if not(conclusion):         conclusion = content.xpath("p[preceding-sibling::p[strong][1][regexp:test(normalize-space(.),'Final Thoughts')]][normalize-space(text())]//text()").string(multiple=True)      if not(conclusion):         conclusion = content.xpath("p[normalize-space(text())]//text()").string(multiple=True)      if conclusion and conclusion != context['excerpt']:         review.properties.append(ReviewProperty(type="conclusion", value=conclusion))      pros = content.xpath("ul[preceding-sibling::p[strong][1][regexp:test(normalize-space(.),'Pros')]]/li")      if not pros:         pros = data.xpath("//h2[contains(., 'Pros')]/following-sibling::ul[1]/li")      for pro in pros:         line = pro.xpath("descendant::text()").string(multiple=True)         if line:            review.properties.append(ReviewProperty(type="pros", value=line))      cons = content.xpath("ul[preceding-sibling::p[strong][1][regexp:test(normalize-space(.),'Cons')]]/li")      if not cons:         cons = data.xpath("//h2[contains(., 'Cons')]/following-sibling::ul[1]/li")      for con in cons:         line = con.xpath("descendant::text()").string(multiple=True)         if line:            review.properties.append(ReviewProperty(type="cons", value=line))      for award in content.xpath("descendant::img[regexp:test(@src,'png')]"):         src = award.xpath("@src").string()         title = award.xpath("@alt").string()         if src and title:            review.add_property(type='awards', value=dict(name=title, image_src=src))         elif src:            review.add_property(type='awards', value=dict(image_src=src))