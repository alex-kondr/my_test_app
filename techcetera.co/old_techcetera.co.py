#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *def run(context, session):    #session.browser.use_new_parser = True    session.queue(Request('https://techcetera.co/pruebas/reviews-labs/', use="curl"), process_category, {})def process_category(data, context, session):    for link in data.xpath('//node()[@class="eltd-post-title"]//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name:            bad_list2 = ['Evaluación:','Todo lo que debe saber acerca del','Evaluación:','(Review)',': Review',            'Review:','Review','El ']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            bad_list = [': ']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name))    # Next page    next=data.xpath('//link[@rel="next"]//@href').string()    if next:        session.queue(Request(next, use="curl"), process_category, dict(context))def process_product(data, context, session):    try:        data.xpath('//div[@class="eltd-tags"]//a//text()').join('|')    except:        print 'Now well formed...'        return    product=Product()    product.name=context['name']    product.url=context['url']    # ssid = data.xpath('//div[contains(@class,"post-")]//@id').string()    product.ssid= re_search_once('postid-(\d+)', data.xpath('//body[contains(@class,"postid-")]/@class').string()) or product.name + ' ' + product.url    # Category    category = data.xpath('//div[@class="eltd-tags"]//a//text()[string-length(normalize-space(.))>1]').join('|') #//div[@class="categories"]//a[not(contains(@href,"review"))]//text()    if category:        product.category=category    else:        product.category='unknown'    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid    # Publish date    pub_date=data.xpath('//meta[@property="article:published_time"]//@content').string()    if pub_date:        if 'T' in pub_date: pub_date = pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//node()[@class="eltd-author-name"]//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Grades    overall = data.xpath('//span[@itemprop="ratingValue"]//text()').string()    if overall:        review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=10))    # Excerpt    excerpt=data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt',value=excerpt+'...'))    # Conclusion    conc_list = [    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(onclusión|ale la pena|oncusión)")]/following-sibling::text()',    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(onclusión|ale la pena|oncusión)")]/following-sibling::p//text()']    conclusion = False    for item in conc_list:        conclusion=data.xpath(item).string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion',value=conclusion))            break    # Summary    summary=data.xpath('//div[@class="ratingsummary"]//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary',value=summary))    # Pros    for p in data.xpath('//div[contains(@class,"cb-pros-list")]//li'):        pros=p.xpath('text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for c in data.xpath('//div[contains(@class,"cb-cons-list")]//li'):        cons=c.xpath('text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    if summary or excerpt or overall or conclusion:        product.reviews.append(review)    if product.reviews:        session.emit(product)