# -*- coding: utf8 -*-from agent import *from models.products import *def run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('http://www.golfmagic.com/reviews/equipment/'), process_first_page, {})def process_first_page(data, context, session):    for link in data.xpath('//div[contains(@class,"views-row-")]//a'):        url=link.xpath('@href').string()        category=link.xpath('text()').string()        if url and category:            session.queue(Request(url),process_category,dict(category=category))def process_category(data, context, session):    for link in data.xpath('//div[@class="title"]//a[contains(@href,"reviews")]'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name:            bad_list2 = [' review', 'Review']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url),process_product,dict(context,url=url,name=name))    # Next page    next=data.xpath('//li[@class="pager-next"]//a//@href').string()    if next:        session.queue(Request(next), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    product.ssid=product.name + product.url    product.category=context['category']    product.manufacturer=''    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid    # Publish date    date=data.xpath('//span[@property="v:dtreviewed"]//@content').string()    if not(date): date = data.xpath('//div[@class="article-post-date"]//text()').string()    if date:        if 'Posted:' in date: date = date.replace('Posted:','')        review.date=date    else:        review.date='unknown'    # Author    author=data.xpath('//div[@class="articleHeading articleFont"][node()[contains(@class,"author")]]/text()[string-length(normalize-space(.))>1]').string()    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='golfmagic.com', ssid='golfmagic.com'))    # Grades    overall=data.xpath('//div[@class="scores"]//span[@class="on"]//text()').string()    if overall:        review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=5))    # Summary    summ_list = [    '//p[regexp:test(descendant::node()//text(),"(Verdict|VERDICT)")]/following-sibling::p//text()',    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Verdict|VERDICT)")]/following-sibling::p//text()'    ]    summary = False    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    # Excerpt    excerpt=data.xpath('//div[@class="field-items"]//p[not(strong)][not(@class)][not(span)][string-length(normalize-space(.))>10]//text()').string(multiple=True)    if excerpt:        if summary: excerpt = excerpt.split(summary)[0]        review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:135]+'...'))    # Pros    pros=data.xpath('//div[@class="pro"]//text()').string(multiple=True)    if pros:        review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    cons=data.xpath('//div[@class="con"]//text()').string(multiple=True)    if cons:        review.properties.append(ReviewProperty(type='cons',value=cons))    if excerpt or summary:        product.reviews.append(review)    usr = data.xpath('//div[@class="review-sections"]//a[contains(@href,"reader-reviews")]//@href').string()    if usr:        session.do(Request(usr),process_users,dict(context,product=product))    if product.reviews:        session.emit(product)def process_users(data, context, session):    product=context['product']    c=0    for link in data.xpath('//div[@class="product-member-reviews-repeater"]'):        c += 1        review=Review()        review.product=product.name        review.url=product.url        review.type='user'        review.ssid=product.ssid + str(c)        # Title        title = link.xpath('descendant::a[contains(@href,"memno=")]/../..//p//text()').string()        if title:            review.title = title        # Publish date        pub_date=link.xpath('descendant::a[contains(@href,"memno=")]/../../text()[string-length(normalize-space(.))>1]').string()        if pub_date:            review.date=pub_date.replace('Reviewed: ','')        else:            review.date='unknown'        # Author        author=link.xpath('descendant::a[contains(@href,"memno=")]//text()').string(multiple=True)        if author:            review.authors.append(Person(name=author, ssid=author))        else:            review.authors.append(Person(name='unknown', ssid='unknown'))        # Grades        overall=link.xpath('descendant::img[contains(@src,"score-member-medium")]//@src').string()        if overall:            score = overall.split('score-member-medium-')[1][:-4]            review.grades.append(Grade(name='Overall Rating', type='overall', value=score, best=5))        for g in link.xpath('descendant::div[div[contains(@class,"-bar-score")]]'):            name =g.xpath('b//text()').string()            value=g.xpath('div[contains(@class,"-bar-score")]//text()').string()            if value and name:                review.grades.append(Grade(name=name, value=value, best=5))        # Summary        summary=link.xpath('descendant::div[img[contains(@src,"clipboard.gif")]]/following-sibling::div[1]//text()').string(multiple=True)        if summary:            review.properties.append(ReviewProperty(type='summary',value=summary))        # Pros        pros=link.xpath('descendant::div[img[contains(@src,"tick.gif")]]/following-sibling::div[1]//text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))        # Cons        cons=link.xpath('descendant::div[img[contains(@src,"cross.gif")]]/following-sibling::div[1]//text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))        product.reviews.append(review)