from agent import *from models.products import *def run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=10000)]    session.queue(Request('https://www.topgear.com/car-reviews/find', use='curl', force_charset='utf-8', max_age=0), process_revlist, dict())def process_revlist(data, context, session):    revs = data.xpath('//a[contains(@class, "CardLink")]')    for rev in revs:        title = rev.xpath('text()').string()        url = rev.xpath('@href').string()        session.queue(Request(url, use='curl', force_charset='utf-8', max_age=0), process_review, dict(title=title, url=url))    next_url = data.xpath('//a[@data-testid="next-button"]/@href').string()    if next_url:        session.queue(Request(next_url, use='curl', force_charset='utf-8', max_age=0), process_revlist, dict())def process_review(data, context, session):    title = data.xpath('//h1//text()').string(multiple=True)    product = Product()    product.name = title.replace(' review', '').strip()    product.url = context['url']    product.ssid = product.url.split('/')[-1]    product.category = 'Cars'    product.manufacturer = data.xpath('//a[@data-testid="Brevier" and not(regexp:test(., "home|review", "i"))]/text()').string()    review = Review()    review.type = 'pro'    review.title = title    review.url = product.url    review.ssid = product.ssid    date = data.xpath('//meta[@property="article:published_time"]/@content').string()    if date:        review.date = date.split('T')[0]    author = data.xpath('//div[@data-testid="Pica" and not(contains(., "Top Gear Team"))]//text()').string(multiple=True)    author_url = data.xpath('//div[@data-testid="Pica" and not(contains(., "Top Gear Team"))]/a/@href').string()    if author and author_url:        author_ssid = author_url.split('/')[-1]        review.authors.append(Person(name=author, ssid=author_ssid, profile_url=author_url))    elif author:        review.authors.append(Person(name=author, ssid=author))    grade_overall = data.xpath('//div[@data-testid="CarReviewHeader"]//div[svg[@data-testid="Rating"]]/text()').string()    if grade_overall:        review.grades.append(Grade(type='overall', value=float(grade_overall), best=10.0))    pros = data.xpath('//div[div/div/h3[contains(text(), "Good stuff")]]/div/p[@data-testid="BodyCopy"]')    for pro in pros:        pro = pro.xpath('.//text()').string(multiple=True)        if pro:            pro = pro.strip(' +-*.:;•,–')            if len(pro) > 1:                review.add_property(type='pros', value=pro)    cons = data.xpath('//div[div/div/h3[contains(text(), "Bad stuff")]]/div/p[@data-testid="BodyCopy"]')    for con in cons:        con = con.xpath('.//text()').string(multiple=True)        if con:            con = con.strip(' +-*.:;•,–')            if len(con) > 1:                review.add_property(type='cons', value=con)    summary = data.xpath('//div[@data-testid="GreatPrimer"]//text()').string(multiple=True)    if summary:        review.add_property(type='summary', value=summary)    conclusion = data.xpath('//h3[regexp:test(., "verdict", "i")]/following-sibling::div/text()|//h3[regexp:test(., "verdict", "i")]/following-sibling::div/p//text()').string(multiple=True)    if conclusion:        review.add_property(type='conclusion', value=conclusion)    excerpt = data.xpath('//h3[regexp:test(., "verdict", "i")]/preceding-sibling::div/p//text()').string(multiple=True)    if not excerpt:        excerpt = data.xpath('//div[@data-testid="HtmlContent"]/p//text()').string(multiple=True)    pages = data.xpath('(//div[ul[contains(@class, "SecondaryNavItems")]])[1]//a')    for page in pages:        title = page.xpath('text()').string()        url = page.xpath('@href').string()        review.add_property(type='pages', value=dict(title=title, url=url))    if excerpt:        review.add_property(type='excerpt', value=excerpt)        product.reviews.append(review)        session.emit(product)