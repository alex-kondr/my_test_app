from agent import *from models.products import *import time, randomdef run(context, session):   session.sessionbreakers=[SessionBreak(max_requests=10000)]   session.browser.agent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36"   session.queue(Request('http://www.destructoid.com/products-index.phtml?filt=reviews&date_s=desc&category=', use="curl"), process_productlist, dict())def process_productlist(data, context, session):    #try:    for prod in data.xpath('//a[@class="post-title"]'):        url = prod.xpath('@href').string()        name = prod.xpath('descendant::text()').string(multiple=True)        if url and name:            session.queue(Request(url, use="curl"), process_review, dict(context, url=url, name=name))    next = data.xpath('//a[@class="next page-numbers"]//@href').string()    if next:        session.queue(Request(next, use="curl"), process_productlist, dict(context, next=next))#    except:#        print 'Error. No element found, url:', context['next']#        next = context['next'].split('&start=')[0] +'&start='+ str(int(context['next'].split('&start=')[1]) + 25)#        print 'Trying next:', next#        session.queue(Request(next, use="curl"), process_productlist, dict(context, next=next))def process_review(data, context, session):    product = Product()    product.name = context['name'].replace('Review:','')    product.url = context['url']    product.ssid = re_search_once('postid-(\d+)', data.xpath('//body[contains(@class,"postid-")]/@class').string()) or product.name + product.url    product.category = data.xpath('//div[contains(@class,"post-tags")]//a//text()').join('|') or 'Videogames'    if '#' in product.category: product.category = product.category.replace('#', '')    review = Review()    review.type = 'pro'    review.url = context['url']    review.ssid = product.ssid + ' review'    datetxt = data.xpath('//meta[@property="article:modified_time"]//@content').string()    if datetxt:        if 'T' in datetxt: datetxt = datetxt.split('T')[0]        review.date = datetxt    author = data.xpath('//div[@class="author-name"]//text()[string-length(normalize-space(.))>1]').string()    if author:        review.authors.append(Person(name=author, ssid=author))    excerpt = data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    # Summary    summary=data.xpath('//div[@id="gverdict_closing"]//p//text()').string(multiple=True)    if summary:        if 'How we score:' in summary: summary = summary.split('How we score:')[0]        review.properties.append(ReviewProperty(type='summary',value=summary))    score = data.xpath('//div[@class="review-summary-box"]//div[@class="review-score"]//text()[string-length(normalize-space(.))>0]').string()    if score:        review.grades.append(Grade(name='Score', type='overall', value=score, best=10.0))    if excerpt or summary:        product.reviews.append(review)    if product.reviews:        session.emit(product)    time.sleep(random.randint(5,10))