#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *import simplejsonimport time, randomimport agentdef request(url):    additional_headers =  ' -H "Origin: https://www.whatcar.com" '    additional_headers +=  ' -H "Accept: application/json" '    additional_headers += ' -H "User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36" '    print '-s -L --insecure ' + additional_headers    r = agent.Request(url, use='curl', options=' -vvv -s -L --insecure ' + additional_headers)    r.add_header('Origin', 'https://www.whatcar.com')    r.add_header('Accept', 'application/json')    return rRequestX = requestdef run(context, session):    session.sessionbreakers=[SessionBreak(max_requests=10000)]    session.queue(Request('https://www.whatcar.com/reviews'), process_brand, dict(category="Cars"))def process_brand(data, context, session):    for link in data.xpath('//div[contains(@class,"FragmentReviewsLandingPage")]//a[contains(@href,"/make/")]'):        url = link.xpath('@href').string()        #brand=link.xpath('following::div[1]//text()').string()        if url:# and brand:#and not session.seen(url):            brand = url.split('/make/')[1]            url = 'https://aphrodite-frontend-proxy.prod.whatcardev.haymarket.com/api/make/' + brand + '?sortBy=title&sort=asc&displayFields=cmsId,title,derivative.cashPrice,derivative.savings,derivative.cashPriceMax,derivative.onTheRoadPrice,derivative.onTheRoadPriceMax,derivative.dateIntroduced,derivative.make,derivative.range,derivative.bodyStyle,heroImage,promoBoxText,verdictRating,derivative.savings,reviewType,relatedYoutubeLink'            url = 'https://aphrodite-frontend-proxy.prod.whatcardev.haymarket.com/api/make/' + brand + '?sortBy=title&sort=asc&displayFields=cmsId,title,derivative.cashPrice,derivative.savings,derivative.cashPriceMax,derivative.onTheRoadPrice,derivative.onTheRoadPriceMax,derivative.dateIntroduced,derivative.make,derivative.range,derivative.bodyStyle,heroImage,promoBoxText,verdictRating,derivative.savings,reviewType,relatedYoutubeLink'            session.queue(RequestX(url), process_productlist, dict(context, brand=brand))def process_productlist(data, context, session):    jstxt = data.content    print jstxt    if jstxt[0:2]=='{}': jstxt = jstxt.replace('{}','', 1)    prods = simplejson.loads(jstxt)    for prod in prods['reviews']:        url = 'https://www.whatcar.com/'+ prod['derivative']['make'] + '/' + prod['derivative']['range'].replace(' ','-') + '/' + prod['derivative']['bodyStyle'] + '/review/' + prod['cmsId']        name = prod['title']        if url and name:#and not session.seen(url):            session.queue(Request(url), process_product, dict(context, url=url, name=name))    time.sleep(random.randint(10,20))def process_product(data, context, session):    product = Product()    product.name = context['name']    product.url = context['url']    product.category = context['category']    product.manufacturer = context['brand']    product.ssid = context['url'].split('review/n')[1]    review = Review()    review.product = product.name    review.url = product.url    review.ssid = product.ssid + ' review'    review.type = 'pro'    # Publish date    if '"datePublished":"' in data.content:        pub_date = data.content.split('"datePublished":"')[1].split('"')[0]        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        review.date=pub_date    else:        review.date='unknown'    # Author    author = data.xpath('//div[contains(@class,"AuthorCard_authorCardName")]//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='whatcar.com', ssid='whatcar.com'))    # Grades    score = data.xpath('//div[contains(@class,"lement_rating")]//div[contains(@class,"Icon_red")]')    if score:        score = len(score)        review.grades.append(Grade(name='Overall Rating', type='overall', value=score, best=5))    # Excerpt    excerpt = data.xpath('//node()[contains(@class,"chapterSubTitle")]//text()').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:135]+'...'))    # Conclusion    summary = data.xpath('//div[contains(@class,"Review_verdictBox")]//node()[regexp:test(name(),"h\d")]//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary', value=summary))    # Pros    for p in data.xpath('//node()[contains(@class,"VerdictBoxPros")]//li'):        pros = p.xpath('descendant::text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for c in data.xpath('//node()[contains(@class,"VerdictBoxCons")]//li'):        cons = c.xpath('descendant::text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    product.reviews.append(review)    if product.reviews:        session.emit(product)    time.sleep(random.randint(15,30))