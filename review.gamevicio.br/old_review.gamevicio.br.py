from agent import *from models.products import *def process_frontpage(data, context, session):    #genres   for cat in data.xpath('//div[@class="gender_item"]/a'):      url = cat.xpath('@href').string()      session.queue(Request(url, use="curl"), process_genre, dict(context))def process_genre(data, context, session):    #letters   for cat in data.xpath('//span[@class="off"]/a'):      url = cat.xpath('@href').string()      session.queue(Request(url, use="curl"), process_productlist, dict(context))def process_productlist(data, context, session):   for prod in data.xpath('//div[@class="div_image"]'):      name = prod.xpath('div[2]/div[1]/a/text()').string(multiple=True)      for plf in prod.xpath('descendant::a[span[contains(@class,"platform")]]'):          url = plf.xpath('@href').string()          plfName = plf.xpath('span/text()').string(multiple=True)          if url and name and plfName:             session.queue(Request(url, use="curl"), process_product, dict(context, url=url, name=name, category=plfName))def process_product(data, context, session):   product = Product()   product.name = context["name"]   product.url = context["url"]   product.ssid = re_search_once('perfil\/\d+\/(.*?)\/', product.url)   product.category = context["category"]   revurl = data.xpath('//div[@class="intDiv game_menu"]//a[text()="Análises"]/@href').string()   if revurl:      session.do(Request(revurl, use="curl"), process_reviewsProxy, dict(context, product=product, url=revurl))   if product.reviews:      session.emit(product)def process_reviewsProxy(data, context, session):   revurl = data.xpath('//div[@class="item on"]//a[text()="Análises dos Usuários"]/@href').string()   if revurl:      session.do(Request(revurl, use="curl"), process_reviews, dict(context))def process_reviews(data, context, session):   product = context["product"]   for revurl in data.xpath('//div[@id="div_comment_list"]//a[regexp:test(normalize-space(.),"continua")]/@href').strings():      session.do(Request(revurl, use="curl"), process_userreview, dict(context, product=product, url=revurl))def process_userreview(data, context, session):   product = context["product"]   content = data.xpath('//div[@class="body_main"]/div[@class="center"]/div[@class="wrap"]').first()   if content:      review = Review()      review.type = "user"      review.title = product.name      review.url = context["url"]      review.ssid = re_search_once("usuarios\/(\d+)", review.url)      product.reviews.append(review)      datetxt = content.xpath('descendant::script[1]/text()').string()      print datetxt      if datetxt:         review.date = re_search_once("\(\'([^\']+)\'", datetxt)         print datetxt, review.date      if not review.date:          datetxt = data.xpath('//span[@id="div_review_time"]//text()').string() or ""          datetxt = datetxt.split('(')[0]          review.date = datetxt      author = content.xpath('descendant::a[1]').first()      if author:         name = author.xpath('descendant::text()').string(multiple=True)         url = author.xpath('@href').string()         if url and name:            review.authors.append(Person(name=name, profile_url=url, ssid=name))      excerpt = content.xpath('text()').string(multiple=True)      if excerpt:         review.add_property(type="excerpt", value=excerpt)      rate = data.xpath('/descendant::div[@class="rev_big_box"][last()]//span[@class="note1"]/text()').string(multiple=True)      if rate:         review.grades.append(Grade(type="overall", name="Rate", value=float(rate), best=10.0))def run(context, session):   session.sessionbreakers = [SessionBreak(max_requests=30000)]   session.queue(Request("https://www.gamevicio.com/analises-de-jogos-games-controles-e-consoles/", use="curl"), process_frontpage, {})