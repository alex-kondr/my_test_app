from agent import *from models.products import *debug = Trueimport redef getexcerpt(txtlist):   excerpt = ''   txtlist = [o.strip() for o in txtlist]   for line in txtlist:      excerpt += ' ' + line      if re_search_once("([!?.])$", line) and len(line) > 100:         break   excerpt = re.compile("\s+").sub(' ', excerpt)   return excerpt.strip()def process_productlist(data, context, session):   for prod in data.xpath("//div[@class='article']/a[img]"):      url = prod.xpath("@href").string()      name = prod.xpath("following-sibling::h2//text()").string(multiple=True)      excerpt = prod.xpath("following-sibling::p//text()").string(multiple=True)      if url and name:         session.queue(Request(url), process_product, dict(context, url=url, name=name, excerpt=excerpt))   next = data.xpath("//a[regexp:test(normalize-space(.),'suivant »')]/@href").string()   if next:      session.queue(Request(next), process_productlist, dict(context))def process_product(data, context, session):   product = Product()   product.name = context['name']   product.url = context['url']   product.ssid = product.name   product.category = context['category']   content = data.xpath("//div[@class='body']//div[@class='zonePage']").first()   if content:      if product.category == 'Jeux Vidéos':         product.name = data.xpath("//div[@class='fildAriane']/a[3]/text()").string()         product.url = data.xpath("//div[@class='fildAriane']/a[3]/@href").string()         product.ssid = product.name         session.do(Request(product.url), process_otherinfo, dict(product=product))      else:         product.manufacturer = content.xpath("preceding-sibling::div//strong[not(@style)]//text()").string(multiple=True)      review = Review()      review.type = 'pro'      review.title = data.xpath("//div[@class='titreNL1']//h2//text()").string(multiple=True)      review.url = context['url']      review.ssid = re_search_once("actu/(\d+)", review.url)      product.reviews.append(review)      if context.get('ispreview', None):         review.is_preview = True      review.date = content.xpath("preceding-sibling::div//span[@class='heure']//text()").string(multiple=True)      author = content.xpath("following-sibling::div//a[regexp:test(@href,'membreID')]").first()      if author:         name = author.xpath("descendant::text()").string(multiple=True)         url = author.xpath("@href").string()         if url and name:            ssid = get_url_parameter(url, 'membreID')            review.authors.append(Person(name=name, ssid=ssid, profile_url=url))      excerpt = content.xpath("div[1]//text()").string(multiple=True)      if not(excerpt):         excerpt = content.xpath("div[last()]/node()[not(regexp:test(name(),'(h3|ul)')) and normalize-space(.)]").string(multiple=True)       if excerpt:         review.properties.append(ReviewProperty(type='excerpt', value=excerpt))      conclusion = content.xpath("div[last()]/h4[regexp:test(normalize-space(.),'Conclusion')]/following-sibling::node()/descendant-or-self::text()").string(multiple=True)      if conclusion:         review.properties.append(ReviewProperty(type='conclusion', value=conclusion))      else:         review.is_preview = True      scoredict = {'http://www.zeden.net/design/icones_evaluation/tresbon.png':5, 'http://www.zeden.net/design/icones_evaluation/bon.png':4, 'http://www.zeden.net/design/icones_evaluation/moyen.png':3, 'http://www.zeden.net/design/icones_evaluation/mauvais.png':3}      scoretext = content.xpath("div[last()][regexp:test(normalize-space(.),'Conclusion')]/img/@src").string()      if scoretext:         score = scoredict[scoretext]         if score:            review.grades.append(Grade(name='Rating', type='overall', value=float(score), best=5.0))      for award in content.xpath("div[last()]/p/img"):         title = award.xpath("@alt").string()         src = award.xpath("@src").string()         if title and src:            review.properties.append(ReviewProperty(type='awards', value=dict(title=title, image_src=src)))   if product.reviews:      session.emit(product)def process_otherinfo(data, context, session):   product = context['product']   product.category = data.xpath("//li[regexp:test(normalize-space(.),'Plateforme')]/a/text()").join('|')   product.manufacturer = data.xpath("//li[regexp:test(normalize-space(.),'Développé par')]/a/text()").string()   def run(context, session):   session.queue(Request('https://www.zeden.net/tests'), process_productlist, dict(category='tests'))  