from agent import *from models.products import *import simplejsonXCAT = ["Articles"]def run(context, session):    session.queue(Request("https://unwiredforsound.com/", use="curl"), process_frontpage, dict())def process_frontpage(data, context, session):    cats = data.xpath("//ul[@id='menu-slide-in-menu']/li/a")    for cat in cats:        name = cat.xpath("text()").string()        url = cat.xpath("@href").string()        if name not in XCAT:            session.queue(Request(url, use="curl"), process_prodlist, dict(cat=name))def process_prodlist(data, context, session):    page = context.get("page", 1)    prods = data.xpath("//div[@class='block block-1 clearfix preview-review-bot']//article/following-sibling::div[1]//h3[@class='title']/a")    if not prods:        html = simplejson.loads(data.content.replace("{}\r\n", ''))[1]        data = data.parse_fragment(html)        prods = data.xpath("//article//h3[@class='title']/a")    for prod in prods:        name = prod.xpath("text()").string()        url = prod.xpath("@href").string()        session.queue(Request(url, use="curl"), process_product, dict(context, name=name, url=url))    if not prods:        return    if not context.get("cat_id"):        context["cat_id"] = data.xpath("//a[contains(text(), 'Load more')]/@data-id").string()    if context.get("cat_id") and page == 1:        info = data.xpath("//script[@id='zeen-functions-js-after']/text()").string()        context["cat_args"] = info.split("var zeen_" + context["cat_id"] + " = ")[-1].split('args: {"cat":"', 1)[-1].split('"', 1)[0]    if context.get("cat_id"):        session.do(Request("https://unwiredforsound.com/wp-json/codetipi-zeen/v1/block?paged=" + str(page + 1) + "&type=1&data%5Bid%5D=" + context["cat_id"] + "&data%5Bnext%5D=4&data%5Bprev%5D=2&data%5Btarget%5D=0&data%5Bmnp%5D=0&data%5Bpreview%5D=1&data%5Bis110%5D=1&data%5Bcounter%5D=0&data%5Bcounter_class%5D=&data%5Bpost_subtitle%5D=&data%5Bexcerpt_off%5D=0&data%5Bexcerpt_length%5D=12&data%5Bexcerpt_full%5D=0&data%5Bimg_shape%5D=0&data%5Bbyline_off%5D=0&data%5Bfi_off%5D=0&data%5Bppp%5D=8&data%5Bargs%5D%5Bcat%5D=" + context["cat_args"] + "&data%5Bargs%5D%5Bposts_per_page%5D=8&data%5Bargs%5D%5Btag__in%5D=&data%5Bargs%5D%5Bpost__in%5D=&data%5Bargs%5D%5Boffset%5D=&data%5Bargs%5D%5Bpost_type%5D=&data%5Bargs%5D%5Btax_query%5D=&data%5Bargs%5D%5Btipi%5D=&data%5Bargs%5D%5Btrending%5D=", use="curl"), process_prodlist, dict(context, page=page+1))def process_product(data, context, session):    product = Product()    product.name = context["name"].split(" review")[0]    product.url = data.xpath("//a[@class='aff-button lr-button']/@href").string().split('?')[0].split("/ref=")[0]    product.ssid = context["url"].split('/')[-1]    product.category = context["cat"]    review = Review()    review.type = "pro"    review.title = context["name"]    review.ssid = product.ssid    review.date = data.xpath("//meta[@property='article:modified_time']/@content").string().split('T')[0]    review.url = context["url"]    overall = data.xpath("//div[@class='score']/text()").string()    if overall:        overall = int(overall)        review.grades.append(Grade(type="overall", value=overall, best=100))    grades = data.xpath("//div[contains(@class, 'lets-review-block__crit ')]")    for grade in grades:        value = int(grade.xpath("@data-score").string())        name = grade.xpath("div[contains(@class, 'lets-review-block__crit__title')]/text()").string()        review.grades.append(Grade(name=name, value=value, best=100))    author = data.xpath("//meta[@name='twitter:data1']/@content").string()    if author:        review.authors.append(Person(name=author, ssid=author))    pros = data.xpath("//div[@class='lets-review-block__procon lets-review-block__pro']/text()")    for pro in pros:        pro = pro.string()        review.add_property(type="pros", value=pro)    cons = data.xpath("//div[@class='lets-review-block__procon lets-review-block__con']/text()")    for con in cons:        con = con.string()        review.add_property(type="cons", value=con)    info = data.xpath("//div[@id='content']").first()    summary = info.xpath(".//div[contains(@class, 'entry-content ')]/p[1]//text()").string(multiple=True)    if summary:        review.add_property(type="summary", value=summary)    excerpt = info.xpath(".//p//text()").string(multiple=True)    if excerpt:        if summary:            excerpt = excerpt.split(summary)[-1]        excerpt = excerpt.split("I consent to the privacy policy and terms")[0].strip()        review.add_property(type="excerpt", value=excerpt)    conclusion = data.xpath("//div[@class='lets-review-block__conclusion']//text()").string(multiple=True)    if conclusion:        review.add_property(type="conclusion", value=conclusion)    if summary or excerpt or conclusion:        product.reviews.append(review)        session.emit(product)