from agent import *from models.products import *debug = Truedef process_revlist(data, context, session):    revs = data.xpath("//div[@class='td_module_10 td_module_wrap td-animation-stack']/div[@class='item-details']/h3[@class='entry-title td-module-title']/a")    for rev in revs:        title = rev.xpath(".//text()").string()        url = rev.xpath("@href").string()        session.queue(Request(url, use='curl'), process_review, dict(context, title=title, url=url))        nexturl = data.xpath("//div[@class='td-ss-main-content']/div[@class='page-nav td-pb-padding-side']/a/i [@class='td-icon-menu-right']/../@href").string()    if nexturl:        session.queue(Request(nexturl, use='curl'), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.name = context['title']    product.ssid = context['url'].split('/')[-2].replace('.html', '')    product.category = data.xpath("//div[@class='tdb-block-inner td-fix-index']/span[last()-1]//text()").string()    product.url = context['url']        review = Review()    review.title = context['title']    review.ssid = product.ssid    review.type = 'pro'    review.url = context['url']    date = data.xpath("//div[@class='tdb-block-inner td-fix-index']/time[@class='entry-date updated td-module-date']/@datetime")    if not date:        date = data.xpath("//span[@class='td-post-date']/time[@class='entry-date updated td-module-date']/@datetime")    review.date = date.string().split('T')[0]        authors = data.xpath("//div[@class='tdb-author-name-wrap']/a[@class='tdb-author-name']")    for author in authors:        author_name = author.xpath(".//text()").string()        author_url = author.xpath("@href").string()        review.authors.append(Person(name=author_name, profile_url=author_url, ssid=author_name))            conclusion = data.xpath("//div[@class='tdb-block-inner td-fix-index']/h3[contains(.,'Considerazioni')]/following-sibling::p[1]//text()").string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))        excerpt = data.xpath("//div[@class='tdb-block-inner td-fix-index']/p//text()").string(multiple=True)    if excerpt:        if conclusion:            excerpt = excerpt.replace(conclusion, '')        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))        grades = data.xpath("//tr[@class='td-review-row-stars']")    for grade in grades:        grade_name = grade.xpath("./td//text()").string()        grade_val = len(grade.xpath(".//i[@class='td-icon-star']"))        if grade_name != 'Overall':            review.grades.append(Grade(name=grade_name, value=float(grade_val), best=10.0))        grade_overall = data.xpath("//div[@class='td-review-final-score']//text()").string()    if grade_overall:        review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))        pros = data.xpath("//div[@class='tdb-block-inner td-fix-index']/h3[contains(.,'Pro')]/following-sibling::p[contains(.,'• ')][1]//text()")    for pro in pros:        pro = pro.string().replace('+', '').strip()        review.add_property(type='pros', value=pro)        cons = data.xpath("//div[@class='tdb-block-inner td-fix-index']/h3[contains(.,'Contro')]/following-sibling::p[contains(.,'• ')][1]//text()")    for con in cons:        con = con.string().replace('- ', '').strip()        review.add_property(type='cons', value=con)        product.reviews.append(review)    session.emit(product)def run(context, session):    session.queue(Request('https://www.macitynet.it/category/recensioni/', use='curl'), process_revlist, {})