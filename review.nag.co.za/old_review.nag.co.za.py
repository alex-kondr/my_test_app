from agent import *from models.products import *import simplejsondef run(context, session):    session.queue(Request('https://www.nag.co.za/category/reviews/'), process_frontpage, dict(page=1))def process_frontpage(data, context, session):    prods = data.xpath("//h3//a")    for prod in prods:        title = prod.xpath("text()").string()        url = prod.xpath("@href").string()        url = url.replace('%5C', '').replace('%22', '').replace('https://www.nag.co.za/wp-json/codetipi-zeen/v1/', '')        session.queue(Request(url), process_product, dict(context, title=title, url=url))    if prods and len(prods) >= 15:        page = context['page'] + 1        next_url = "https://www.nag.co.za/wp-json/codetipi-zeen/v1/block?paged=" + str(page) + "&type=1&data[id]=88038&data[next]=" + str(page+1) + "&data[prev]=" + str(page-1) + "&data[target]=0&data[mnp]=0&data[preview]=1&data[is110]=1&data[counter]=0&data[counter_class]=&data[post_subtitle]=&data[excerpt_off]=1&data[excerpt_length]=12&data[excerpt_full]=0&data[img_shape]=0&data[byline_off]=0&data[fi_off]=0&data[ppp]=15&data[args][cat]=4563&data[args][posts_per_page]=15&data[args][tag__in]=&data[args][post__in]=&data[args][offset]=&data[args][post_type]=&data[args][tax_query]=&data[args][tipi]=&data[args][trending]="        session.queue(Request(next_url, max_age=0), process_frontpage, dict(page=page))def process_product(data, context, session):    product = Product()    product.ssid = context['url'].split('/')[-2]    product.url = context['url']    product.name = context['title'].replace(' review', '').replace('Review: ', '')    product.category = data.xpath("//div[@class='block-elements']/a/text()").string() or "Review"    review = Review()    review.title = context['title']    review.ssid = product.ssid    review.type = 'pro'    review.url = context['url']    review.date = data.xpath("//span[@class='byline-part date']/text()").string()    author_name = data.xpath("//span[@class='byline-part author']/a/text()").string()    author_url = data.xpath("//span[@class='byline-part author']/a/@href").string()    review.authors.append(Person(name=author_name, url=author_url, ssid=author_name))    grade_overall = data.xpath("//div[@class='score']/text()").string()    if not grade_overall:        grade_overall = data.xpath("//span[@class='su-dropcap su-dropcap-style-default']/text()").string()    if grade_overall and grade_overall.isdigit():        review.grades.append(Grade(type='overall', value=float(grade_overall), best=100))            conclusion = data.xpath("//div[@class='lets-review-block__conclusion']/text()").string(multiple=True)    if not conclusion:        conclusion = data.xpath("//body/h4//text()").string(multiple=True)        if conclusion and grade_overall:            conclusion = conclusion.replace(grade_overall, '')    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    excerpt = data.xpath("//div[@class='entry-content-wrap clearfix']/div/p//text()").string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt', value=excerpt))    pros = data.xpath("//div[@class='lets-review-block__pros']/div[@class='lets-review-block__procon lets-review-block__pro']")    if not pros:        pros = data.xpath("//div[contains(., 'Plus')]/div[@class='su-box-content su-u-clearfix su-u-trim']/ul/li")    for pro in pros:        pro_text = pro.xpath("text()").string().strip()        review.add_property(type='pros', value=pro_text)    cons = data.xpath("//div[@class='lets-review-block__cons']/div[@class='lets-review-block__procon lets-review-block__con']")    if not cons:        cons = data.xpath("//div[contains(., 'Minus')]/div[@class='su-box-content su-u-clearfix su-u-trim']/ul/li")    for con in cons:        con_text = con.xpath("text()").string().strip()        review.add_property(type='cons', value=con_text)    if excerpt or conclusion:        product.reviews.append(review)        session.emit(product)