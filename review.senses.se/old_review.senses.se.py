from agent import *from models.products import *XCAT = ['Mat & Dryck', 'Resor', 'Om', 'Referens']URLS = ['https://www.senses.se/tv-4k-hdr-guide/']X_CONCLUSION = ['https://www.senses.se/senses-betygsatter-alla-marvel-filmerna-mcu/']def run(context, session):        session.sessionbreakers = [SessionBreak(max_requests=4000)]        session.queue(Request("http://www.senses.se/", force_charset='utf-8'), process_catlist, dict())def process_catlist(data, context, session):    cats = data.xpath('//ul[@id="menu-meny"]/li')    for cat in cats:        name = cat.xpath('a//text()').string()        if name not in XCAT:            subcats = cat.xpath('ul[@class="sub-menu"]/li/a')            for subcat in subcats:                subcat_name = subcat.xpath('text()').string()                url = subcat.xpath('@href').string()                session.queue(Request(url, force_charset='utf-8'), process_revlist, dict(cat=name + "|" + subcat_name))def process_revlist(data, context, session):    revs = data.xpath('//li[@class="list-post pclist-layout"]')    for rev in revs:        title = rev.xpath('.//h2[@class="penci-entry-title entry-title grid-title"]/a//text()').string()        url = rev.xpath('.//h2[@class="penci-entry-title entry-title grid-title"]/a/@href').string()        ssid = rev.xpath('article/@id').string().split('post-')[-1]        session.queue(Request(url, force_charset='utf-8'), process_review, dict(context, title=title, url=url, ssid=ssid))    next_url = data.xpath('//link[@rel="next"]/@href').string()    if next_url:        session.queue(Request(next_url, force_charset='utf-8'), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    product.category = context['cat']    product.url = context['url']    product.ssid = context['ssid']    manufacturer = data.xpath('//div[@class="penci-review-schema"][strong[contains(text(), "Märke")]]/text()').string()    if manufacturer:        product.manufacturer = manufacturer.replace('Panansonic', 'Panasonic')    name = data.xpath('//div[@class="penci-review-schema"][strong[contains(text(), "Speltitel")]]/text()').string()    if not name:        name = data.xpath('//div[@class="penci-review-schema"][strong[contains(text(), "Filmtitel")]]/text()').string()    if not name:        name = data.xpath('//div[@class="penci-review-schema"][strong[contains(text(), "Produktnamn")]]/text()').string()    if not name:        name = context['title']    if name:        product.name = name.split('Recension:')[-1].split('Test:')[-1].strip()    product.url = data.xpath('//p/strong/em/a/@href').string()    if not product.url:        product.url = data.xpath('//p[a[strong[em]]]/a/@href').string()    if not product.url:        product.url = data.xpath('//p[a[em]]/a/@href').string()    if not product.url:        product.url = data.xpath('//p/em/a/@href').string()    if not product.url:        product.url = data.xpath('//p[a[em[strong]]]/a/@href').string()    if not product.url:        product.url = data.xpath('//p[strong[a[em]]]/strong/a/@href').string()    if not product.url or "senses.se" in product.url:        product.url = context['url']    review = Review()    review.type = 'pro'    review.ssid = product.ssid    review.url = context['url']    review.title = context['title']    date = data.xpath('//div[@class="post-box-meta-single"]//time/@datetime').string()    if date:        review.date = date.split('T')[0]    author = data.xpath('//div[@class="post-box-meta-single"]//a[contains(@class, "author-url")]//text()').string()    author_url = data.xpath('//div[@class="post-box-meta-single"]//a[contains(@class, "author-url")]/@href').string()    if author:        author_ssid = author_url.split('/')[-2]        review.authors.append(Person(name=author, ssid=author, profile_url=author_url))    grade_overall = data.xpath('//div[@class="penci-review-score-num"]//text()').string()    if grade_overall:        grade_overall = float(grade_overall.strip())        review.grades.append(Grade(type='overall', value=grade_overall, best=10.0))    pros = data.xpath('//div[@class="penci-review-good"]//li')    if pros:        for pro in pros:            pro = pro.xpath('.//text()').string().rstrip('(').split('.) ')[-1]            review.add_property(type='pros', value=pro)    cons = data.xpath('//div[@class="penci-review-good penci-review-bad"]//li')    if cons:        for con in cons:            con = con.xpath('.//text()').string().split('.) ')[-1]            review.add_property(type='cons', value=con)    summary = ""    if not data.xpath('//div[@class="inner-post-entry entry-content"]/p[1]/text()') or review.url in URLS:        summary = data.xpath('//div[@class="inner-post-entry entry-content"]/p[1]/strong[em]//text()').string(multiple=True)        if summary:            summary = summary.strip()            review.add_property(type='summary', value=summary)    conclusion = data.xpath('//p[strong[contains(text(), "Summering:")]]/text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//h2[contains(text(), "Summering")]/following-sibling::p[not(em[a])][not(contains(., "med er läsare och konsumenter i fokus"))][not(contains(., "inflytande på våra tester"))][not(.//a[contains(., "Här köper du")])][not(.//a[contains(., "Ska du köpa")])][not(em[a][contains(., "bästa pris och")])]//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//h2[contains(text(), "Sammanfattning")]/following-sibling::p[1][not(em[a])][not(.//a[contains(., "Här köper du")])][not(.//a[contains(., "Ska du köpa")])][not(em[a][contains(., "bästa pris och")])]//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//p[span[contains(text(), "Summering:")]]//text() | //p[span[contains(text(), "Summering:")]]/following-sibling::p[not(em[a])][not(.//a[contains(., "Här köper du")])][not(.//a[contains(., "Ska du köpa")])][not(em[a][contains(., "bästa pris och")])]//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//p[em[span[contains(text(), "Summering:")]]]//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//p[span[contains(., "Summering")]]//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//p[strong[contains(text(), "Summering")]]//text() | //p[strong[contains(text(), "Summering")]]/following-sibling::p[not(em[a])][not(.//a[contains(., "Här köper du")])][not(.//a[contains(., "Ska du köpa")])][not(em[a][contains(., "bästa pris och")])]//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//p[contains(text(), "Summering:")]//text()').string(multiple=True)    if not conclusion and review.url not in X_CONCLUSION:        conclusion = data.xpath('//p[contains(text(), "ammanfattningsvis så")]//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//h2[contains(text(), "Omdöme och betyg")]/following-sibling::p[not(em[a])][not(.//a[contains(., "Här köper du")])][not(.//a[contains(., "Ska du köpa")])][not(em[a])][not(em[a][contains(., "bästa pris och")])]//text()').string(multiple=True)    if not conclusion:        conclusion = data.xpath('//h2[contains(text(), "Slutomdöme")]/following-sibling::p[not(em[a])][not(.//a[contains(., "Här köper du")])][not(.//a[contains(., "Ska du köpa")])][not(em[a])][not(em[a][contains(., "bästa pris och")])]//text()').string(multiple=True)    if conclusion:        conclusion = conclusion.replace('Summering', '').strip(': ')        review.add_property(type='conclusion', value=conclusion)    excerpt = data.xpath('//div[@class="inner-post-entry entry-content"]/p[not(contains(., "med er läsare och konsumenter i fokus"))][not(contains(., "inflytande på våra tester"))][not(contains(text(), "Mått:"))][not(.//a[contains(., "Här köper du")])][not(.//a[contains(., "Ska du köpa")])][not(em[a[contains(@aria-label, "Här köper du")]])][not(em[a][contains(., "Här köper du")])][not(em[a][contains(., "bästa pris och")])][not(em[a][contains(., "tjackar du")])]//text()').string(multiple=True)    if excerpt and len(data.xpath('//div[@class="inner-post-entry entry-content"]/p')) > 4:        if summary and summary != "":            excerpt = excerpt.replace(summary, '')        if conclusion:            excerpt = excerpt.split(conclusion)[0]        excerpt = excerpt.split('// <![CDATA[ !function')[0].split('Summering:')[0].replace('Summering', '').strip()        review.add_property(type='excerpt', value=excerpt)        product.reviews.append(review)        session.emit(product)