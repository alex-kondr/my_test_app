#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *from Ft.Xml import ReaderExceptiondebug = Truedef run(context, session):   session.browser.use_new_parser = True   session.sessionbreakers = [SessionBreak(max_requests=20000)]   session.queue(Request('https://www.cnetfrance.fr/produits/'), process_frontpage, {})def process_frontpage(data, context, session):   for cat in data.xpath("//div[@id='produitsMenu']//ul[@class='topCategories']/li/a"):      url = cat.xpath("@href").string()      category = cat.xpath("descendant::text()").string(multiple=True)      if url and category:         session.queue(Request(url), process_revlist, dict(category=category))def process_revlist(data, context, session):    for rev in data.xpath('//div[@class="col-6 prodInfo"]/a'):        url = rev.xpath('@href').string()        title = rev.xpath('node()[@class="storyTitle"]//text()').string(multiple=True)        if url and title:            name = title            bad_list = [' : ']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            bad_list2 = ['Test :','Test -','Test de',' Le '," l'aspirateur ",            'Test du','Test ',"de l’","l'",'Crash test ']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url), process_review, dict(context, url=url, title=title, name=name))    nexturl = data.xpath('//li[@class="next"]/a/@href').string()    if nexturl:        session.queue(Request(nexturl), process_revlist, dict(context))def process_review(data, context, session):    try:        posts = data.xpath("/")    except ReaderException:        print 'Not well formed.'        return    product = Product()    # Name    if '"itemReviewed":"' in data.content:        name = data.content.split('"itemReviewed":"')[1].split('"')[0]        product.name = name    else:        product.name = context['name']    product.url = context['url']    product.ssid = data.xpath('//div[@data-product-id]//@data-product-id').string() or product.name    # Category    category = data.xpath('//div[@section="tag"]//dd//a//text()').join('|')    if category:        product.category = context['category'] + '|' + category    else:        product.category = context['category']    review = Review()    review.type = 'pro'    review.title = context['title']    review.url = context['url']    review.ssid = product.ssid + ' review'    if '"datePublished":"' in data.content:        pub_date = data.content.split('"datePublished":"')[1].split('"')[0]        if 'T' in pub_date: pub_date=pub_date.split('T')[0]        review.date = pub_date    else:        review.date = "N/A"    author = data.xpath('//a[@class="author"]//text()[string-length(normalize-space(.))>0]').string()    if author:        review.authors.append(Person(name=author, ssid=author))    # Excerpt    exce_list = [    '//meta[@property="og:description"]//@content',    '//article[@id="cnetReview"]//following::div[descendant::p]//p[string-length(normalize-space(.))>100]//text()']    for item in exce_list:        excerpt=data.xpath(item).string(multiple=True)        if excerpt:            excerpt = excerpt.replace('»','')            review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:135]+'...'))            break    protxt = data.xpath('//p[@class="theGood"]//span//text()').string()    if protxt:        review.add_property(type='pros', value=protxt)    contxt = data.xpath('//p[@class="theBad"]//span//text()').string()    if contxt:        review.add_property(type='cons', value=contxt)    rate = data.xpath('//div[@id="summaryInfo"]//span[@class="rating"]//text()').string(multiple=True)    if rate:        if float(rate) > 5:            rate = float(rate)/10            review.grades.append(Grade(type='overall', name='Rating', value=rate, best=10.0))        else:            review.grades.append(Grade(type='overall', name='Rating', value=rate, best=5.0))    # Summary    summary=data.xpath('//p[@class="theBottomLine"]//span//text()').string(multiple=True)    if summary:        review.properties.append(ReviewProperty(type='summary',value=summary))    # Conclusion    conc_list = [    '//node()[regexp:test(descendant::text(),"(Conclus|Verdict)")]/following-sibling::p[text()][1]//text()',    '//p[regexp:test(descendant::node()//text(),"(Verdict|Conclus)")]/following-sibling::p[1]//text()']    for item in conc_list:        conclusion = data.xpath(item).string(multiple=True)        if conclusion:            review.properties.append(ReviewProperty(type='conclusion', value=conclusion))            break    if data.xpath("//div[@class='fyre-stream-content']"):        process_comments(data, dict(product=product), session)    if rate and int(rate) > 0: product.reviews.append(review)    if product.reviews:        session.emit(product)def process_comments(data, context, session):   product = context['product']   for cnt, rev in enumerate(data.xpath("//div[@class='fyre-stream-content']/following::body[1]")):      review = Review()      review.type = 'user'      review.title = rev.xpath("h3/span/text()").string(multiple=True)      review.url = product.url      review.ssid = '%s-%s'%(product.ssid, cnt+1)      product.reviews.append(review)      review.date = rev.xpath(" span[1]/text()").string(multiple=True)      if not(review.date):         review.date = "N/A"      author = rev.xpath("following::body[1]//a[@itemprop='author']/text()").string()      if author:         review.authors.append(Person(name=author, ssid=author))      excerpt = rev.xpath(" following::body[1]//div[@class='fyre-comment']/p//text()").string(multiple=True)      if excerpt:         review.add_property(type='excerpt', value=excerpt)      grade = rev.xpath(" following::meta[@itemprop='ratingValue']/@content").string()      if grade:         review.grades.append(Grade(type='overall', name='Rating', value=grade, best=5.0))