from agent import *from models.products import *import redef run(context, session):    session.queue(Request('http://www.fotografuj.pl/Dzial/Testy_praktyczne'), process_revlist, dict())def process_revlist(data, context, session):    revs = data.xpath("//td[@class='intro']/a[span]")    for rev in revs:        url = rev.xpath("@href").string()        title = rev.xpath("span/text()").string()        excerpt = rev.xpath("following::text()[normalize-space(self::text())][1]").string()        if url and title and excerpt:            session.queue(Request(url), process_review, dict(url=url, title=title, excerpt=excerpt))    next_url = data.xpath("//a[regexp:test(normalize-space(.),'następna strona »')]/@href").string()    if next_url:        fixedurl = re_search_once("^(.+)#", next_url)        if fixedurl:            session.queue(Request(fixedurl), process_revlist, dict(context))def process_review(data, context, session):    content = data.xpath("//td[@class='content2']").first()    product = Product()    product.url = context['url']    product.ssid = re_search_once('(\d+)$', product.url)    product.category = 'Cameras'    title = context['title']    if ': ' in title and ' – ' in title:        title = title.split(': ')[-1].split(' – ')[0]    title = title.split("TEST: ")[-1].split(" – ")[0].split(" - ")[0]    if ", czyli " in title and not ',' in title.split(", czyli ")[0]:        title = title.split(", czyli ")[0]    product.name = title    if content:        review = Review()        review.type = 'pro'        review.title = context['title']        review.url = context['url']        review.ssid = product.ssid        authortxt = content.xpath("span[@class='author']//text()").string(multiple=True)        if authortxt:            author = re_search_once(": (.*)$", authortxt)            authors = author.split(',')            for author in authors:                if not "Artykuł sponsorowany" in author:                    review.authors.append(Person(name=author, ssid=author))        pages = content.xpath("descendant::table[@class='pages'][1]//a[regexp:test(normalize-space(.),'\d')]")        summary = content.xpath("div[@class='article_header'][2]//text()").string(multiple=True)        if summary:            review.add_property(type='summary', value=summary)        excerpt = ""        if not pages:            excerpt = content.xpath("div[@class='article_body_ramka']/div[@class='article_body_ramka_in']//text()[not(ancestor::center)]").string(multiple=True)            if excerpt:                excerpt = excerpt.split("Zobacz także:")[0]                review.add_property(type='excerpt', value=excerpt)        if summary or excerpt:            product.reviews.append(review)        if pages:            review.add_property(type='pages', value=dict(url=context['url'], title='Page 1'))            for i in range(len(pages)):                page = pages[i]                url = page.xpath("@href").string()                title = page.xpath("descendant::text()").string(multiple=True)                if url and title:                    fixedurl = re_search_once("^(.+)#", url)                    review.add_property(type='pages', value=dict(url=fixedurl, title=('Page ' + title)))                    if i == len(pages) - 1:                        product = session.do(Request(fixedurl), process_lastpage, dict(context, product=product))        elif product.reviews:            product = process_lastpage(data, dict(context, product=product, content=content), session)        if product.reviews:            session.emit(product)def process_lastpage(data, context, session):    content = context.get("content", data.xpath("//td[@class='content2']").first())    product = context["product"]    review = product.reviews[0]    if content:        conclusion = ""        if not context.get("content", ""):            conclusion = content.xpath("div[@class='article_body_ramka']/div[@class='article_body_ramka_in']//text()[not(ancestor::center)]").string(multiple=True)        pros = content.xpath("div[@class='article_body_ramka']/div[@class='article_body_ramka_in']/span[regexp:test(text(), 'plusy:?|zalety', 'i')]/following-sibling::ul[1]/li")        for pro in pros:            pro = pro.xpath("text()").string()            review.add_property(type="pros", value=pro)        if not pros:            if " Plusy: +" in conclusion:                pros = conclusion.split(" Plusy: +")[-1].split('.')[0].split(" Minusy")[0]            elif " Plusy +" in conclusion:                pros = conclusion.split(" Plusy +")[-1].split('.')[0].split(" Minusy")[0]            if '+' in pros:                pros = pros.split('+')            elif ',' in pros:                pros = pros.split(',')            for pro in pros:                pro = pro.strip()                review.add_property(type="pros", value=pro)        cons = content.xpath("div[@class='article_body_ramka']/div[@class='article_body_ramka_in']/span[regexp:test(text(), 'minusy:?|wady', 'i')]/following-sibling::ul[1]/li")        for con in cons:            con = con.xpath("text()").string()            review.add_property(type="cons", value=con)        if not cons:            if " Minusy -" in conclusion:                cons = conclusion.split(" Minusy -")[-1].split('.')[0]                cons = re_search_once("^(.+)[A-Z]{1}", cons)                if '-' in cons:                    cons = cons.split('-')                elif ',' in cons:                    cons = cons.split(',')                for con in cons:                    con = con.strip()                    review.add_property(type="cons", value=con)        if conclusion:            conclusion = conclusion.split("Zobacz także:")[0].split(" Plusy: ")[0].strip()            review.add_property(type='conclusion', value=conclusion)    return product