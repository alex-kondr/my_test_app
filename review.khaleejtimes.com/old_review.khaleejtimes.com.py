from agent import *from models.products import *def run(context, session):    session.queue(Request("https://www.khaleejtimes.com/reviews/tech-review", use="curl", force_charset="utf-8"), process_revlist, dict())def process_revlist(data, context, session):    revs = data.xpath("//h2[@class='post-title']/a")    for rev in revs:        url = rev.xpath("@href").string()        if url:            session.queue(Request(url), process_review, dict(context, url=url))    next_url = data.xpath("//a[@class='page-link' and contains(.,'>')]/@href").string()    if next_url:        session.queue(Request(next_url), process_revlist, dict(context))def process_review(data, context, session):    product = Product()    title = data.xpath("//div[contains(@class,'article-container')]//h1//text()").string(multiple=True)    if not title:        title = data.xpath("//div[contains(@class,'article-wrapper')]//h1//text()").string(multiple=True)    if title:        product.name = title.split("REVIEW:")[-1].split("Review")[-1].strip()    product.url = context['url']    product.category = data.xpath("//ul[@class='tags-btm-nf']/li[1]//text()").string()    product.ssid = context['url'].split("/")[-1]    review = Review()    review.title = title    review.url = product.url    review.ssid = product.ssid    review.type = 'pro'    date = data.xpath("//div[contains(@class,'article-top-author-nw-nf-right')]//p[contains(.,'Published:')][1]//text()").string(multiple=True)    if date:        review.date = date.split(',')[0].split(': ')[-1].split(' ', 1)[-1]    author_name = data.xpath("//div[contains(@class,'article-top-author-nw-nf-left')][1]//text()").string(multiple=True)    if author_name:        author_name = author_name.split('By')[-1].split('by')[-1].strip()        review.authors.append(Person(name=author_name, ssid=author_name))    pro = data.xpath("//p[contains(.,'GOODIES:')][1]//text()").string(multiple=True)    if pro:        pro = pro.split('GOODIES:')[-1].strip()        review.add_property(type='pros', value=pro)    con = data.xpath("//p[contains(.,'GOOFIES:')][1]//text()").string(multiple=True)    if con:        con = con.split('GOOFIES:')[-1].strip()        review.add_property(type='cons', value=con)    grade_overall = data.xpath("//p[contains(.,'EDITOR RATING:')][1]//text()").string(multiple=True)    if grade_overall:        grade_overall = grade_overall.split('/5')[0].split(' ')[-1]        review.grades.append(Grade(type='overall', value=float(grade_overall), best=5.0))    summary = data.xpath("//h3[contains(@class,'preamble-nf')]//text()").string(multiple=True)    if summary:        summary = summary.split("Dubai -")[-1].strip()        review.add_property(type='summary', value=summary)    excerpt = data.xpath("//div[contains(@class,'article-paragraph-wrapper')][1]//p[not(contains(.,'Published:')) and not(contains(.,'Last updated:')) and not(contains(.,'@')) and not(contains(.,'GOODIES:')) and not(contains(.,'GOOFIES:')) and not(contains(.,'EDITOR RATING: '))]//text()").string(multiple=True)    if not excerpt:        excerpt = data.xpath("//div[contains(@class,'article-wrapper')]//p[not(contains(.,'Published:')) and not(contains(.,'Last updated:')) and not(contains(.,'visit :'))]//text()").string(multiple=True)    if excerpt:        if summary:            excerpt = excerpt.replace(summary, '')        review.add_property(type='excerpt', value=excerpt.strip())        product.reviews.append(review)        session.emit(product)