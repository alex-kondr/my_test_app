#!/usr/bin/python# -*- coding: utf-8 -*-from agent import *from models.products import *debug = Truedef run(context, session):    session.sessionbreakers = [SessionBreak(max_requests=10000)]    session.queue(Request('https://www.techspot.com/reviews/', force_charset='iso-8859-1'), process_frontpage, {})def process_frontpage(data, context, session):    for cat in data.xpath('//div[@id="CategoryListOne"]//li//a'):        context['category'] = cat.xpath(".//text()[string-length(normalize-space(.))>0]").string()        cat_url = cat.xpath("@href").string()        if context['category'] and cat_url:            session.queue(Request(cat_url, force_charset='iso-8859-1'), process_category, context)def process_category(data, context, session):    try:        for p in data.xpath("//div[@class='category']/ul/li"):            context['name'] = p.xpath(".//h3/a//text()[string-length(normalize-space(.))>0]").string()            context['url'] = p.xpath(".//h3/a/@href[regexp:test(., '\/review\/')]").string()            if context['name'] and context['url']:                session.queue(Request(context['url'], force_charset='utf-8'), process_product, context)        next = data.xpath("//div[@class[regexp:test(., 'footerPagelist')]]//a[@rel='next']/@href").string()        if next:            session.queue(Request(next, force_charset='iso-8859-1'), process_category, context)    except:        print 'Not well formed'        passdef process_product(data, context, session):    try:        product=Product()        product.name=context['name']        product.url=context['url']        product.ssid=product.name + product.url        product.category=context['category']        product.manufacturer=''        review=Review()        review.product=product.name        review.url=product.url        review.ssid=product.ssid + ' review'        review.type='pro'        # Publish date        pub_date=data.xpath('//time[@pubdate="pubdate"]//@datetime').string()        if pub_date:            if ' ' in pub_date: pub_date=pub_date.split(' ')[0]            review.date=pub_date        else:            review.date='unknown'        # Author        author=data.xpath('//a[@rel="author"]//text()').string(multiple=True)        if author:            review.authors.append(Person(name=author, ssid=author))        else:            review.authors.append(Person(name='unknown', ssid='unknown'))        # Excerpt        excerpt = ''        excerpt=data.xpath('//div[@class="articleBody"]//p[string-length(normalize-space(.))>100]//text()').string(multiple=True)        if excerpt:            review.properties.append(ReviewProperty(type='excerpt',value=excerpt[:111]))        # Pages        lasturl = False        for page in data.xpath('//div[@class="index-mobile"]//li//a'):            title = page.xpath('descendant::text()').string()            url = page.xpath('@href').string()            if title and url:                lasturl = url                review.properties.append(ReviewProperty(type='pages',value=dict(url=url, title=title)))        if lasturl:            session.do(Request(lasturl, force_charset='utf-8'), process_summary, dict(review=review,excerpt=excerpt))        else:            process_summary(data, dict(review=review,excerpt=excerpt), session)        product.reviews.append(review)        if product.reviews:            session.emit(product)    except:        print 'Not well formed'        passdef process_summary(data, context, session):    review = context['review']    # Grades    over_list = [    '//div[@class="pf_score pf_average"]//text()',    '//div[contains(@class,"pf_score ")]//text()']    for item in over_list:        overall=data.xpath(item).string()        if overall:            try:                review.grades.append(Grade(name='Overall Rating', type='overall', value=overall, best=100))            except:                print 'Bad value', overall            break    # Summary    summ_list = [    '//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Final Thoughts|txt2|txt3)")]/following-sibling::p[string-length(normalize-space(.))>100]//text()',    '//div[@class="articleBody"]//p[string-length(normalize-space(.))>100]//text()']    for item in summ_list:        summary=data.xpath(item).string(multiple=True)        if summary and summary!=context['excerpt']:            review.properties.append(ReviewProperty(type='summary',value=summary))            break    # Pros    pros=data.xpath('//div[@class="content_box"]//p//span[regexp:test(., "Pros")]/following-sibling::text()[string-length(normalize-space(.))>0]').string(multiple=True)    if pros:        review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    cons=data.xpath('//div[@class="content_box"]//p//span[regexp:test(., "Cons")]/following-sibling::text()[string-length(normalize-space(.))>0]').string(multiple=True)    if cons:        review.properties.append(ReviewProperty(type='cons',value=cons))