# -*- coding: utf8 -*-from agent import *from models.products import *import agentdef request(url):   r = agent.Request(url, max_age=0)   r.add_header('Cookie', 'cookiebar=1; client_locale=nl_NL; lastConsentChange=1563742238848')   r.add_header('Upgrade-Insecure-Requests', '1')   r.add_header('X-Compress', 'null')   r.add_header('Cache-Control', 'max-age=0')   r.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36')   return rRequest = requestdef run(context, session):    session.browser.agent = 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36'    session.sessionbreakers=[SessionBreak(max_requests=40000)]    session.do(Request('https://nl.hardware.info/'), process_dummy, {})    session.queue(Request('https://nl.hardware.info/reviews'), process_category, {})def process_dummy(data, context, session):    passdef process_first_page(data, context, session):    for link in data.xpath('//div[contains(@class,"categoryEditorialBrowser")]//ul[contains(@class,"images")]//a'):        url=link.xpath('@href').string()        category=link.xpath('text()').string()        if url and category:            session.queue(Request(url),process_category,dict(category=category))def process_category(data, context, session):    for link in data.xpath('//div[@class="overview-item__body"]//node()[regexp:test(name(),"h\d")]//a'):        url=link.xpath('@href').string()        name=link.xpath('text()').string()        if url and name and '/video/' not in url:            bad_list = [' review: ']            for item in bad_list:                if item in name:                    namex = name.split(item)[0]                    if len(namex) == 0:                        name = name.split(item)[1]                    else:                        name = namex                    break            bad_list2 = ['review','','','','']            for item in bad_list2:                if item in name:                    name = name.replace(item, '')            session.queue(Request(url),process_product,dict(context,url=url,name=name))    # Next page    next=data.xpath('//a[@rel="next"]//@href').string()    if next:        session.queue(Request(next), process_category, dict(context))def process_product(data, context, session):    product=Product()    product.name=context['name']    product.url=context['url']    # Ssid    if 'setTargeting("contentid", "' in data.content:        ssid = data.content.split('setTargeting("contentid", "')[1].split('"')[0]        product.ssid = ssid    else:        product.ssid=product.name + product.url    # Category    if 'setTargeting("kw", "' in data.content:        category = data.content.split('setTargeting("kw", "')[1].split('"')[0]        product.category=category    else:        product.category='unknown'    review=Review()    review.product=product.name    review.url=product.url    review.type='pro'    review.ssid=product.ssid + ' review'    # Publish date    pub_date=data.xpath('//span[@class="article__date"]//text()').string()    if pub_date:        review.date=pub_date    else:        review.date='unknown'    # Author    author=data.xpath('//span[contains(@class,"article__author")]//span[contains(@class,"-activate")]//text()').string(multiple=True)    if author:        review.authors.append(Person(name=author, ssid=author))    else:        review.authors.append(Person(name='unknown', ssid='unknown'))    # Excerpt    excerpt=data.xpath('//meta[@property="og:description"]//@content').string(multiple=True)    if excerpt:        review.properties.append(ReviewProperty(type='excerpt',value=excerpt))    # Conclusion    conclusion = data.xpath('//node()[regexp:test(name(),"h\d")][regexp:test(descendant::text(),"(Conclus|txt2|txt3)")]/following-sibling::p[not(@style)][not(a)]//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))    # Pros    for p in data.xpath('//ul[@class="argumentspro"]//li'):        pros=p.xpath('descendant::text()').string(multiple=True)        if pros:            review.properties.append(ReviewProperty(type='pros',value=pros))    # Cons    for c in data.xpath('//ul[@class="argumentscon"]//li'):        cons=c.xpath('descendant::text()').string(multiple=True)        if cons:            review.properties.append(ReviewProperty(type='cons',value=cons))    # Award    award = data.xpath('//img[contains(@src,"/award/")]//@src').string()    if award:       review.properties.append(ReviewProperty(type='awards', value=dict(image_src=award)))    product.reviews.append(review)    if product.reviews and excerpt:        session.emit(product)"""import csvdef run(context, session):  context["timeout"] = 6400  session.sessionbreakers=[SessionBreak(max_requests=30000)]  session.queue(Request("http://api.hardware.info/product-reviews/?country=nl"), process_csv, context)def process_csv(data, context, session):  rows = csv.reader(file(data.content_file), delimiter=';', quotechar='"')  headers = rows.next()  seen = []  for row in rows:    cols = dict(zip(headers, row))    product = Product()    product.name = cols["Product Name"]    product.url = cols["Article URL"]    if seen.count(product.url):        continue #no dupes from comparison reviews    seen.append(product.url)    product.ssid = cols["Article Id"]    product.category = cols["Product Group"]    product.manufacturer = cols["Brand Name"]    ean = cols["EAN"]    if ean:        product.add_property(type='id.ean', value=ean)    mpn = cols["MPN"]    if mpn:        product.add_property(type='id.manufacturer', value=mpn)    review = Review()    review.title = cols["Article Title"]    review.ssid = product.ssid    review.url = product.url    review.date = cols["Article Publication Time"]    review.type = "pro"    review.properties.append(ReviewProperty(type="excerpt", value=cols["Article Intro Text"]))    awd_src = cols["Product Award Logo"]    awd_alt = cols["Product Award"]    if awd_src and awd_alt:        review.add_property(type='awards', value=dict(imag_src=awd_src, name=awd_alt))    session.do(Request(cols["Article URL"]), get_conc_url, dict(review=review))    product.reviews.append(review)    session.emit(product)def get_conc_url(data, context, session):    uri = data.xpath('//li//a[contains(@href, "conclus")]//@href').string()    if uri:        session.do(Request(uri), get_conclusion, context)def get_conclusion(data, context, session):    review = context['review']    # Conclusion    conclusion = data.xpath('//node()[@itemprop="reviewBody"]/following-sibling::p[not(@style)][not(a)]//text()').string(multiple=True)    if conclusion:        review.properties.append(ReviewProperty(type='conclusion', value=conclusion))"""